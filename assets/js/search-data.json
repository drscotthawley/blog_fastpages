{
  
    
        "post0": {
            "title": "Learning Some Geometric/Clifford Algebra",
            "content": ". Work in progress / Still writing this one! Last update: Jan 16, 2021 . Motiviations . The recent paper, &quot;Lightweight Convolutional Neural Networks By Hypercomplex Parameterization&quot;. i.e, the potential for interesting (multichannel audio) signal processing applications of deep learning + hypercomplex numbers. | The fact that, even as theoretical physicist (of classical field theory), I never learned enough about particle physics / QFT because I hated Dirac spinors, Pauli matrices, quaternions, and such. Thus this is an attempt to finally overcome my ignorance and aversion to an important and useful area of mathematics/physics! | References I&#39;m finding to be helpful . The following video by &quot;sudgylacmoe&quot; using the &quot;manim&quot; presentation style developed by 3blue1brown. Watch this! | . &quot;Clifford Algebra: A visual introduction&quot;, blog post by &quot;slehar&quot; | This very handy list of properties | This book!: | These slides by Joan Lasenby (Signal Processing Group, Trinity College, Cambridge) | John Denker&#39;s write-up | Another video: historical perspective: &quot;The Vector Algebra War&quot; (Oh, and there&#39;s a paper to go with it): | . Other resources I have yet to read . From &quot;the man&quot; himself: David Hestenes&#39;s Oersted Lecture | PyTorch Quaternion Neural Networks | &quot;Embed Me If You Can: A Geometric Perceptron&quot; | This book chapter: &quot;Outlook for Clifford Algebra Based Feature and Deep Learning AI Architectures&quot; | Something Twitter-y? | ....your suggestions? | . Summary of My Thoughts So Far . Why didn&#39;t anybody teach me this stuff before??? It makes so many things in physics make more sense. | Cross products are...how to say it?...&quot;dumb&quot;. Pseudovectors are dumb -- they are bivectors -- but bivectors are &quot;cool&quot;. (I&#39;ll leave those adjectives to stand for now, and develop them later.) | Cross products are neither necessary for introductory physics instruction nor easier than outer/exterior/wedge products. In 3D, the two are isomorphic, so why not teach the one that&#39;s actually more useful? When we encounter cross products in physics it is always the (directed) area aspect that&#39;s relevant, not the pseudovector aspect (see #2 above). | There&#39;s nothing inherently &quot;quantum mechanical&quot; about Pauli matrices &amp; Dirac spinors, or quaternions. Rather they are just manifestations of the geometry of 3D space! Futhermore, the fact that Pauli matrics are typically taught in such a unmotivated,/&quot;here memorize these&quot; kind of way is anathema, whereas with the GA approach they arise naturally. | Bivectors can be represented by square, antisymmetric matrices. | The relation between complex numbers and GA in 2D is cool but I&#39;m finding it a bit confusing, especially given that you can write complex numbers in ways that commute but the GA versions typically don&#39;t (or anti-)commute. | Also confusing in 2D is that &quot;$I$&quot; is not the identity operator, rather it is a pseudoscalar/bivector that&#39;s akin to &quot;$i$&quot; (see point #6 above). | Re. (anti-)commutivity: many expressions one sees are written in terms of orthonormal vectors, and thus it&#39;s not always clear when these statements apply to general vectors/bivectors/etc. When in doubt, the thing to do is (presumably) to write out each product in terms of its &quot;compnent&quot; dot-product and wedge-product parts. | In E&amp;M, GA gives you the relativistic Faraday tensor without even any relavity! Again it&#39;s just a manifestation of geometry. | Probably best to stop reading here for now. . Everything from here down is, so far, just me screwing around with the clifford Python package in a free-from manner. I seriously doubt it will be helpful to anyone else in its present form. i.e., you probably want to stop reading here. -S.H. . . Messing with clifford package . This notebook is ripped out of the clifford documentation: https://clifford.readthedocs.io/. and then extended. This notebook gives a terse introduction to using the clifford module, using a two-dimensional geometric algebra as the context. . Setup . First, import clifford and instantiate a two-dimensional algebra (G2), . %pip install clifford -q --use-feature=2020-resolver . WARNING: You are using pip version 20.2.3; however, version 21.3 is available. You should consider upgrading via the &#39;/Users/shawley/envs/fastai/bin/python3 -m pip install --upgrade pip&#39; command. Note: you may need to restart the kernel to use updated packages. . import clifford as cf layout, blades = cf.Cl(2) # creates a 2-dimensional clifford algebra . Inspect blades. . blades . {&#39;&#39;: 1, &#39;e1&#39;: (1^e1), &#39;e2&#39;: (1^e2), &#39;e12&#39;: (1^e12)} . Assign blades to variables . e1 = blades[&#39;e1&#39;] e2 = blades[&#39;e2&#39;] e12 = blades[&#39;e12&#39;] . Basics . e1*e2 # geometric product . OMP: Info #270: omp_set_nested routine deprecated, please use omp_set_max_active_levels instead. . (1^e12) . e1|e2 # inner product . 0 . e1^e2 # outer product . (1^e12) . Reflection . a = e1+e2 # the vector n = e1 # the reflector -n*a*n.inv() # reflect `a` in hyperplane normal to `n` . -(1.0^e1) + (1.0^e2) . Rotation . from math import e, pi R = e**(pi/4*e12) # enacts rotation by pi/2 R . 0.70711 + (0.70711^e12) . R*e1*~R # rotate e1 by pi/2 in the e12-plane . -(1.0^e2) . import math . a_ = 2*e1 + e2 b_ = 0.7*(e1 + 2*e2) . Define non-orthogonal unit vectors a and b: . def unit(v): return v / math.sqrt(v*v) a = unit(a_) b = unit(b_) . a, b . ((0.89443^e1) + (0.44721^e2), (0.44721^e1) + (0.89443^e2)) . b*a*b . -(0.17889^e1) + (0.98387^e2) . a*b*a . (0.98387^e1) - (0.17889^e2) . ... so aba is bab rotated by 90 degrees. . Here are two different versions of b: . b*a*a . (0.44721^e1) + (0.89443^e2) . a*a*b . (0.44721^e1) + (0.89443^e2) . ....Note that in 2D, &quot;trivectors&quot; (e.g., $baa$ or $abb$ or $aab$) don&#39;t exist as trivectors. A vector times a bivector is a vector (in 2D). . Checking associativity: . (b*a)*b . -(0.17889^e1) + (0.98387^e2) . b*(a*b) . -(0.17889^e1) + (0.98387^e2) . And if we reverse the order we pick up a term of 2a^b: . ((a*b)-2*(a^b))*b . -(0.17889^e1) + (0.98387^e2) . Are wedge and geometric product associative? . (a^b)*b . (0.53666^e1) - (0.26833^e2) . a^(b*b) . (0.89443^e1) + (0.44721^e2) . ....seems that they are not. What then is the proper order of operations? Left to right or does vector product take precedence? . a*b . 0.8 + (0.6^e12) . b*a . 0.8 - (0.6^e12) . (a|b) - (a^b) . 0.8 - (0.6^e12) . (a*b) - 2*(a^b) . 0.8 - (0.6^e12) . c = (b*a)*b; c # c = bab . -(0.17889^e1) + (0.98387^e2) . c - b*a*b . 0 . d = (-a*b)*b; d # d = -abb = -a(b^2) != c = bab . -(0.89443^e1) - (0.44721^e2) . d - (-a) . 0 . e = a*b*a; e # e = aba . (0.98387^e1) - (0.17889^e2) . %pip install matplotlib -Uqq . Note: you may need to restart the kernel to use updated packages. . import matplotlib.pyplot as plt import string import numpy as np def doplot(v_list:list, labels=list(string.ascii_lowercase), loc=&#39;lower right&#39;): t = np.linspace(0,2*np.pi,num=100) circle_x, circle_y = np.cos(t), np.sin(t) # show the unit circle for reference. plt.plot(circle_x, circle_y) for i,v in enumerate(v_list): x, y = e1|v, e2|v plt.plot((0,x),(0,y),&#39;o-&#39;,label=labels[i]) #plt.axis([-1, 1, -1, 1]) plt.gca().set_aspect(&#39;equal&#39;) plt.legend(loc=loc) doplot([a,b,c,d,e]) . Note that $ba$ performs a rotation by the angle amount from $a$ to $b$, then applied to whatever comes after. so $baf$ takes $f$ and rotates by the angle you subtend when you go from $a$ to $b$ . f = unit(-.7*e1 + e2) # just some other vector doplot([a,b,f,b*a*f], labels=[&#39;a&#39;,&#39;b&#39;,&#39;f&#39;,&#39;b*a*f&#39;]) . And (at least for unit vectors) this is the same as hitting the $f$ on the other side, and reversing the order of $a$ and $b$: . Permuting all three indices gives you the same result: . f*a*b - b*a*f . 0 . similarly: . d*c*a - a*c*d . 0 . Switching the order of the last one compared to a wedge (without permuting the wedge) gives you a minus sign: . (a^b)*f . (0.49154^e1) + (0.34408^e2) . f*(a^b) . -(0.49154^e1) - (0.34408^e2) . e1*(a^b) . (0.6^e2) . (a^b)*e1 . -(0.6^e2) . e1^e2 . (1^e12) . a^b . (0.6^e12) . a|b . 0.8 . a,b . ((0.89443^e1) + (0.44721^e2), (0.44721^e1) + (0.89443^e2)) . e1^e1 . 0 . (a|e1)*(b|e2) - (a|e2)*(b|e1) . 0.6 . Proving why f*e12 = - e12*f: . f*e12 . -(0.81923^e1) - (0.57346^e2) . e12*f . (0.81923^e1) + (0.57346^e2) . f*e12 - (- e12*f) . 0 . f . -(0.57346^e1) + (0.81923^e2) . e1*e12 . (1^e2) . e12*e1 . -(1^e2) . f*e1 . -0.57346 - (0.81923^e12) . = f1 + (f2 e2^e1) = f1 - f2 e1^e2 = $f_1 - f_2 e_{12}$ $~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$[1] . e2*f . 0.81923 + (0.57346^e12) . = f2 + e2^f1e1 = f2 -f1 e1^e2 = $f_2 - f_1 e_{12}$ $~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$[2] . e1*(e2*f) . (0.81923^e1) + (0.57346^e2) . = e1([2]) = e1 f2 e1(-f1e12) = $f_2 e_1 - f_1 e_2$ $~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$[3] . (f*e1)*e2 . -(0.81923^e1) - (0.57346^e2) . = [1] e2 = ( f1 - f2 e12 ) fe2 = $-f_2 e_1 + f_1 e_2 $ $~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$[4] = - [3] . $ therefore$ f e1 e2 = - e1 e2 f . Let&#39;s try a different set of random (2-)vectors. We could make these unit vectors but that would obscure some the generatlity I want to see. So far I&#39;ve learned what thought were rules for clifs that only turn out to work for unit vectors, or orthogonal vectors,... Let&#39;s see what&#39;s general: . def rndvec(): return (2*np.random.rand()-1)*e1 + (2*np.random.rand()-1)*e2 u, v, w = [rndvec() for x in range(3)]; u, v, w . (-(0.01392^e1) + (0.78267^e2), -(0.36273^e1) - (0.92155^e2), -(0.9844^e1) - (0.46098^e2)) . doplot([u,v,w,u*v*w,v*u*w,w*u*v,u*(v^w),(u*v)^w], labels=[&#39;u&#39;,&#39;v&#39;,&#39;w&#39;,&#39;u*v*w&#39;,&#39;v*u*w&#39;,&#39;w*u*v&#39;,&#39;u*(v^w)&#39;,&#39;(u*v)^w&#39;],loc=&#39;upper left&#39;) . In the above, vuw (brown) and wuv (pink) are on top of each other, i.e. swapping the first and third vectors produces no change: . v*u*w - w*u*v . 0 . Kinds of products, AKA WTH is a Kronecker product? . The paper uses &quot;Kronecker Product&quot;. Which...I didn&#39;t know what that is. I see from the internet that it&#39;s likened to the &quot;tensor product&quot;... (&quot;The Kronecker product is a special case of the tensor product.&quot;) ...which is like the &quot;outer product&quot;. But noteworthy, this is different from &quot;exterior product&quot; (even though &quot;outer&quot; and &quot;exterior&quot; should mean the same thing, they don&#39;t) because math history. But the latter is the same as the wedge product. ...Yes? . ...And all these are of course different from the dot product which is the same as &quot;matrix multiplication&quot; which is the same as the &quot;@&quot; symbol. . Define a couple matrices . A = np.array([[1,2,3],[4,5,6]]); A . array([[1, 2, 3], [4, 5, 6]]) . B = np.array([[-0.1,.2,.3],[.4,-.5,.6]]); B . array([[-0.1, 0.2, 0.3], [ 0.4, -0.5, 0.6]]) . Equivalince of &quot;@&quot;, dot product and matmul . A.T @ B . array([[ 1.5, -1.8, 2.7], [ 1.8, -2.1, 3.6], [ 2.1, -2.4, 4.5]]) . np.dot(A.T,B) . array([[ 1.5, -1.8, 2.7], [ 1.8, -2.1, 3.6], [ 2.1, -2.4, 4.5]]) . np.matmul(A.T,B) . array([[ 1.5, -1.8, 2.7], [ 1.8, -2.1, 3.6], [ 2.1, -2.4, 4.5]]) . B.T @ A . array([[ 1.5, 1.8, 2.1], [-1.8, -2.1, -2.4], [ 2.7, 3.6, 4.5]]) . Outer products . print(np.outer(A,B)) np.outer(A,B).shape . [[-0.1 0.2 0.3 0.4 -0.5 0.6] [-0.2 0.4 0.6 0.8 -1. 1.2] [-0.3 0.6 0.9 1.2 -1.5 1.8] [-0.4 0.8 1.2 1.6 -2. 2.4] [-0.5 1. 1.5 2. -2.5 3. ] [-0.6 1.2 1.8 2.4 -3. 3.6]] . (6, 6) . print(np.outer(B,A)) np.outer(B,A).shape . [[-0.1 -0.2 -0.3 -0.4 -0.5 -0.6] [ 0.2 0.4 0.6 0.8 1. 1.2] [ 0.3 0.6 0.9 1.2 1.5 1.8] [ 0.4 0.8 1.2 1.6 2. 2.4] [-0.5 -1. -1.5 -2. -2.5 -3. ] [ 0.6 1.2 1.8 2.4 3. 3.6]] . (6, 6) . np.abs(np.outer(B,A) - np.outer(A,B).T).flatten().sum() . 0.0 . Kronecker product . ...is np.kron(): . print(np.kron(A,B)) np.shape(np.kron(A,B)) . [[-0.1 0.2 0.3 -0.2 0.4 0.6 -0.3 0.6 0.9] [ 0.4 -0.5 0.6 0.8 -1. 1.2 1.2 -1.5 1.8] [-0.4 0.8 1.2 -0.5 1. 1.5 -0.6 1.2 1.8] [ 1.6 -2. 2.4 2. -2.5 3. 2.4 -3. 3.6]] . (4, 9) . ...ok that is NOT the same as the .outer product! Same number of elements though. . Literature says Kronecker product AB is a &quot;block&quot; matrix where each component of A gets multiplied by B. This makes sense. It&#39;s a a 2x3 matrix times another 2x3 matrix. I&#39;d view that as 2x3x2x3 but numpy makes it a (2*2)x(3*3). ...odd. ?? . Does anything (anti-)commute in the Kronecker product? Let&#39;s try BA: . print(np.kron(B,A)) np.shape(np.kron(B,A)) . [[-0.1 -0.2 -0.3 0.2 0.4 0.6 0.3 0.6 0.9] [-0.4 -0.5 -0.6 0.8 1. 1.2 1.2 1.5 1.8] [ 0.4 0.8 1.2 -0.5 -1. -1.5 0.6 1.2 1.8] [ 1.6 2. 2.4 -2. -2.5 -3. 2.4 3. 3.6]] . (4, 9) . ...ok looks like some things change sign and some things don&#39;t, but the values don&#39;t seem to move around. Hmmm.. . np.set_printoptions(precision=2, suppress=True) print(np.kron(A,B) - np.kron(B,A),) . [[ 0. 0.4 0.6 -0.4 0. -0. -0.6 0. 0. ] [ 0.8 0. 1.2 0. -2. -0. 0. -3. 0. ] [-0.8 0. -0. 0. 2. 3. -1.2 0. 0. ] [ 0. -4. -0. 4. 0. 6. 0. -6. 0. ]] . ...yea I don&#39;t understand that. . Maybe instead of matrices we should step down to vectors. Define a pair of random vectors. (We&#39;ll use 3 dimensions instead of 2 dims of the Clifford algebra.) . x = np.random.rand(3); x . array([0.68, 0. , 0.43]) . y = np.random.rand(3); y . array([0.93, 0.39, 0.86]) . np.outer(x,y) . array([[0.63, 0.27, 0.59], [0. , 0. , 0. ], [0.4 , 0.17, 0.37]]) . np.outer(y,x) . array([[0.63, 0. , 0.4 ], [0.27, 0. , 0.17], [0.59, 0. , 0.37]]) . Let&#39;s make an antisymmetric matrix... . (np.outer(x,y) - np.outer(y,x))/2 . array([[ 0. , 0.13, 0.09], [-0.13, 0. , -0.08], [-0.09, 0.08, 0. ]]) . np.kron(x,y) . array([0.63, 0.27, 0.59, 0. , 0. , 0. , 0.4 , 0.17, 0.37]) . ...that&#39;s just weird, man. ;-) . np.kron(y,x) . array([0.63, 0. , 0.4 , 0.27, 0. , 0.17, 0.59, 0. , 0.37]) . That&#39;s kind of the same as kron(x,y) but rearranged. . ...ok enough with the Kronecker product. I think I know how to do it but not sure what it means / why we can&#39;t use...any of the other many &quot;product&quot; types available. . Ok, back to wedges and clifs and whatnot. A little more vector play: . u^v^w . 0 . (u*v*w) + (v*w*u) + (w*u*v) . (0.82006^e1) + (1.26197^e2) .",
            "url": "https://drscotthawley.github.io/blog/2021/10/15/Geometric-Algebra.html",
            "relUrl": "/2021/10/15/Geometric-Algebra.html",
            "date": " • Oct 15, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Handy Bash Functions for ML & Data Science",
            "content": "Once I figure out a complicated command, I make a bash function or alias for it. Here are some that I find useful: . # set up python environment. # usage: $ makeenv &lt;env_name&gt; # Note: the pip update is b/c sometimes I&#39;ve gotten stuck with an ancient pip where nothing works! makeenv() { python3 -m venv ~/envs/&quot;$1&quot;; source ~/envs/&quot;$1&quot;/bin/activate; python3 -m pip install pip -Uqq; } # loads python environment. # usage: $ loadenv &lt;env_name&gt; loadenv() { source ~/envs/&quot;$1&quot;/bin/activate; } # same thing different name gimme() { source ~/envs/&quot;$1&quot;/bin/activate; } # downloads colab notebook. [Writes to colab.ipynb] # usage: $ grabcolab &lt;sharing_URL&gt; grabcolab() { fileid=$( echo &quot;$1&quot; | sed -E &#39;s/.*drive /(.*) ?.*/ 1/&#39; ); wget -O colab.ipynb &#39;https://docs.google.com/uc?export=download&amp;id=&#39;$fileid; } # runs a notebook on command line, as if it were a python script. # usage: $ nbrun colab.ipynb # [Note for student nbs, run this from an access-reduced account!] # On my personal page I remove the pip install but put it in to make it handy for students nbrun() { pip install -Uqq jupytext; jupytext --to py &quot;$1&quot;; mv &quot;${1%.*}&quot;.py run_this.ipy; ipython run_this.ipy;} # creates .tgz file from directory, runs in parallel # $ usage: $ partar &lt;dir_name&gt; [no / on end. requires pigz: $ sudo apt install pigz partar() { tar -I pigz -cf &quot;$1.tgz&quot; &quot;$1&quot;; } # uncompresses .tgz file into directory, runs in parallel. # usage $ paruntar &lt;.tgz file&gt; paruntar() { tar -I pigz -xf &quot;$1&quot;; } # long-list sorted by timestamp, with more-style pagination. $@ is all arguments. # usage: ltt *.ipynb llt() { ls --color=auto -p -lth --color=always &quot;$@&quot; | less -R -X --quit-if-one-screen; } # which alias is this? includes functions too. # example: $ wa partar wa() { type &quot;$1&quot;;} . …these are all in my ~/.bash_aliases file, which is invoked at the bottom of my ~/.bashrc file in the line: source ~/.bash_aliases. Note that &quot;$1&quot; just refers to the first argument of the command. . I used to use Anaconda &amp; conda but found it “bulky” and “invasive”, so now I just use python venv. . Image via VQGAN+CLIP, prompt=’computer code | bash shell scripting | data science | by james gurney | trending on artstation’ .",
            "url": "https://drscotthawley.github.io/blog/2021/09/15/Handy-Bash-Functions.html",
            "relUrl": "/2021/09/15/Handy-Bash-Functions.html",
            "date": " • Sep 15, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Typical (Neural-Network-Based) Classification vs. Zero-Shot, Part 3 - Live Demo of CL Toy",
            "content": "Earlier entries: Part 1, Part 2 . I added some more optional controls to the “contrastive loss toy model” from Part 1 that I want to demonstrate interactively, so this Part 3 post is in the form of a video: . Addenda: . (I’m new to this video-making thing and TBH not sure I want to get good at it. I realize I’m over-animated…in a way that doesn’t happen when I’m in front of a class, on stage or on TV!) . What I left out: . Various ways of getting a handle on choosing negative examples and doing so in a computationally efficient way (e.g. via Locality Sensitive Hashing). But the paper by Wu et al has a good survey of these issues – at least ca. 2017. And since then you can find newer treatments of such things as well, and I encourage you to do so – I’ll be joining you. Furthermore, if you follow the “Attract Only” methodology of SimCLR, then you wouldn’t have any negative examples anyway. ;-) | Messing around with the toy model – giving it “crazy” inputs like huge margins, whatever – is not only fun (to me) but can also be quite informative as a process of “discovery”: I’m sure I learned things in the context of experience that I might otherwise have read (and maybe missed) in a paper. | . What said that came off as maybe misleading: . I didn’t mean to imply that CLIP used the “attract-only” scheme I attribute to SimCLR. CLIP has a “contrastive loss” which means negative examples. I was just talking about how the CLIP result on ImageNet demonstrated the utility of metric-based, semi-supervised learning. | . References . Jordan, J. Personal communications. cf. Twitter Page: https://twitter.com/jeremyjordan. | Wu, C.-Y.; Manmatha, R.; Smola, A.J.; Krähenbühl, P. Sampling Matters in Deep Embedding Learning. In Proceedings of the arXiv:1706.07567 [cs]; January 16 2018. | “CLIP”: Radford, A.; Kim, J.W.; Hallacy, C.; Ramesh, A.; Goh, G.; Agarwal, S.; Sastry, G.; Askell, A.; Mishkin, P.; Clark, J.; et al. Learning Transferable Visual Models From Natural Language Supervision. ArXiv210300020 Cs 2021. | Fonseca, E.; Ortego, D.; McGuinness, K.; O’Connor, N.E.; Serra, X. Unsupervised Contrastive Learning of Sound Event Representations. In Proceedings of the 2021 IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP); IEEE, 2021. | Hadsell, R.; Chopra, S.; LeCun, Y. Dimensionality Reduction by Learning an Invariant Mapping. In Proceedings of the 2006 IEEE Computer Society Conference on Computer Vision and Pattern Recognition (CVPR’06); 2006; Vol. 2, pp. 1735–1742. | “SimCLR”: Chen, T.; Kornblith, S.; Norouzi, M.; Hinton, G. A Simple Framework for Contrastive Learning of Visual Representations. ArXiv200205709 Cs Stat 2020. | Alamar, J. “Illustrated Word2Vec”, https://jalammar.github.io/illustrated-word2vec/ | AK / akhaliq / ak92501, “Gradio Demo for VQGAN+CLIP”, HuggingFace Spaces, https://huggingface.co/spaces/akhaliq/VQGAN_CLIP |",
            "url": "https://drscotthawley.github.io/blog/2021/08/01/Live-CL-Demo.html",
            "relUrl": "/2021/08/01/Live-CL-Demo.html",
            "date": " • Aug 1, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Typical (NN-Based) Classification vs. Zero-Shot, Part 2 - An Example Using FastAI",
            "content": "(This blog post implements the concepts illustrated in my previous post, &quot;Typical (Neural-Network-Based) Classification vs. Zero-Shot, Part 1 - The Joy of 3D&quot;. Note that the &quot;3D&quot; part was because of its utility as a teaching tool for gaining intuition; realistic applications usually involve hundreds of &quot;dimensions.&quot;) . Intro . In Part 1, I described how contrastive loss-based &quot;metric learning&quot; methods are similar to and different from traditional &quot;one-hot&quot; neural network classifiers in a few ways: similar in that both types of methods can be viewed as embedding methods (not just metric learning), different in that the latter involve a fixed set of classes, whereas the former rely on a similarity measure. . Confession: I didn&#39;t fully disclose my motivation last time: I simply got sick of not knowing what &quot;contrastive losses&quot; meant in many important paper titles -- notably OpenAI&#39;s &quot;CLIP&quot; and Eduardo Fonseca et al&#39;s &quot;Unsupervised Contrastive Learning of Sound Event Representations&quot; -- and decided &quot;I need to learn this.&quot;And (as one often finds in the rapidly-advancing and fragmented world of ML) it turned out I already knew what contrastive losses and metric learning were (e.g., I took a 4-course NLP Specialization last year!), just not by those names. So hey, I might actually be qualified to teach on this after all! ;-) Ok, enough with the autobiography. . Here&#39;s an annotated outline of the sections of this post: . Traditional One-Hot Classification Demo, using 3 and 4 classes. We&#39;ll be following Jeremy Howard and Sylvain Guggers&#39;s &quot;bears&quot; example from Chapter 2 of the fastai book. But we&#39;ll focus on concepts and outcomes, saving FastAI details for Section 4 | Contrastive Loss Demo using the same data as as Section 1. | Discussion | FastAI Details, including &quot;how I learned to write my own Callback&quot; for progress-tracking and data visualization. Note that these coding details will be present earlier in the post and viewable via the &quot;Display Code&quot; buttons, but the explanations of the code won&#39;t appear until Section 4. | 1. Traditional One-Hot Classification Demo: Three (and 4) Types of Bears . We could do the &quot;cats vs. dogs vs. horses&quot; example from the previous Part 1 post, but it turns out that because we&#39;re going to do Transfer Learning using a model pre-trained on ImageNet (which already has categories for cats, dogs, and horses), it&#39;s too easy to even see anything &quot;interesting&quot; happen! I want to be able to show you &quot;dots moving around&quot; as the model trains. . Instead, we&#39;ll copy Jeremy Howard... . Aside:&quot;We&#39;ll copy Jeremy Howard&quot; is something more members the ML community could probably stand to do, or admit they&#39;re doing. . ...and do three types of bears: grizzly, brown, and teddy. ;-) And then later we&#39;ll throw in one more &quot;natural kind&quot; of bear. ;-) . Scraping for Images . Using the DuckDuckGo API, let&#39;s grab ~100 images of each kind of bear. . def scrape_for_me(dl_path, labels, search_suffix, erase_dir=True, max_n=100): if erase_dir: !rm -rf {dl_path} # clear out last time&#39;s downloads path = Path(dl_path) if not path.exists(): path.mkdir() for o in labels: # scrape images off the web search_term = (f&#39;{o} {search_suffix}&#39;).strip() dest = (path/o) dest.mkdir(exist_ok=True) urls = search_images_ddg(f&#39;{search_term}&#39;, max_n=max_n) urls = [ x for x in urls if (&quot;magpies&quot; not in x) and (&quot;charliebears&quot; not in x) ] # kludge for now to keep download_images from hanging print(f&quot;{search_term}: Got {len(urls)} image URLs. Downloading...&quot;) print(&quot; urls = &quot;,urls) download_images(dest, urls=urls, preserve_filename=False) print(&quot; Images downloaded.&quot;) fns = get_image_files(path) # list image filenames failed = verify_images(fns) # check if any are unloadable # remove what&#39;s unloadable failed.map(Path.unlink); if failed != []: _ = [fns.remove(f) for f in failed] # Extra: To avoid Transparency warnings, convert PNG images to RGBA, from https://forums.fast.ai/t/errors-when-training-the-bear-image-classification-model/83422/9 converted = L() for image in fns: if &#39;.png&#39; in str(image): im = Image.open(image) converted.append(image) # old file name before resaving im.convert(&quot;RGBA&quot;).save(f&quot;{image}2.png&quot;) converted.map(Path.unlink); # delete originals print(f&quot;After checking images for issues, {len(get_image_files(path))} (total) images remain.&quot;) return path # and return a pathlib object pointing to image dir . . dl_path = &#39;scraped_images&#39; # where we&#39;re saving to labels = &#39;grizzly&#39;,&#39;black&#39;,&#39;teddy&#39; search_suffix = &#39;bear&#39; path = scrape_for_me(dl_path, labels, search_suffix, max_n=100) . grizzly bear: Got 100 image URLs. Downloading... urls = [&#39;https://i0.wp.com/www.commonsenseevaluation.com/wp-content/uploads/2013/08/Bear.jpg&#39;, &#39;https://www.conservationnw.org/wp-content/uploads/2017/06/Grizzly-bear-family-Copyright-iStock.com_PhotosbyAndy-4.2015-e1507229404830.jpg&#39;, &#39;https://images.fineartamerica.com/images-medium-large/grizzly-bear-portrait-jim-guy.jpg&#39;, &#39;https://www.mtpr.org/sites/kufm/files/styles/x_large/public/201809/grizzly-bear-02_Istock.jpg&#39;, &#39;https://a57.foxnews.com/a57.foxnews.com/static.foxnews.com/foxnews.com/content/uploads/2018/09/640/320/1862/1048/Grizzly-iStock.jpg?ve=1&amp;tl=1?ve=1&amp;tl=1&#39;, &#39;https://wallsdesk.com/wp-content/uploads/2017/01/Grizzly-Bear-Desktop-Wallpaper-.jpg&#39;, &#39;https://www.mtpr.org/sites/kufm/files/styles/x_large/public/201812/Grizzly-bear-family_LuCaAr-iStock.jpg&#39;, &#39;https://www.unilad.co.uk/wp-content/uploads/2020/02/close-up-photography-of-grizzly-bear-1068554.jpg&#39;, &#39;https://reidparkzoo.org/wp-content/uploads/2013/09/grzbear2812a.jpg&#39;, &#39;https://outsider.com/wp-content/uploads/2020/06/Grizzly-Bear-3.png&#39;, &#39;https://www.livewaterjacksonhole.com/wp-content/uploads/2020/06/Grizzly-399-Grand-Teton-National-Park.jpg&#39;, &#39;https://i0.wp.com/rangerrick.org/wp-content/uploads/2018/04/RRMAR13_6-11Grizzlies.jpg?fit=1156%2C650&amp;ssl=1&#39;, &#39;https://www.vmcdn.ca/f/files/rmotoday/images/grizzly122_kalra.jpg;w=960&#39;, &#39;https://www.gannett-cdn.com/presto/2020/07/21/PGRF/83612915-6ab2-4f0d-aeca-7088f219ecec-AP20191697142470.jpg?crop=2999,1687,x0,y0&amp;width=2999&amp;height=1687&amp;format=pjpg&amp;auto=webp&#39;, &#39;https://www.tsln.com/wp-content/uploads/2018/10/bears-tsln-101318-3-1240x826.jpg&#39;, &#39;https://cdn.rbth.com/980x-/all/2016/10/07/grizzly_gettyimages-10188130_b.jpg&#39;, &#39;http://mediad.publicbroadcasting.net/p/kufm/files/styles/x_large/public/201603/grizzly-bear_Nathan-Rupert-CC-BY-NC-ND_0.jpg&#39;, &#39;http://www.akronzoo.org/Data/Sites/1/media/GalleryImages/105/WebImages/grizzly-bear-hero-1.jpg&#39;, &#39;http://wallup.net/wp-content/uploads/2016/01/139369-bears-nature-animals-river-baby_animals-Grizzly_Bears-Grizzly_bear.jpg&#39;, &#39;https://1.bp.blogspot.com/-l-Y6zD_KF6o/UQN3jPgigAI/AAAAAAAAFcU/HOKJWQmNjo4/s1600/Grizzly+Bear-2013-0pic-05.jpg&#39;, &#39;https://www.conservationnw.org/wp-content/uploads/2017/10/grizzly-bears-1280x950.jpg&#39;, &#39;https://s1.it.atcdn.net/wp-content/uploads/2013/07/Grizzly-bear.jpg&#39;, &#39;https://gohunt-assets-us-west-2.s3.amazonaws.com/wyoming-grizzly-bear-og_0.jpg&#39;, &#39;https://www.wildernesscommittee.org/sites/default/files/2018-05/grizzly_bear.jpg&#39;, &#39;http://www.wyofile.com/wp-content/uploads/2017/11/grizzly-pic-e1509641980482.jpg&#39;, &#39;http://averageoutdoorsman.com/wp-content/uploads/2013/02/grizzly-bear.jpg&#39;, &#39;https://www.publicdomainpictures.net/pictures/90000/velka/grizzly-bear-portrait.jpg&#39;, &#39;https://www.vancouverobserver.com/sites/vancouverobserver.com/files/images/article/body/grouse-grizzly_n3d3306-web.jpg&#39;, &#39;https://www.columbiatribune.com/storyimage/MO/20171003/NEWS/171009653/AR/0/AR-171009653.jpg&#39;, &#39;https://images.wallpapersden.com/image/download/bear-grizzly-bear-eyes_amhrZ5SZmpqtpaSklGZuZ2WtZmVtZQ.jpg&#39;, &#39;https://devdenverzoo.com/wp-content/uploads/2018/09/Grizzly-Bear_05.jpg&#39;, &#39;https://www.conservationnw.org/wp-content/uploads/2020/03/JSW_6993-scaled.jpg&#39;, &#39;https://outsider.com/wp-content/uploads/2020/07/Grizzly-Bear.png&#39;, &#39;https://2.bp.blogspot.com/-p-QKKk3T8O0/UQN3a5YSALI/AAAAAAAAFcE/iTlNg3jee9A/s1600/Grizzly+Bear-2013-0pic-03.jpg&#39;, &#39;https://wildlifeimages.org/wp-content/uploads/2016/09/DSC1704.jpg&#39;, &#39;https://img.theculturetrip.com/1440x807/wp-content/uploads/2018/01/carnivore-nature-wild-alaska-wildlife-grizzly-bear-861962.jpg&#39;, &#39;https://blog.humanesociety.org/wp-content/uploads/2020/07/grizzly-bear-iStock-647126690_369827.jpg&#39;, &#39;https://wallsdesk.com/wp-content/uploads/2017/01/Grizzly-Bear-for-desktop-background.jpg&#39;, &#39;https://gephardtdaily.com/wp-content/uploads/2015/08/11754872_1109393535742666_5103459483633495575_o.jpg&#39;, &#39;http://www.outdoorhub.com/wp-content/uploads/sites/2/2015/08/outdoorhub-yellowstone-grizzly-bear-kills-hiker-in-apparent-predatory-attack-2015-08-12_15-18-35.jpg&#39;, &#39;https://www.rmef.org/wp-content/uploads/2020/05/wyoming-grizzly-bear.jpg&#39;, &#39;http://calgaryguardian.com/wp-content/uploads/2017/05/142_1289.jpg&#39;, &#39;http://www.publicdomainpictures.net/pictures/90000/velka/grizzly-bear-profile.jpg&#39;, &#39;https://wallpapertag.com/wallpaper/full/e/b/8/437151-grizzly-bear-backgrounds-2560x1600-for-tablet.jpg&#39;, &#39;https://external-preview.redd.it/bccjV-0WX40IgFdJ1FOy7_IE9nLPXR0wloCap7hXTSA.jpg?auto=webp&amp;s=a17fd3832e57032a5b44af94010a189e4e906ea6&#39;, &#39;https://outsider.com/wp-content/uploads/2020/08/grizzly-bear-hiker-glacier-national-park-video.png&#39;, &#39;https://i.cbc.ca/1.4174820.1506608673!/fileImage/httpImage/image.jpg_gen/derivatives/16x9_1180/grizzly-glares-at-viewer.jpg&#39;, &#39;https://wallsdesk.com/wp-content/uploads/2017/01/Grizzly-Bear-Wallpapers-HD.jpg&#39;, &#39;https://cdn.britannica.com/19/186719-050-887A6F2C/Grizzly-bear-Rocky-Mountains-Wyoming.jpg&#39;, &#39;http://www.pbs.org/wnet/nature/files/2018/07/Bear133.jpg&#39;, &#39;http://1.bp.blogspot.com/-CoOIzMhLQUI/UHzVx6IxyVI/AAAAAAAAA-c/RHMhnAXXniU/s1600/Grizzly+Bear+Sleepy.jpg&#39;, &#39;http://www.photos-public-domain.com/wp-content/uploads/2012/03/grizzly-bear.jpg&#39;, &#39;http://img.huffingtonpost.com/asset/1910_1000/58c0a5fe1d000027007cd5c0.jpg&#39;, &#39;http://blog.theclymb.com/wp-content/uploads/2014/09/angry-grizzly-bear.jpg&#39;, &#39;https://wallsdesk.com/wp-content/uploads/2017/01/Grizzly-Bear-Background-.jpg&#39;, &#39;https://devdenverzoo.com/wp-content/uploads/2018/09/Grizzly-Bear_04.jpg&#39;, &#39;http://www.montanaoutdoor.com/wp-content/uploads/2018/02/Grizzly-King-FEAT.jpg&#39;, &#39;http://www.wallpapergeeks.com/wp-content/uploads/2014/03/Grizzly-Bear-Near-McNeil-River-Alaska.jpg&#39;, &#39;https://cottagelife.com/wp-content/uploads/2020/07/shutterstock_546562111.jpg&#39;, &#39;https://redtri.com/wp-content/uploads/2014/07/grizzly-bear-2.jpg&#39;, &#39;https://images.fineartamerica.com/images/artworkimages/mediumlarge/1/grizzly-bear-twenty-two-north-photography.jpg&#39;, &#39;http://www.marketwire.com/library/MwGo/2017/3/7/11G132324/Images/3_Bears_Approach_by_Jim_Lawrence-4f4d16b51311853286570ff0d3022a81.jpg&#39;, &#39;https://s3-assets.eastidahonews.com/wp-content/uploads/2015/10/03030033/0ad8593723.jpg&#39;, &#39;https://www.alloutdoor.com/wp-content/uploads/2019/08/Grizzly_Bear_Ursus_arctos_ssp..jpg&#39;, &#39;http://www.cs.columbia.edu/~sedwards/photos/kyle200604/20060412-7108%20Grizzly%20bear.jpg&#39;, &#39;http://2.bp.blogspot.com/-NjMTuklENdE/UHzVv_8dIxI/AAAAAAAAA-U/tNBsQDn8kFI/s1600/Grizzly+Bear+Pic.jpg&#39;, &#39;https://live.staticflickr.com/8078/8277276763_b4d8cff511_b.jpg&#39;, &#39;http://images.fineartamerica.com/images-medium-large/1-grizzly-bear-yukon-robert-postma.jpg&#39;, &#39;http://bloximages.newyork1.vip.townnews.com/stltoday.com/content/tncms/assets/v3/editorial/b/99/b99156d5-0ad8-5b5c-a98a-d805c9a5d6bb/57eaaca236063.image.jpg?resize=1200%2C1369&#39;, &#39;https://media.salon.com/2014/03/Grizzly-Bear.jpg&#39;, &#39;https://d3d0lqu00lnqvz.cloudfront.net/media/media/897b2e5d-6d4c-40fa-bbe8-6829455747e2.jpg&#39;, &#39;https://www.naturalworldsafaris.com/~/media/images/blogs/2018/01/grizzly-bear-hunting-ban/mmr_2015-08-06_7055.jpg&#39;, &#39;https://www.readersdigest.ca/wp-content/uploads/2018/09/grizzly-bear-cub.jpg&#39;, &#39;http://2.bp.blogspot.com/-9JAlJayP2XU/UQN3Wffpa8I/AAAAAAAAFbs/eMP5BcuLetc/w1200-h630-p-k-nu/Grizzly+Bear-2013-0pic-02.jpg&#39;, &#39;https://townsquare.media/site/99/files/2018/12/Bear.jpg?w=1200&amp;h=0&amp;zc=1&amp;s=0&amp;a=t&amp;q=89&#39;, &#39;https://s3.amazonaws.com/images.gearjunkie.com/uploads/2015/07/Grizzly-Bear.jpg&#39;, &#39;https://wildlifefriendly.org/wp-content/uploads/2015/09/Grizzly.jpg&#39;, &#39;https://www.thefencepost.com/wp-content/uploads/sites/12/2018/08/grizzlies-tsln-081118-1240x828.jpg&#39;, &#39;https://wallsdesk.com/wp-content/uploads/2017/01/Grizzly-Bear-Download.jpg&#39;, &#39;http://4.bp.blogspot.com/-QmwOWiR3ydM/USOj4DBjZSI/AAAAAAAAFBM/bvX4-MmH-tY/s1600/Grizzly_Bear_Info_Images+08.jpg&#39;, &#39;https://www.huntingillustrated.com/wp-content/uploads/2014/03/Depositphotos_93855856_xl-2015-1-scaled.jpg&#39;, &#39;http://media1.s-nbcnews.com/j/newscms/2017_07/1905761/170217-grizzly-alaska-mn-1130_e938eae58cdfe33a8c5bd9af07356dd9.nbcnews-ux-2880-1000.jpg&#39;, &#39;https://s1.ibtimes.com/sites/www.ibtimes.com/files/styles/embed/public/2017/11/20/grizzly-bear.jpg&#39;, &#39;http://mediad.publicbroadcasting.net/p/kufm/files/styles/x_large/public/201606/grizzly_PD.jpg&#39;, &#39;https://i1.wp.com/backcountryjourneys.com/wp-content/uploads/2015/12/bigstock-Grizzly-Bear-9532331.jpg&#39;, &#39;https://detroitzoo.org/wp-content/uploads/2015/08/Grizzly-Boys.jpg&#39;, &#39;https://cdn0.wideopenspaces.com/wp-content/uploads/2020/04/whatdogrizzlybearseat4-scaled.jpg&#39;, &#39;https://s3-assets.eastidahonews.com/wp-content/uploads/2019/05/06175149/grizzly-bear-860x571.jpg&#39;, &#39;https://upload.wikimedia.org/wikipedia/commons/thumb/a/a9/GrizzlyBearJeanBeaufort.jpg/1200px-GrizzlyBearJeanBeaufort.jpg&#39;, &#39;https://i2.wp.com/nypost.com/wp-content/uploads/sites/2/2020/09/grizzly-bear-89.jpg?quality=90&amp;strip=all&amp;ssl=1&#39;, &#39;https://davidsuzuki.org/wp-content/uploads/2017/04/grizzly-bears-alaska-wildlife-sanctuary-whittier.jpg&#39;, &#39;https://www.campbellriver.travel/media/2020/02/bear-ears1.jpg&#39;, &#39;http://static.independent.co.uk/s3fs-public/thumbnails/image/2016/06/30/08/yellowstone-grizzly-bear-.jpg&#39;, &#39;https://www.vmcdn.ca/f/files/via/import/2018/07/08143100_grizzly-bear.jpg;w=960&#39;, &#39;https://wyo4news.com/wp-content/uploads/2020/07/grizzly-bear.jpg&#39;, &#39;https://bozone.com/site/wp-content/uploads/2019/03/GRIZZLY.jpeg&#39;, &#39;http://www.news1130.com/wp-content/blogs.dir/sites/9/2015/09/17/iStock_000010656016_Double-e1442507974878.jpg&#39;, &#39;https://tetonvalleylodge.com/wp-content/uploads/2015/04/grizzly-bear-idaho.jpg&#39;, &#39;https://gohunt-assets-us-west-2.s3.amazonaws.com/Grizzly-bear-protections-west-OG.jpg&#39;, &#39;https://www.the-sun.com/wp-content/uploads/sites/6/2020/09/NINTCHDBPICT000512282491.jpg?strip=all&amp;quality=100&amp;w=1200&amp;h=800&amp;crop=1&#39;] Images downloaded. black bear: Got 100 image URLs. Downloading... urls = [&#39;https://scx2.b-cdn.net/gfx/news/hires/2019/blackbear.jpg&#39;, &#39;https://www.seacoastonline.com/storyimage/SO/20190730/NEWS/190739992/AR/0/AR-190739992.jpg&#39;, &#39;https://wallup.net/wp-content/uploads/2019/09/719345-baribal-black-bear-bear-muzzle-eyes-predator.jpg&#39;, &#39;http://www.stgeorgeutah.com/wp-content/uploads/2015/11/lynn_11-22-2011_black_bear_1.jpg&#39;, &#39;http://bearsmartdurango.org/wp-content/uploads/2013/06/100_0642.jpg&#39;, &#39;http://naturalbridgezoo.com/wp-content/uploads/2017/05/BB1-1.jpg&#39;, &#39;http://grizzlybearwatching.com/wp-content/uploads/2017/03/BlackBear1-1500x998.jpg&#39;, &#39;http://cdn-image.travelandleisure.com/sites/default/files/styles/1600x1000/public/1522685410/black-bear-BEAR418.jpg?itok=qmoXuFRx&#39;, &#39;http://infotel.ca/news/medialibrary/image/orig-mediaitemid22167-3862.jpg&#39;, &#39;https://www.vpr.org/sites/vpr/files/styles/x_large/public/202007/black-bear-fish-wildlife-dept-Tom-Rogers-2013.png&#39;, &#39;http://www.mountaincountrycabinrentals.com/wp-content/uploads/2014/10/Closeup-of-a-black-bear.jpg&#39;, &#39;https://www.gulflive.com/resizer/XxMMGfEvOQQAVOEKfieknpQOIv8=/1280x0/smart/advancelocal-adapter-image-uploads.s3.amazonaws.com/image.gulflive.com/home/gulf-media/width2048/img/news_impact/photo/bears-threatened-fbdfb579fa67c166.jpg&#39;, &#39;https://wildlife.utah.gov/news_photos/11-18-19_black-bear-in-grass.jpg&#39;, &#39;https://www.piecebypiece.ca/wp-content/uploads/2018/05/165-Black-Bear-Cub.jpg&#39;, &#39;https://www.greatswamp.org/wp-content/uploads/2016/01/black-bear.jpg&#39;, &#39;https://beartrackoutfitters.com/wp-content/uploads/2018/09/bear.jpg&#39;, &#39;http://justfunfacts.com/wp-content/uploads/2017/02/american-black-bear-smell.jpg&#39;, &#39;http://snowbrains.com/wp-content/uploads/2015/08/American-Black-Bear-jpg.jpg&#39;, &#39;https://media-cdn.wehco.com/img/photos/2020/12/11/blackbearnoppers06cmykoriginal1483610356_t1070_h5b279ad6a60bb8d6261090d0367921ea9d3e0cc8.jpg&#39;, &#39;https://www.gannett-cdn.com/-mm-/ba9293e2ff57f90c5ea896bbb7fb36126f38dbc9/c=0-134-3468-2093/local/-/media/2016/06/28/CNYGroup/Elmira/636027114617396897-black-bear.jpg?width=3200&amp;height=1680&amp;fit=crop&#39;, &#39;https://bearexpert.com/wp-content/uploads/2019/10/american-black-bear.jpg&#39;, &#39;https://www.gannett-cdn.com/-mm-/cd26c8713e884a8483a3eb4efd7e9b47f526e46d/c=0-264-4620-2863/local/-/media/Bridgewater/2015/01/05/B9315749966Z.1_20150105153333_000_GUS9JJHMR.1-0.jpg?width=3200&amp;height=1680&amp;fit=crop&#39;, &#39;https://texnat.tamu.edu/files/2018/07/IMG_1573.jpg&#39;, &#39;https://photos1.blogger.com/blogger/5712/2802/1600/DSC01502.jpg&#39;, &#39;https://img1-azrcdn.newser.com/image/1255962-12-20190904134100.jpeg&#39;, &#39;https://www.gravel.org/wp-content/uploads/2015/10/Black-Bear.jpg&#39;, &#39;https://www.crozetgazette.com/wp-content/uploads/2018/06/iStock-153562011.jpg&#39;, &#39;https://images.thestar.com/-S-RKsYxNaEcCX0LRaqhNeLpMAs=/1200x932/smart/filters:cb(1565190981014)/https://www.thestar.com/content/dam/thestar/vancouver/2019/08/06/child-injured-by-bear-bite-at-greater-vancouver-zoo-officials-say/blackbear.jpg&#39;, &#39;https://seniors101.ca/wp-content/uploads/2015/08/Black-bear-cub.jpg&#39;, &#39;https://www.koamnewsnow.com/content/uploads/2020/05/pixabay-black-bear.jpg&#39;, &#39;https://www.gannett-cdn.com/-mm-/40756a948d5a0edcc7ce6d0e16b133540995c9c8/c=0-138-1997-1266/local/-/media/2017/03/06/JacksonMS/JacksonMS/636243918786987260-0307bear01.jpg?width=3200&amp;height=1680&amp;fit=crop&#39;, &#39;https://img.huffingtonpost.com/asset/5d71a56a2500007a1205d0b4.jpeg?cache=i3bilfyydx&amp;ops=1778_1000&#39;, &#39;http://i.huffpost.com/gen/1105509/images/o-MARYLAND-BLACK-BEAR-facebook.jpg&#39;, &#39;http://justfunfacts.com/wp-content/uploads/2017/02/black-bear.jpg&#39;, &#39;https://blog.humanesociety.org/wp-content/uploads/2016/06/BLACK-BEAR-ISTOCK_000046186676_288801-1220x813.jpg&#39;, &#39;https://aldf.org/wp-content/uploads/2018/05/blackbear-121274561-16x9.jpg&#39;, &#39;http://blog.healthywildlife.ca/wp-content/uploads/2016/07/black-bear-hg-1-of-1.jpg&#39;, &#39;http://snowbrains.com/wp-content/uploads/2015/08/connie-lemperle-black-bear-web.jpg&#39;, &#39;https://detroit.cbslocal.com/wp-content/uploads/sites/15909782/2015/05/black-bear-forest.jpg?w=1500&#39;, &#39;https://floridablackbearscenicbyway.org/wp-content/uploads/2020/02/2411420-1920x1080-DesktopNexus.com_.jpg&#39;, &#39;https://storage.googleapis.com/afs-prod/media/media:c1a9aa6b7050465d83977305953495aa/3000.jpeg&#39;, &#39;https://canadaintherough.com/wp-content/uploads/2020/06/blackbear.jpg&#39;, &#39;https://images.dailyhive.com/20190916163711/North-Shore-Black-Bear-Society.jpg&#39;, &#39;https://s29027.pcdn.co/wp-content/uploads/2019/08/Black-Bear-mating-Tekiela-TEK1811.jpg&#39;, &#39;https://www.thehuntingpage.com/wp-content/uploads/sites/2/2014/01/o-BLACK-BEAR-facebook.jpg&#39;, &#39;https://www.transylvaniatimes.com/home/cms_data/dfault/photos/stories/id/9/1/41091/s_top&#39;, &#39;https://mediad.publicbroadcasting.net/p/wvtf/files/styles/x_large/public/201607/AP_608334627084.jpg&#39;, &#39;https://gothunts.com/wp-content/uploads/2019/06/Black-Bear-scaled.jpeg&#39;, &#39;http://2.bp.blogspot.com/-oL5wK6KYI7M/UBji1ikDXXI/AAAAAAAAAMY/jmXUpXVGet4/s1600/Black-Bear-05.jpg&#39;, &#39;http://2.bp.blogspot.com/_1N1pZVb1_C4/TUCDn6EEngI/AAAAAAAABVA/h6BmG9TLADA/s1600/Black+Bear+159087.jpg&#39;, &#39;http://someinterestingfacts.net/wp-content/uploads/2016/07/Black-bear.jpg&#39;, &#39;https://animalhype.com/wp-content/uploads/2019/12/How-Fast-Do-Black-Bears-Run-1024x682.jpg&#39;, &#39;http://uffmannatureimages.net/wp-content/uploads/2012/07/20120519-_Q2C6428Black-Bears-save-for-web-cs6.jpg&#39;, &#39;https://wildlife.org/wp-content/uploads/2015/07/Black-Bear-Reintroduction-Image-1-600.jpg&#39;, &#39;http://archery360.com/wp-content/uploads/2014/06/black-bear-cub.jpg&#39;, &#39;https://cdn.extra.ie/wp-content/uploads/2018/05/15124559/Black-bear-1.jpg&#39;, &#39;https://mediad.publicbroadcasting.net/p/wusf/files/styles/x_large/public/201504/black_bear_closeup_gary_langley.jpg&#39;, &#39;https://bearexpert.com/wp-content/uploads/2020/08/american-black-bear-6.jpg&#39;, &#39;https://upload.wikimedia.org/wikipedia/commons/thumb/b/b5/2015-08-07_Black_Bear_near_Stewart%2C_BC_1090.jpg/1280px-2015-08-07_Black_Bear_near_Stewart%2C_BC_1090.jpg&#39;, &#39;http://www.adirondackalmanack.com/wp-content/uploads/2017/05/blackbear.jpg&#39;, &#39;http://strangesounds.org/wp-content/uploads/2014/08/bear-cubs-photo.jpg&#39;, &#39;https://bear.org/wp-content/uploads/2017/10/Serious-Bear.jpg&#39;, &#39;https://thelaurelofasheville.com/wp-content/uploads/2016/06/Carolina_Nature_Photographers_Association-Black_Bear-6.jpg&#39;, &#39;https://yukon.ca/sites/yukon.ca/files/env/env-imgs/env-black-bear_0.jpg&#39;, &#39;https://media.spokesman.com/photos/2017/07/04/BLACK_BEAR.JPG.jpg&#39;, &#39;https://wallup.net/wp-content/uploads/2019/09/300546-minnesota-black-bear.jpg&#39;, &#39;https://cdn1.theweek.co.uk/sites/theweek/files/2016/10/161026_black_bear.jpg&#39;, &#39;https://bloximages.newyork1.vip.townnews.com/swnewsmedia.com/content/tncms/assets/v3/editorial/7/1a/71a9b7ca-1825-5fdd-9534-5a7c30ac10c8/5d444ec6ac2d5.image.jpg&#39;, &#39;https://www.raincoast.org/wp-content/uploads/2019/12/black-bear-diane-bb-v1.1.jpg&#39;, &#39;http://2.bp.blogspot.com/-yc7X_uO7iMM/UA7U_q5_NtI/AAAAAAAAAqI/72EaqVglzPM/s1600/black-bear.jpg&#39;, &#39;http://wyrz.org/wp-content/uploads/2016/07/black_bear.jpg&#39;, &#39;https://www.gannett-cdn.com/-mm-/98e9eb0055148d8550b3a7d264f19fd6462e6062/c=0-213-4288-2636/local/-/media/2017/03/22/CarolinaGroup/Asheville/636257813777562324-Black-bear-Getty-images.jpg?width=3200&amp;height=1680&amp;fit=crop&#39;, &#39;https://floridawildlifefederation.org/wp-content/uploads/2020/04/black-bear-scaled-e1598566846480.jpg&#39;, &#39;https://bento.cdn.pbs.org/hostedbento-prod/gallery/20170713_222850_315402black-bear-01-gettyimages-155467721.jpg.1280x720_q85.jpg&#39;, &#39;http://wallpapersdsc.net/wp-content/uploads/2017/10/Black-Bear-Background.jpg&#39;, &#39;https://www.gannett-cdn.com/-mm-/2b06f05d8e31b4112ec2ecbca6e9ef0db0cf4d0b/c=0-108-2125-1309/local/-/media/2016/05/18/Wilmington/Wilmington/635991906230694281-black-bear.jpg?width=3200&amp;height=1680&amp;fit=crop&#39;, &#39;https://www.outdoorrevival.com/wp-content/uploads/2017/04/american-black-bear.jpg&#39;, &#39;http://www.hww.ca/kaboom/images/Mammals/Black-Bear/Black-Bear-Elliott-Fotherby.jpg&#39;, &#39;https://wallpapercave.com/wp/wp3102474.jpg&#39;, &#39;https://www.simplemost.com/wp-content/uploads/2019/06/AdobeStock_122783246.jpeg&#39;, &#39;https://images.fineartamerica.com/images-medium-large-5/baby-black-bear-jack-nevitt.jpg&#39;, &#39;http://www.wildlifecenter.org/sites/default/files/patient_images/Black_Bear/DSCN6285.JPG&#39;, &#39;https://cottagelife.com/wp-content/uploads/2019/02/Cottage-Life-Black-Bear-cub.jpg&#39;, &#39;https://images.axios.com/WACso7e7dbhjup_i7iVfclq3BdI=/0x322:4288x2734/1920x1080/2018/05/22/1527002317479.jpg&#39;, &#39;https://northdakotawildlifefederation.org/wp-content/uploads/2020/02/black-bear.jpg&#39;, &#39;https://www.stgeorgeutah.com/wp-content/uploads/2017/01/blackbear.jpg&#39;, &#39;http://images.dailyhive.com/20160826144034/black-bear-e1475078273412.jpg&#39;, &#39;https://www.gannett-cdn.com/presto/2018/11/04/PGRF/7c692a2a-f1d1-4f07-8181-6bfc90c42b2c-AP18305732083625.jpg?crop=1999,1144,x0,y211&amp;width=3200&amp;height=1680&amp;fit=bounds&#39;, &#39;http://1.bp.blogspot.com/-Jc2_QqcDTz4/UBjix7v9rjI/AAAAAAAAAMA/Hr67qTiw_I4/s1600/Black-Bear-02.jpg&#39;, &#39;http://www.exploreclarion.com/wp-content/uploads/2018/11/black-bear.png&#39;, &#39;https://external-preview.redd.it/ny2anVEkjB6eTawYfAN6KcZ7TUyH69buX9Vhm56cds8.jpg?auto=webp&amp;s=500e3a52f7e797eff002fcd91f0f3cf62ff1f401&#39;, &#39;https://media.news4jax.com/photo/2015/11/06/Black-bear-blurb-jpg_308110_ver1.0_1280_720.jpg&#39;, &#39;https://globaljusticeecology.org/wp-content/uploads/black-bear-937037_1920-980x460.png&#39;, &#39;https://wildlifefriendly.org/wp-content/uploads/2015/09/Black-bear-Full.jpg&#39;, &#39;http://wiseaboutbears.org/wp-content/uploads/2014/06/bearmaleJune-222012D80_2149-copy.jpg&#39;, &#39;https://www.columbiatribune.com/storyimage/MO/20200519/NEWS/200519240/AR/0/AR-200519240.jpg&#39;, &#39;http://explorenorth.com/library/nature/images/brown_black_bear-tutshi_lake-0709.jpg&#39;, &#39;https://farm6.staticflickr.com/5588/15080045718_78c2561e6e_b.jpg&#39;, &#39;https://www.gannett-cdn.com/-mm-/a5076e7a43a0cec6129489319d0fb728e2cd1814/c=0-264-5184-3193/local/-/media/2017/06/23/PAGroup/YorkDailyRecord/636338199651309082-GettyImages-482466374.jpg?width=3200&amp;height=1680&amp;fit=crop&#39;, &#39;http://www.reportingday.com/wp-content/uploads/2018/07/Black-Bear-Cute-Pictures-1.png&#39;] Images downloaded. teddy bear: Got 100 image URLs. Downloading... urls = [&#39;https://i2-prod.birminghammail.co.uk/incoming/article17583074.ece/ALTERNATES/s1227b/0_IFP_BEM_160120bears011JPG.jpg&#39;, &#39;http://cdn.shopify.com/s/files/1/2622/2548/products/wholesale-plush-in-a-rush-14271861817446_1200x.jpg?v=1584804420&#39;, &#39;https://cdn8.bigcommerce.com/s-dee9d/images/stencil/1280x1280/products/970/6782/Life_size_72in_black_teddy_bear_Juju_Cuddles_is_Tall_dark_and_adorable__95688.1463592717.jpg?c=2&#39;, &#39;http://www.fitzulas.com/Merchant4c/graphics/00000001/2014/gund-4040161-xl.jpg&#39;, &#39;https://cdn0.rubylane.com/shops/chippewalakeantiques/863.1L.jpg&#39;, &#39;https://www.sippycupmom.com/wp-content/uploads/2017/09/NTBD-Exclusive-Bear.jpg&#39;, &#39;http://theawesomedaily.com/wp-content/uploads/2017/10/teddy-bear-images-10-2.jpg&#39;, &#39;https://hips.hearstapps.com/vader-prod.s3.amazonaws.com/1543338622-costco-giant-teddy-bear-1543338603.jpg?crop=1xw:1xh;center,top&#39;, &#39;http://cdn.shopify.com/s/files/1/2610/9472/products/BL1985_BIRKIN_TEDDY_BEAR_01_1024x1024.jpg?v=1554885535&#39;, &#39;https://d3n8a8pro7vhmx.cloudfront.net/accessalliance/pages/454/meta_images/original/Cute_but_Lonely_Teddy_Bear_Sitting_on_Grass.jpg?1591840883&#39;, &#39;https://cdn.notonthehighstreet.com/fs/34/8c/3995-961a-4318-86e4-a5ee78006bf4/original_personalised-teddy-bear-gift.jpg&#39;, &#39;https://cdn0.rubylane.com/_pod/item/1068141/0001459/1910s-Antique-Steiff-Tiny-Teddy-Bear-pic-1-2048-50-f.jpg&#39;, &#39;https://cdn0.rubylane.com/_pod/item/1494839/RL446/Large-Ideal-Antique-Teddy-Bear-full-2o-2048-14-r-ffffff-9f9b7e.jpg&#39;, &#39;https://cdn.notonthehighstreet.com/fs/7a/fe/5bda-9f46-403c-9d21-c798fa5de5ed/original_personalised-siblings-teddy-bears.jpg&#39;, &#39;https://cdn1.tedsby.com/tb/large/storage/1/3/9/139462/cute-handmade-teddy-bear-oliver.jpg&#39;, &#39;https://i5.walmartimages.com/asr/5d5541cd-d9cc-4b47-b7de-ebc107b74d82_1.9f14f307142cfd730852e875760b90bc.jpeg&#39;, &#39;https://api.time.com/wp-content/uploads/2016/12/teddy-bear.jpg&#39;, &#39;http://www.photos-public-domain.com/wp-content/uploads/2011/01/teddy-bear-wearing-mardi-gras-beads.jpg&#39;, &#39;https://pngimg.com/uploads/teddy_bear/teddy_bear_PNG14.png&#39;, &#39;https://teddy.ph/wp-content/uploads/2019/08/feature-30.jpg&#39;, &#39;https://cdn.jewishboston.com/uploads/2019/01/iStock-932242472.jpg&#39;, &#39;https://newcastlebeach.org/images/teddy-bear-with-heart-4.jpg&#39;, &#39;https://teddybears.co.uk/wp-content/uploads/2019/02/uk-2019-2736x3648.jpg&#39;, &#39;https://cdn.thewhoot.com/wp-content/uploads/2018/06/Knitted-Teddy-Bear-Patterns-1.jpg&#39;, &#39;https://www.teddybearaustralia.com.au/wp-content/uploads/2018/09/FullSizeRender-6.jpg&#39;, &#39;https://cdn8.bigcommerce.com/s-dee9d/images/stencil/1280x1280/products/883/8961/4ft_green_teddy_bear_Big_smile_and_soft_cuddly_bear__85725.1493921227.jpg?c=2&#39;, &#39;https://image.made-in-china.com/2f0j00wqhfEUTWOVbo/Factary-Price-Giant-Teddy-Bear-Big-Plush-Teddy-Bear-Soft-Toys-for-Girls.jpg&#39;, &#39;https://www.stuffedwithplushtoys.com/assets/full/u4040131.jpg&#39;, &#39;https://www.bloomsonly.com/media/catalog/product/cache/2/image/1200x1200/9df78eab33525d08d6e5fb8d27136e95/m/e/meng-meng-cute-brown-teddy-bear-head-tilt-twisting-holiday-gifts-velvet-ribbon-light-brown-bear.jpg&#39;, &#39;https://www.desicomments.com/dc3/02/215657/215657.jpg&#39;, &#39;https://www.teddybearacademy.net/wp-content/uploads/2014/08/Marco-full.jpg&#39;, &#39;https://pngimg.com/uploads/teddy_bear/teddy_bear_PNG45.png&#39;, &#39;http://images.antiquesatlas.com/dealer-stock-images/sladesantiques/Vintage_Small_9_Steiff_Mohair__as527a528z.jpg&#39;, &#39;https://www.worldofbears.com/acatalog/LG01.jpg&#39;, &#39;http://www.pavlovspuppets.com/p/teddy3.jpg&#39;, &#39;https://primopromo.com.au/assets/Uploads/Teddy-Bear+Dark-Green-v3.jpg&#39;, &#39;https://cdn0.rubylane.com/shops/700632/I-1277.1L.jpg&#39;, &#39;https://1.bp.blogspot.com/-eTFJzsbT2Pg/T3qHL_rPBMI/AAAAAAAABsA/5J8eXBe2d9A/s1600/Teddy+Bear+Wallpapers.jpg&#39;, &#39;https://plazarealestate.com.au/wp-content/uploads/sites/131/2016/07/Teddy-Bears.jpg&#39;, &#39;https://cdn0.rubylane.com/_pod/item/1491561/1920sx20Germanx20bear/lovely-German-1920s-teddy-bear--full-2-2048-93.jpg&#39;, &#39;https://twinsmom.com/wp-content/uploads/2020/04/GUND-Slumbers-Teddy-Bear-Stuffed-Animal-Plush-Brown-1722.jpg&#39;, &#39;https://www.melijoe.com/images/142519/open_graph.jpg&#39;, &#39;https://i.ebayimg.com/images/i/221655718748-0-1/s-l1000.jpg&#39;, &#39;https://n3.sdlcdn.com/imgs/i/h/h/Mable-Cuddle-Big-Teddy-Bear-SDL312942984-1-7984b.jpeg&#39;, &#39;https://wallsdesk.com/wp-content/uploads/2016/11/Teddy-Bear-Background.jpg&#39;, &#39;https://www.jarrold.co.uk/userdata/root/images/products/steiff/teddy-bear-replica-1909.jpg&#39;, &#39;https://4.bp.blogspot.com/_OTdJvruSaiI/Swtbm1GvbWI/AAAAAAAAFdo/WXyAoA_1Qco/s1600/IMG_3609.JPG&#39;, &#39;http://4.bp.blogspot.com/_ED0zYuiiwBg/TBke2UCnvHI/AAAAAAAACJU/AfQyXaz-NJI/s1600/aetna+bear.jpg&#39;, &#39;https://www.buildabear.co.uk/on/demandware.static/-/Sites-buildabear-master/default/dw82e7e236/25239x.jpg&#39;, &#39;https://www.lifejackets.com/wp-content/uploads/2020/03/229-EBbearblueribboneverych-1.png&#39;, &#39;http://www.funandcash.com/ebay/teddy-white-small-X-1-A.jpg&#39;, &#39;https://3.bp.blogspot.com/_ED0zYuiiwBg/TLNvSWhZTCI/AAAAAAAACrM/1zXtB07mYlY/s1600/teddy+bears+halloween+closeup+2.JPG&#39;, &#39;https://jooinn.com/images/teddy-bear-48.jpg&#39;, &#39;https://cdn.shopify.com/s/files/1/2622/2548/products/wholesale-plush-in-a-rush-106-14242280636518_1200x.jpg?v=1597087632&#39;, &#39;https://www.carouselshop.co.uk/media/catalog/product/cache/9/image/2000x/040ec09b1e35df139433887a97daa66f/B/F/BFFC8662B837D2AA8409CA13393604F6.jpg&#39;, &#39;https://i5.walmartimages.com/asr/ab097d42-d89e-4db0-a7df-6d87b08de9ab_1.0e68fae386f2fafcb61bfbd7fc12828e.jpeg&#39;, &#39;https://3.bp.blogspot.com/-vmp7XBf08eM/Tca-_DqLdeI/AAAAAAAACGQ/cJa3P2VUpT4/s1600/%252362+Teddy+bears+picnic.JPG&#39;, &#39;https://image.made-in-china.com/2f0j00NdUtRvuYOLbp/2017-New-Design-Scary-Teddy-Bear-Zombie-Bear-Undead-Bear-Bloody-Bear-Horrible-Teddy-Bear.jpg&#39;, &#39;https://teddybears.co.uk/wp-content/uploads/2015/09/petsy-28cm.jpg&#39;, &#39;https://4.bp.blogspot.com/-003EDE5jTOw/UDSwjEWC7oI/AAAAAAAADuQ/lA_x_5ECQAo/s1600/teddy-bear-14-hqwallpapers4u.co.cc.jpg&#39;, &#39;https://www.sayitwithbears.co.uk/wp-content/uploads/2016/07/large-personalised-bonnie-honey-scaled.jpg&#39;, &#39;https://webimg.secondhandapp.com/1.1/5e30189ab33a15626007900b&#39;, &#39;https://www.buildabear.com/on/demandware.static/-/Sites-buildabear-master/default/dwa68008ec/26614x.jpg&#39;, &#39;http://cdn.shopify.com/s/files/1/2429/7549/products/Edgar-_4_634bce55-3448-4579-adaf-349cc2dfe069_1200x1200.jpg?v=1557254763&#39;, &#39;https://cdn.shopify.com/s/files/1/2622/2548/products/wholesale-plush-in-a-rush-14271863685222_1024x1024.jpg?v=1586794398&#39;, &#39;https://cdn-image.realsimple.com/sites/default/files/styles/portrait_435x518/public/1510689111/giant-teddy-bear.jpg?itok=JRUEDZtP&#39;, &#39;https://www.buildabear.com/dw/image/v2/BBNG_PRD/on/demandware.static/-/Sites-buildabear-master/default/dw78d308a2/28167x.jpg?sw=600&amp;sh=600&amp;sm=fit&amp;q=70&#39;, &#39;https://www.pcsoutdoors.com/images/products/detail/BeaverBearLgFront.jpg&#39;, &#39;http://allpicts.in/wp-content/uploads/2015/10/Cute-Teddy-bear-with-Pink-roses.jpg&#39;, &#39;https://pngimg.com/uploads/teddy_bear/teddy_bear_PNG94.png&#39;, &#39;http://cdn.shopify.com/s/files/1/0704/5013/products/teddy-bears-gund-maxie-bear-beige-24-1_1024x1024.jpg?v=1544388291&#39;, &#39;http://c.shld.net/rpx/i/s/i/spin/image/spin_prod_1099814412??hei=64&amp;wid=64&amp;qlt=50&#39;, &#39;https://cdn0.rubylane.com/shops/1754162/118.1L.jpg&#39;, &#39;http://www.photos-public-domain.com/wp-content/uploads/2010/12/cream_colored_teddy_bear.jpg&#39;, &#39;https://cdn0.rubylane.com/shops/your-favorite-doll/156.1L.jpg&#39;, &#39;https://pngimg.com/uploads/teddy_bear/teddy_bear_PNG7.png&#39;, &#39;https://www.buildabear.com/on/demandware.static/-/Sites-buildabear-master/default/dwbebeadb4/24925x.jpg&#39;, &#39;https://pngimg.com/uploads/teddy_bear/teddy_bear_PNG90.png&#39;, &#39;http://1.bp.blogspot.com/_ED0zYuiiwBg/TCoGLyKhVNI/AAAAAAAACMU/Sk2m6kJtwQ0/s1600/odd+bear+seated.jpg&#39;, &#39;https://www.henrymayo.com/images/content-images/Teddy-Bear.jpg&#39;, &#39;https://www.buildabear.com/on/demandware.static/-/Sites-buildabear-master/default/dw2b81d8a7/28502x.jpg&#39;, &#39;https://www.school-bears.co.uk/wp-content/uploads/2018/01/personalised-teddy-bear-anne.jpg&#39;, &#39;https://api.time.com/wp-content/uploads/2019/12/Teddy-Bear.jpg?quality=85&amp;w=1200&amp;h=628&amp;crop=1&#39;, &#39;https://purepng.com/public/uploads/large/two-teddy-bear-in-basket-qyo.png&#39;, &#39;https://cdn11.bigcommerce.com/s-dee9d/images/stencil/1280x1280/products/143/1173/Sweetie-Pie-Big-Love-hazelnut-brown-teddy-bear-30in__97755.1542992358.jpg?c=2&#39;, &#39;https://www.taylorherring.com/wp-content/uploads/2015/04/GiantTeddyBears-5-781x1020.jpg&#39;, &#39;https://theeducationhub.org.nz/wp-content/uploads/2020/03/Teddy-bear-hunt-scaled.jpg&#39;, &#39;https://teddybearsandfriends.com/wp-content/uploads/2013/12/Teddy-Bear-Miniature-US-Special-1984-97-98-1_.jpg&#39;, &#39;https://cdn8.bigcommerce.com/s-dee9d/images/stencil/1280x1280/products/354/2910/Sweetie-Tubs-mocha-brown-teddy-bear-65in_3__58929.1323818431.jpg?c=2&#39;, &#39;https://teddybears.co.uk/wp-content/uploads/2017/09/113321.jpg&#39;, &#39;https://www.fromme.co.zw/uploads/2020/08/Teddy-FM_.jpg&#39;, &#39;https://craftsmumship.com/wp-content/uploads/2013/04/Kina-dolls-size-knitted-cardigan.jpg&#39;, &#39;http://mylitter.com/wp-content/uploads/2019/02/bear.jpg&#39;, &#39;https://www.stuffedwithplushtoys.com/assets/full/9750-30.jpg?20180212090824&#39;, &#39;https://www.grabhub.co.uk/wp-content/uploads/2020/07/Peek-a-Boo-Teddy-Bear-1.jpg&#39;, &#39;https://images.wallpaperscraft.com/image/soft_toy_teddy_bear_bear_117110_938x1668.jpg&#39;, &#39;https://www.curiousmondo.com/images/2017/11/02/teddy-bear-making-04.jpg&#39;, &#39;http://1.bp.blogspot.com/-NosZBJngTnA/Tp_rt11Z4PI/AAAAAAAAAJg/GNVaaoWmesg/s1600/Teddy+bear+detail1.JPG&#39;, &#39;https://www.carouselshop.co.uk/media/catalog/product/cache/9/image/2000x/040ec09b1e35df139433887a97daa66f/D/1/D10F255704F7CE7FBEB25963EFF90A74.jpg&#39;, &#39;https://cdn0.rubylane.com/shops/738907/T722.1L.jpg?63&#39;] Images downloaded. After checking images for issues, 256 (total) images remain. . &quot;Only 100(x3) images?! How can you hope to train a sophistical computer vision model with such a small amount of data?&quot; Transfer Learning, my friend. . Load the Data and Take a Look . Here are some examples of the images we grabbed: . def setup_dls(path): data = DataBlock( # define fastai data structure blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label, item_tfms=RandomResizedCrop(224, min_scale=0.5), batch_tfms=aug_transforms()) dls = data.dataloaders(path) # define dataloader(s) return dls dls = setup_dls(path) dls.show_batch() # take a look . . Define and Train the Model . ...With my special &quot;triangle plot&quot; visualization ( as demonstrated in the Part 1 blog post) called from my VizPreds fastai Callback (described below). (If you run this notebook on Colab, you&#39;ll need to authorize Google Drive when prompted below, in order for the triangle plot image thumbnails to show). . In the plots that follow, mouse over the dots to see our bear images &quot;move&quot; as the model trains! You&#39;ll see one epoch where the &quot;body&quot; network&#39;s weights are frozen, and then four epochs where the full model trains. . learn = cnn_learner(dls, resnet18, metrics=[error_rate]) learn.fine_tune(4, cbs=VizPreds) # fine_tune does 1 epoch &#39;frozen&#39;, then as many more epochs you specify . . Generating (URLS of) thumbnail images... Drive already mounted at /gdrive; to attempt to forcibly remount, call drive.mount(&#34;/gdrive&#34;, force_remount=True). Thumbnails saved to Google Drive in /gdrive/My Drive/scraped_images_thumbs/ Waiting on Google Drive until URLs are ready. . epoch train_loss valid_loss error_rate time . 0 | 1.788116 | 0.159182 | 0.019608 | 00:13 | . Epoch 0: Plotting 51 (= 51?) points: . epoch train_loss valid_loss error_rate time . 0 | 0.327038 | 0.050930 | 0.000000 | 00:13 | . 1 | 0.231127 | 0.067547 | 0.019608 | 00:13 | . 2 | 0.170447 | 0.047806 | 0.019608 | 00:13 | . 3 | 0.134644 | 0.027070 | 0.019608 | 00:13 | . Epoch 0: Plotting 51 (= 51?) points: . Epoch 1: Plotting 51 (= 51?) points: . Epoch 2: Plotting 51 (= 51?) points: . Epoch 3: Plotting 51 (= 51?) points: . Depending on which bear images get scraped on which day, even this may be trivially easy. When I ran this above, there was only one error: a tiny brown-colored bear cub that was classified by the model as grizzly but that was labeled (via DuckDuckGo) as a black bear. All the other points correctly &quot;collapsed&quot; very quickly nearly the poles. . If we look at the confusion matrix, we&#39;ll see (for the time I ran this), only the one error mentioned above: . interp = ClassificationInterpretation.from_learner(learn) interp.plot_confusion_matrix() . . And if we plot the top losses, we&#39;ll see (based on mousing-over in the triangle plot above) the images for the points furthest from the poles: first the mislabeled cub, then a grizzly mother and cub, then a teddy bear: . interp.plot_top_losses(6, nrows=1) . . When I ran this, the top loss image was actually a small dog! I coulda/shoulda checked that above in the triangle plot! . We&#39;re not going to train this more or clean the dataset, instead let&#39;s just remember that in this case, for 3 classes our error rate was 0.019608 (= 1/51, i.e. 1 error out of 51 images in the validation set), i.e. we were ~98% accurate. . Four Classes . Let&#39;s add one more bear to the mix, the &quot;spectacled bear&quot;, and repeat this process, and visualize in 3D (sadly no image thumbnail mouseovers for 3D plots). First we&#39;ll download and look at what we&#39;ve got.. . labels = &#39;grizzly&#39;,&#39;black&#39;,&#39;teddy&#39;,&#39;spectacled&#39; scrape_for_me(dl_path, [labels[-1]], search_suffix, erase_dir=False) # download one more class dls = setup_dls(path) dls.show_batch() . . spectacled bear: Got 100 image URLs. Downloading... urls = [&#39;http://4.bp.blogspot.com/-6xZLUXHh8Uc/UUxmEy9QZBI/AAAAAAAAXcY/TMXg3WwS3GA/s1600/Spectacled+Bear+2.jpg&#39;, &#39;https://www.coolearth.org/wp-content/uploads/2016/06/Spectacled-Bear-2.jpg&#39;, &#39;http://3.bp.blogspot.com/-Sg8TmR5qh88/UUxmNY4d0HI/AAAAAAAAXcw/dpL2qFHZvp0/s1600/Spectacled+Bear+5.jpg&#39;, &#39;https://i.natgeofe.com/n/804d9cdb-f8da-449a-93b0-aac7a448b7c0/spectacled-bear_thumb.JPG?w=1200&#39;, &#39;https://www.activewild.com/wp-content/uploads/2018/03/spectacled-bears-1024x683.jpg&#39;, &#39;http://www.rainforest-alliance.org/sites/default/files/2016-09/spectacled-bear-header.jpg&#39;, &#39;https://lh6.googleusercontent.com/-Sptgd7fYIqY/TYk4YVRbndI/AAAAAAAAB7E/MYqqcMu-isw/s1600/Spectacled_Bear_Tennoji_2.jpg&#39;, &#39;https://www.vanwageningen.net/i/upload/2014/10/29/20141029132015-bc5e40e5-me.jpg&#39;, &#39;https://media.buzzle.com/media/images-en/photos/mammals/bears/1200-1002804-spectacled-bear-face.jpg&#39;, &#39;http://justfunfacts.com/wp-content/uploads/2017/11/spectacled-bear.jpg&#39;, &#39;https://colombiareports.com/wp-content/uploads/2017/07/spectacled_bear.jpg&#39;, &#39;http://tenrandomfacts.com/wp-content/uploads/2016/07/Spectacled-Bear.jpg&#39;, &#39;https://static1.squarespace.com/static/56a1a14b05caa7ee9f26f47d/t/57390f5520c6471cf068c6cc/1463357302812/&#39;, &#39;http://theamazonianassignment.weebly.com/uploads/1/2/1/3/12136910/944137409_orig.jpg&#39;, &#39;https://www.aboutanimals.com/images/spectacled-bear-ecuadorian-andes-mountains-328x562.jpg?c14113&#39;, &#39;http://i1.treknature.com/photos/2959/bear_0111111.jpg&#39;, &#39;http://2.bp.blogspot.com/-vdZv8wGWMdo/UUxmNCvsvhI/AAAAAAAAXco/H5Pzgk5dtOk/s1600/Spectacled+Bear+6.jpg&#39;, &#39;https://media.sciencephoto.com/image/c0175188/800wm/C0175188-Spectacled_Bear.jpg&#39;, &#39;http://www.stlzoo.org/files/1014/0017/1158/ANDEANBEAR9410WINKELMAN2.jpg&#39;, &#39;https://www.tourradar.com/days-to-come/wp-content/uploads/2016/01/Spectacled-bear.jpg&#39;, &#39;https://www.zoochat.com/community/media/spectacled-bear.250657/full?d=1393011952&#39;, &#39;http://2.bp.blogspot.com/-1jh4WfVEyx4/T_A-OoNHGFI/AAAAAAAAMHM/Wm41l9WFfgs/s1600/Spectacled+Bear3.jpg&#39;, &#39;http://www.rainforest-alliance.org/sites/default/files/styles/750w_585h/public/2016-09/spectacled-bear-header.jpg?itok=0V7_KGpe&#39;, &#39;https://www.sustainability-times.com/wp-content/uploads/2019/06/AndeanBear_ZN.jpg&#39;, &#39;http://www.animalspot.net/wp-content/uploads/2015/12/Spectacled-Bear-Habitat.jpg&#39;, &#39;http://seethewild.org/wp-content/uploads/2016/05/features.jpeg&#39;, &#39;https://images.fineartamerica.com/images/artworkimages/mediumlarge/1/spectacled-bear-portrait-rose-santuci-sofranko.jpg&#39;, &#39;http://kids.sandiegozoo.org/sites/default/files/2017-07/andean-bear-tree.jpg&#39;, &#39;https://southafricatoday.net/wp-content/uploads/2018/07/1532665810_1-1024x1000.jpg&#39;, &#39;https://upload.wikimedia.org/wikipedia/en/c/ce/Spectacled-bear.jpg&#39;, &#39;http://4.bp.blogspot.com/-zHQPWNws7VQ/TwK7vuoleYI/AAAAAAAAEuI/iZJGb0R9CEQ/s1600/spectacled_bear-spectacled_bear.jpg&#39;, &#39;http://www.ecns.cn/hd/2020/05/18/e41ef93a186c40a38726189b8901f6f3.jpg&#39;, &#39;http://www.animalspot.net/wp-content/uploads/2015/12/Baby-Spectacled-Bear.jpg&#39;, &#39;http://www.mammalwatching.com/wp-content/uploads/2018/01/EC-square-fox.jpg&#39;, &#39;http://newyorktrendnyc.com/wp-content/uploads/2013/11/andean-bear.jpg&#39;, &#39;https://home.bt.com/images/spectacled-bears-and-snow-leopards-among-creatures-getting-funding-boost-136427641293802601-180606124211.jpg&#39;, &#39;https://nationalzoo.si.edu/sites/default/files/animals/andeanbear-006.jpg&#39;, &#39;https://www.pitara.com/wordpress/wp-content/uploads/2001/02/spectacled-bear.jpg&#39;, &#39;http://3.bp.blogspot.com/-EGI8NqbPcvo/UUxmUJ6t1qI/AAAAAAAAXdA/fDUqD60Tv00/s1600/Spectacled+Bear.jpg&#39;, &#39;https://lh6.googleusercontent.com/-cc05A4QkDxc/TYk4S3w1qFI/AAAAAAAAB7A/3vb0t85A7GU/s1600/spectacled_bear_03.jpg&#39;, &#39;https://www.aboutanimals.com/images/spectacled-bear-rocks-820x545.jpg?c14113&#39;, &#39;https://i.ytimg.com/vi/VXFIYIQgEkg/maxresdefault.jpg&#39;, &#39;https://media.buzzle.com/media/images-en/photos/mammals/bears/1200-71192249-spectacled-bear.jpg&#39;, &#39;https://farm3.staticflickr.com/2913/14137750328_d101997a4c_z.jpg&#39;, &#39;http://www.realworldholidays.co.uk/blog/wp-content/uploads/2015/12/spectacled-bear1.jpg&#39;, &#39;http://justfunfacts.com/wp-content/uploads/2017/11/spectacled-bear-2.jpg&#39;, &#39;http://upload.wikimedia.org/wikipedia/commons/6/62/Spectacled_Bear_059.jpg&#39;, &#39;https://media.nbcwashington.com/2019/09/4621594915_9022bfd814_b.jpg?fit=1024%2C702&#39;, &#39;https://philadelphiazoo.org/wp-content/uploads/2019/10/Andean.SpectacledBear_Rosie_3395.jpg&#39;, &#39;http://2.bp.blogspot.com/-4bGjmY9K4pk/T_A-Yq5aNGI/AAAAAAAAMHc/pv9gEJ8O6Uo/s1600/Spectacled+Bear5.jpg&#39;, &#39;https://resize.hswstatic.com/w_907/gif/types-of-spectacled-bear0.jpg&#39;, &#39;http://1.bp.blogspot.com/-xGs4-W-3iSY/TjaZG6_XnOI/AAAAAAAABUE/AkEJ97L1HQc/s1600/156521.jpg&#39;, &#39;https://www.robertharding.com/watermark.php?type=preview&amp;im=RM/RH/HORIZONTAL/1127-12838&#39;, &#39;https://i.pinimg.com/736x/fa/40/33/fa403340878f175322c07b860b9d6426--spectacled-bear-bolivia.jpg&#39;, &#39;http://img.izismile.com/img/img3/20100513/640/cute_spectacled_bear_640_03.jpg&#39;, &#39;https://ourplnt.com/wp-content/uploads/2016/03/Spectacled-bear.jpg&#39;, &#39;http://bearlegend.com/wp-content/uploads/2012/04/3956278926_328d1c6a54_o.jpg&#39;, &#39;http://cincinnatizoo.org/system/assets/uploads/2014/02/spectaculed-bear.jpg&#39;, &#39;http://3.bp.blogspot.com/-brSuqjGOIG0/URGtpFtyo_I/AAAAAAAAARg/vLE13RVoCsk/s1600/spectacled-bear.jpg&#39;, &#39;https://c2.staticflickr.com/2/1501/24144684635_73b9e79d88_b.jpg&#39;, &#39;https://critter.science/wp-content/uploads/2019/05/sb1.jpg&#39;, &#39;https://srcnaut.com/cdn-cgi/image/f=auto,fit=crop,g=0.5x0.5,w=2000,h=1125,q=90,d=1/upload/32/02/df/shutterstock-1188627676.jpg&#39;, &#39;http://seethewild.org/wp-content/uploads/2016/05/dreamstime_15373008-1.jpg&#39;, &#39;https://upload.wikimedia.org/wikipedia/commons/thumb/9/99/Spectacled_Bear_-_Houston_Zoo.jpg/1200px-Spectacled_Bear_-_Houston_Zoo.jpg&#39;, &#39;https://www.zoochat.com/community/media/spectacled-bear-at-chester-15-07-12.192796/full?d=1342391273&#39;, &#39;https://res.cloudinary.com/dk-find-out/image/upload/q_80,w_1440,f_auto/MA_00155387_i4leyu.jpg&#39;, &#39;http://2.bp.blogspot.com/-PQGmVUDZAhs/TwK5urRX1LI/AAAAAAAAEtw/s569QHCcx8Y/s1600/spectacled+bear.jpg&#39;, &#39;https://bw-1651cf0d2f737d7adeab84d339dbabd3-gallery.s3.amazonaws.com/images/image_2865567/db2b44df10ba2a567a8e5cc34ddfeed0_original.JPG&#39;, &#39;http://etc.usf.edu/clippix/pix/spectacled-bear-with-piece-of-food-in-its-mouth_medium.jpg&#39;, &#39;https://www.activewild.com/wp-content/uploads/2018/03/spectacled-bear-standing-768x1024.jpg&#39;, &#39;http://2.bp.blogspot.com/-1mdQ66udYmw/T_A-UjaJk5I/AAAAAAAAMHU/uJw0kPcz1vc/s1600/Spectacled+Bear4.jpg&#39;, &#39;https://www.worldatlas.com/upload/43/04/5c/shutterstock-92656222-min.jpg&#39;, &#39;https://www.si.edu/sites/default/files/newsdesk/photos/andean-bear.jpg&#39;, &#39;https://www.aboutanimals.com/images/spectacled-bear-ogimage.jpg&#39;, &#39;https://images.freeimages.com/images/large-previews/e0f/spectacled-bear-1561333.jpg&#39;, &#39;https://kentattractions.co.uk/wp-content/uploads/2016/09/Spectacled-Bear.jpg&#39;, &#39;http://gringosabroad.com/wp-content/uploads/2013/11/Male-Andean-Bear-face.jpg&#39;, &#39;https://rangerplanet.com/wp-content/uploads/2019/10/spectacled-bear.jpg&#39;, &#39;https://www.wisebirding.co.uk/wp-content/uploads/Spectacled-Bear.jpg&#39;, &#39;https://i.ytimg.com/vi/2TmnhBSyQoo/maxresdefault.jpg&#39;, &#39;https://vistapointe.net/images/spectacled-bear-5.jpg&#39;, &#39;https://www.aboutanimals.com/images/spectacled-bear-tree-820x513.jpg?d8bc0c&#39;, &#39;https://standfirst-whitleyaward-production.imgix.net/content/uploads/1996/12/18134457/Tremarctos_ornatus_portrait.jpg?auto=compress,enhance,format&amp;crop=faces,entropy,edges&amp;fit=crop&amp;fm=pjpg&amp;w=1866&amp;h=1400&#39;, &#39;https://c1.staticflickr.com/7/6037/6304684676_8fe4be5717_b.jpg&#39;, &#39;http://bearlegend.com/wp-content/uploads/2012/04/5566818433_9c994ec063_o.jpg&#39;, &#39;https://www.bwallpaperhd.com/wp-content/uploads/2018/12/SpectacledBear.jpg&#39;, &#39;http://justfunfacts.com/wp-content/uploads/2017/11/spectacled-bear-eating-fruit.jpg&#39;, &#39;https://images.fineartamerica.com/images-medium-large-5/andean-bear-spectacled-bear-houston-zoo-tessa-fairey.jpg&#39;, &#39;https://media.buzzle.com/media/images-en/photos/mammals/bears/1200-598140-spectacled-bear.jpg&#39;, &#39;http://magarticles.magzter.com/articles/8803/216564/58e38ecbbeeb4/Conservation-Insight-Andean-Bear.jpg&#39;, &#39;http://www.rainforest-alliance.org/sites/default/files/styles/large/public/2016-09/spectacled-bear.jpg?itok=BXWidYtz&#39;, &#39;https://bw-1651cf0d2f737d7adeab84d339dbabd3-gallery.s3.amazonaws.com/images/image_2865571/a3195154ccdac7c9efcbed5727462346_original.JPG&#39;, &#39;http://www.animalspot.net/wp-content/uploads/2015/12/Spectacled-Bear-in-the-Wild.jpg&#39;, &#39;http://bearlegend.com/wp-content/uploads/2012/04/6862037661_30664cf53f_o.jpg&#39;, &#39;http://www.animalspot.net/wp-content/uploads/2015/12/Spectacled-Bear-Eating.jpg&#39;, &#39;http://2.bp.blogspot.com/-3UzekS1270M/TiAwko0VrQI/AAAAAAAAAKI/rOXYR8LXLHM/s1600/spectacled_bear_3.jpg&#39;, &#39;https://i.pinimg.com/736x/d2/99/fa/d299fa76c3d1a5c0e017514b086ddd9c--spectacled-bear-teddy-bears.jpg&#39;, &#39;https://c2.staticflickr.com/4/3685/8852797884_8f3a84d84c_b_d.jpg&#39;, &#39;http://www.kidzone.ws/lw/bears/images/spectacled-bear.jpg&#39;, &#39;https://www.animalspot.net/wp-content/uploads/2015/12/Spectacled-Bear-Images.jpg&#39;] Images downloaded. After checking images for issues, 348 (total) images remain. . Then we&#39;ll train the model: . learn = cnn_learner(dls, resnet18, metrics=[error_rate]) learn.fine_tune(4, cbs=VizPreds) # fine_tune does 1 epoch &#39;frozen&#39;, then as many more epochs you specify . . epoch train_loss valid_loss error_rate time . 0 | 1.685202 | 0.791340 | 0.275362 | 00:16 | . Epoch 0: Plotting 69 (= 69?) points: . . . epoch train_loss valid_loss error_rate time . 0 | 0.474520 | 0.377549 | 0.130435 | 00:15 | . 1 | 0.337095 | 0.232552 | 0.086957 | 00:16 | . 2 | 0.252857 | 0.182564 | 0.072464 | 00:15 | . 3 | 0.207571 | 0.131986 | 0.057971 | 00:16 | . Epoch 0: Plotting 69 (= 69?) points: . . . Epoch 1: Plotting 69 (= 69?) points: . . . Epoch 2: Plotting 69 (= 69?) points: . . . Epoch 3: Plotting 69 (= 69?) points: . . . ...So we see that spectacled bears, being black-colored, can get mixed up with black bears sometimes. . interp = ClassificationInterpretation.from_learner(learn) interp.plot_confusion_matrix() . . The biggest losses are usually when the spectacled bears&#39; &quot;spectacles&quot; are not fully in view (e.g. in a side shot), in which case either its black coat makes it seem like a black bear, or its shagginess &amp; size make it seem like a grizzly: . interp.plot_top_losses(6, nrows=1) . . (Another time I ran this, the top loss was for an image of a fox that was mislabeled as &#39;spectacled&#39;! Clearly just scraping from DuckDuckGo is not fool-proof. LOL) . Note that we had to retrain the model in order to handle the spectacled bear -- there was no &quot;slot&quot; for it in the original 3-class model. We&#39;re now going to switch to a contrastive loss model that uses a Siamese Network, which...we&#39;ll see how it does on the spectacled bear after we train it on only the first 3 types of bear. . I&#39;m going to pause writing and come back in the morning, so that I can title the next section... . 2. Contrastive Loss Demo: Same Bears, Different Day . As we described in blog post Part 1, contrastive loss systems achieve metric learning by employing a Siamese Network. . Lesson 2 of the FastAI book already has a very effective Siamese Network demo. It does not use contrastive loss, and yet it will (see Appenix below) outperform my contrastive loss version (in terms of accuracy, by about 5 to 6%). So why would we want contrastive losses? Well, because they are useful for learning &quot;semantically meaningful&quot; embeddings, something the aforementioned Siamese Network lesson did not set as a goal. . The FastAI lesson uses the Oxford PETS dataset which has a different format than our bear-images dataset, so the &quot;good news&quot; is I got an opportuny to learn more about writing my own fastai dataloader by altering Jeremy&#39;s instructions in the Lesson. . Writing My First DataLoader(s) . ...Actually it turns out that we can copy all we need from the fastai tutorial except the parts where we grab the image files and the label_func() (below) that gives us class names based on the file pathnames. What we need is a routine that grabs pairs of images at a time, and labels* them as either &quot;similar&quot; (denoted by a label value of 1) or not (denoted by a value of 0). . . Terminology:By &quot;labels&quot; I refer exclusively to &quot;ground truth&quot; or &quot;target&quot; values, which I may use interchangeably (esp. &quot;targets&quot;) supplied by the dataset/user -- we are doing Supervised Learning. Model outputs will be referred to as &quot;predictions&quot;. So, adapting the FastAI Siamese Networks Tutorial to a slightly different (and slightly simpler) data file structure,... it turns out we won&#39;t be writing a DataBlock, but rather writing a Transform. (I don&#39;t yet understand why TBH.) . Before we do that, we&#39;re going to define a custom input object called SiameseImage that our dataloader/Transform can operate on, and that we can &quot;show&quot; in the notebook -- it pays to be able to look at your data! ;-) . Let&#39;s review our list of (3-bears) files, and we&#39;ll leave out the spectacled bears for now . labels = &#39;grizzly&#39;,&#39;black&#39;,&#39;teddy&#39; path = scrape_for_me(dl_path, labels, search_suffix, max_n=300) #labels = [&#39;cat&#39;,&#39;dog&#39;,&#39;horse&#39;] #path = scrape_for_me(dl_path, labels, &#39;&#39;, max_n=300) subdirs, path, files = labels, Path(dl_path), [] for s in subdirs: files += get_image_files(path/s) print(f&#39;files has {len(files)} elements.&#39;) print(f&quot;files[0] = {files[0]}, files[-1] = {files[-1]}&quot;) . grizzly bear: Got 280 image URLs. Downloading... urls = [&#39;https://i0.wp.com/www.commonsenseevaluation.com/wp-content/uploads/2013/08/Bear.jpg&#39;, &#39;https://blog.humanesociety.org/wp-content/uploads/2019/04/BEAR_GRIZZLY_A45T3555_468435.jpg&#39;, &#39;https://www.conservationnw.org/wp-content/uploads/2017/06/Grizzly-bear-family-Copyright-iStock.com_PhotosbyAndy-4.2015-e1507229404830.jpg&#39;, &#39;https://images.fineartamerica.com/images-medium-large/grizzly-bear-portrait-jim-guy.jpg&#39;, &#39;https://www.mtpr.org/sites/kufm/files/styles/x_large/public/201809/grizzly-bear-02_Istock.jpg&#39;, &#39;https://www.rmef.org/wp-content/uploads/2019/04/grizzly.jpg&#39;, &#39;https://images.dailyhive.com/20170509095127/bear-148-parks-canada-amar-atwal.jpeg&#39;, &#39;https://api.time.com/wp-content/uploads/2015/08/grizzly-bear.jpg?quality=85&amp;w=1200&amp;h=628&amp;crop=1&#39;, &#39;https://a57.foxnews.com/a57.foxnews.com/static.foxnews.com/foxnews.com/content/uploads/2018/09/640/320/1862/1048/Grizzly-iStock.jpg?ve=1&amp;tl=1?ve=1&amp;tl=1&#39;, &#39;https://media.spokesman.com/photos/2014/09/15/jj-Grizzly_MT.jpg&#39;, &#39;https://images.fineartamerica.com/images/artworkimages/mediumlarge/2/grizzly-bear-in-snow-tendrel-images.jpg&#39;, &#39;https://wallsdesk.com/wp-content/uploads/2017/01/Grizzly-Bear-Desktop-Wallpaper-.jpg&#39;, &#39;https://i.cbc.ca/1.4132188.1495755019!/fileImage/httpImage/image.jpg_gen/derivatives/original_780/grizzly-bear.jpg&#39;, &#39;http://elelur.com/data_images/mammals/grizzly-bear/grizzly-bear-08.jpg&#39;, &#39;https://images.fineartamerica.com/images-medium-large-5/grizzly-bear-cub-phyllis-taylor.jpg&#39;, &#39;https://www.mtpr.org/sites/kufm/files/styles/x_large/public/201812/Grizzly-bear-family_LuCaAr-iStock.jpg&#39;, &#39;https://images.fineartamerica.com/images-medium-large/grizzly-bear-yukon-robert-postma.jpg&#39;, &#39;https://www.unilad.co.uk/wp-content/uploads/2020/02/close-up-photography-of-grizzly-bear-1068554.jpg&#39;, &#39;https://reidparkzoo.org/wp-content/uploads/2013/09/grzbear2812a.jpg&#39;, &#39;https://outsider.com/wp-content/uploads/2020/06/Grizzly-Bear-3.png&#39;, &#39;http://i.huffpost.com/gen/1227495/images/o-GRIZZLY-BEAR-facebook.jpg&#39;, &#39;https://i.ytimg.com/vi/Tue__Hlazh4/maxresdefault.jpg&#39;, &#39;https://wallsdesk.com/wp-content/uploads/2017/01/Grizzly-Bear-Wallpapers-and-Backgrounds.jpg&#39;, &#39;https://get.wallhere.com/photo/animals-wildlife-bears-fur-wilderness-Grizzly-Bears-Grizzly-bear-brown-bear-bear-fauna-mammal-1920x1200-px-snout-carnivoran-organism-american-black-bear-terrestrial-animal-771353.jpg&#39;, &#39;http://traveltalesoflife.com/wp-content/uploads/Kicking-Horse-Resort-Grizzly-Close-Up.jpg&#39;, &#39;http://www.hickerphoto.com/images/1024/-56752.jpg&#39;, &#39;https://images.dailyhive.com/20161104114500/Grizzly-bears-TrophyLush.jpg&#39;, &#39;https://mtsgreenway.org/wp-content/uploads/2019/08/September-Grizzly-Large.png&#39;, &#39;https://images.fineartamerica.com/images/artworkimages/mediumlarge/1/1-grizzly-bear-art-wildlife-fine-art.jpg&#39;, &#39;https://www.livewaterjacksonhole.com/wp-content/uploads/2020/06/Grizzly-399-Grand-Teton-National-Park.jpg&#39;, &#39;https://i0.wp.com/rangerrick.org/wp-content/uploads/2018/04/RRMAR13_6-11Grizzlies.jpg?fit=1156%2C650&amp;ssl=1&#39;, &#39;http://grizzlybearwatching.com/wp-content/uploads/2017/03/BlackBear1-1500x998.jpg&#39;, &#39;http://mediad.publicbroadcasting.net/p/kufm/files/styles/medium/public/201410/grizzlybear.jpg&#39;, &#39;https://www.vmcdn.ca/f/files/rmotoday/images/grizzly122_kalra.jpg;w=960&#39;, &#39;http://4.bp.blogspot.com/-iRDehywX024/UNMpj9s5kVI/AAAAAAAAADI/9sxChqYMV2c/s1600/Grizzly-Bear-Yellowstone.jpg&#39;, &#39;https://2.bp.blogspot.com/-d0DjXibvH8w/UQN3Xn4QWDI/AAAAAAAAFb0/2nUaH5eoapg/s1600/Grizzly+Bear-2013-0pic-0.jpg&#39;, &#39;https://www.gannett-cdn.com/presto/2020/07/21/PGRF/83612915-6ab2-4f0d-aeca-7088f219ecec-AP20191697142470.jpg?crop=2999,1687,x0,y0&amp;width=2999&amp;height=1687&amp;format=pjpg&amp;auto=webp&#39;, &#39;http://assets.nydailynews.com/polopoly_fs/1.3269663.1498159924!/img/httpImage/image.jpg_gen/derivatives/article_750/654079900.jpg&#39;, &#39;https://d.ibtimes.co.uk/en/full/1621655/grizzly-bears.jpg&#39;, &#39;https://www.idahoconservation.org/wp-content/uploads/2020/06/Grizzly-Bear-photo-by-Jim-Mellen-1.jpg&#39;, &#39;https://upload.wikimedia.org/wikipedia/commons/thumb/f/f6/Ursus_arctos_californicus%2C_Santa_Barbara%2C_Natural_History_Museum.jpg/1200px-Ursus_arctos_californicus%2C_Santa_Barbara%2C_Natural_History_Museum.jpg&#39;, &#39;https://patch.com/img/cdn20/users/22906546/20180731/095817/styles/raw/public/processed_images/image006_1-1533085927-8474.jpg&#39;, &#39;https://wallup.net/wp-content/uploads/2017/11/17/265280-bears-Grizzly_bear.jpg&#39;, &#39;https://keyassets.timeincuk.net/inspirewp/live/wp-content/uploads/sites/2/2019/06/GettyImages-525103104.jpg&#39;, &#39;https://www.tsln.com/wp-content/uploads/2018/10/bears-tsln-101318-3-1240x826.jpg&#39;, &#39;http://www.bearsmart.com/wp-content/uploads/2015/01/why-bears3-730x330.jpg&#39;, &#39;https://cdn.rbth.com/980x-/all/2016/10/07/grizzly_gettyimages-10188130_b.jpg&#39;, &#39;https://wildlife.org/wp-content/uploads/2015/08/Grizzly-Bear-Credit-Washington-State-University-620x264.jpg&#39;, &#39;http://agenda21news.com/wp-content/uploads/2014/12/Grizzly-bear.gif&#39;, &#39;https://bloximages.chicago2.vip.townnews.com/codyenterprise.com/content/tncms/assets/v3/editorial/c/75/c75e6ae4-5ab0-11e7-9823-3b1d2aaec452/595173d52fa4e.image.jpg?resize=1200%2C885&#39;, &#39;https://cdn11.bigcommerce.com/s-db59p/images/stencil/1280x1280/products/21092/42704/oversized_12162019_01__97480.1577021805.jpg?c=2&#39;, &#39;http://1.bp.blogspot.com/_VgXaDXiFvX4/TOLc_oEzGcI/AAAAAAAAA9c/Q7qtQ7R1ju8/s1600/grizzly-bear-1.jpg&#39;, &#39;https://devdenverzoo.com/wp-content/uploads/2018/09/Grizzly-Bear_03.jpg&#39;, &#39;https://miro.medium.com/max/1758/1*cBBVLzODaagrL7V2eNSjSQ.jpeg&#39;, &#39;https://images.fineartamerica.com/images/artworkimages/mediumlarge/3/grizzly-bear-jerry-fornarotto.jpg&#39;, &#39;https://www.wildnatureimages.com/images/xl/170628-145-Grizzly-Bear-Sow-with-Cubs.jpg&#39;, &#39;http://www.telegraph.co.uk/content/dam/news/2016/06/21/99682788_Two_grizzly_bears_at_the_Woodland_Park_Zoo_eat_salmon_after_the_fish_was_tossed_to_them_by-xlarge_trans_NvBQzQNjv4BqDfnT11g5XZty1Nobnb9oJsN7dAtWJUhNbBLTzbEHUEY.jpg&#39;, &#39;https://bloximages.chicago2.vip.townnews.com/trib.com/content/tncms/assets/v3/editorial/c/af/caf539ee-9c28-5fda-819a-3aeaa1f029bc/582cffad235a4.image.jpg?resize=1200%2C800&#39;, &#39;https://wildlife.org/wp-content/uploads/2016/08/grizzly1.jpg&#39;, &#39;https://cdn.thefencepost.com/wp-content/uploads/sites/12/2017/06/grizzly-RFP-070317-1240x826.jpg&#39;, &#39;http://static.independent.co.uk/s3fs-public/styles/story_large/public/thumbnails/image/2015/10/06/09/Grizzly.jpg&#39;, &#39;http://mediad.publicbroadcasting.net/p/kufm/files/styles/x_large/public/201603/grizzly-bear_Nathan-Rupert-CC-BY-NC-ND_0.jpg&#39;, &#39;https://www.cbbulletin.com/wp-content/uploads/2020/04/griz.jpg&#39;, &#39;https://img.thedailybeast.com/image/upload/v1492108548/articles/2016/10/15/won-t-you-please-adopt-a-grizzly-bear-cub/161014-Andrews-Grizzly-cubs-tease__p9gwbc.jpg&#39;, &#39;https://onekindplanet.org/wp-content/uploads/2017/09/grizzlybear-edit.jpg&#39;, &#39;http://www.akronzoo.org/Data/Sites/1/media/GalleryImages/105/WebImages/grizzly-bear-hero-1.jpg&#39;, &#39;http://wallup.net/wp-content/uploads/2016/01/139369-bears-nature-animals-river-baby_animals-Grizzly_Bears-Grizzly_bear.jpg&#39;, &#39;https://weneedfun.com/wp-content/uploads/Grizzly-Bear-4.jpg&#39;, &#39;https://1.bp.blogspot.com/-l-Y6zD_KF6o/UQN3jPgigAI/AAAAAAAAFcU/HOKJWQmNjo4/s1600/Grizzly+Bear-2013-0pic-05.jpg&#39;, &#39;https://devdenverzoo.com/wp-content/uploads/2018/09/Grizzly-Bear_02.jpg&#39;, &#39;https://www.conservationnw.org/wp-content/uploads/2017/10/grizzly-bears-1280x950.jpg&#39;, &#39;https://s1.it.atcdn.net/wp-content/uploads/2013/07/Grizzly-bear.jpg&#39;, &#39;https://outsider.com/wp-content/uploads/2020/09/grizzly-bear-ferociously-protects-kill-while-tourists-watch-yellowstone-national-park-1170x702.jpg&#39;, &#39;https://gohunt-assets-us-west-2.s3.amazonaws.com/wyoming-grizzly-bear-og_0.jpg&#39;, &#39;https://www.wildernesscommittee.org/sites/default/files/2018-05/grizzly_bear.jpg&#39;, &#39;http://www.wyofile.com/wp-content/uploads/2017/11/grizzly-pic-e1509641980482.jpg&#39;, &#39;http://averageoutdoorsman.com/wp-content/uploads/2013/02/grizzly-bear.jpg&#39;, &#39;https://www.publicdomainpictures.net/pictures/90000/velka/grizzly-bear-portrait.jpg&#39;, &#39;https://www.vancouverobserver.com/sites/vancouverobserver.com/files/images/article/body/grouse-grizzly_n3d3306-web.jpg&#39;, &#39;http://www.wild-facts.com/wp-content/uploads/2012/04/Grizzlybear55.jpg&#39;, &#39;http://kgmi-am.sagacom.com/wp-content/blogs.dir/70/files/2014/08/grizzly-bear.jpg&#39;, &#39;http://www.shetzers.com/wp-content/uploads/2017/06/W-Blonde-Bear-Cub-and-Mother.jpg&#39;, &#39;https://i2.wp.com/jakesnatureblog.com/wp-content/uploads/2016/06/baby-brown-bear.jpg&#39;, &#39;https://d.newsweek.com/en/full/400233/rtr4kseg.jpg&#39;, &#39;https://wallup.net/wp-content/uploads/2018/10/09/125286-grizzly-bear-forest.jpg&#39;, &#39;https://www.columbiatribune.com/storyimage/MO/20171003/NEWS/171009653/AR/0/AR-171009653.jpg&#39;, &#39;https://images.wallpapersden.com/image/download/bear-grizzly-bear-eyes_amhrZ5SZmpqtpaSklGZuZ2WtZmVtZQ.jpg&#39;, &#39;https://wallpapertag.com/wallpaper/full/a/1/1/437141-grizzly-bear-backgrounds-1920x1080-for-lockscreen.jpg&#39;, &#39;https://bloximages.chicago2.vip.townnews.com/idahostatejournal.com/content/tncms/assets/v3/editorial/6/45/64588e0b-55e7-5585-bc61-819ae3630cff/59b721e2eb964.image.jpg&#39;, &#39;https://devdenverzoo.com/wp-content/uploads/2018/09/Grizzly-Bear_05.jpg&#39;, &#39;https://www.washingtonpost.com/resizer/i6X-FE4FqlbaGDzh9CanT4YU99Y=/1440x0/smart/arc-anglerfish-washpost-prod-washpost.s3.amazonaws.com/public/2C55XVXHAE5FTHUGC726432CYU.jpg&#39;, &#39;http://www.100hdwallpapers.com/wallpapers/3840x2160/two_grizzly_bears_in_water_4k-hd_wallpapers.jpg&#39;, &#39;https://www.uniquelynorthwest.com/wp-content/uploads/2014/12/grizzly-bear-alaska-incentive.jpg&#39;, &#39;https://www.conservationnw.org/wp-content/uploads/2020/03/JSW_6993-scaled.jpg&#39;, &#39;https://www.conservationnw.org/wp-content/uploads/2017/10/Grizzly-bear-in-mountain-meadow.-Photo-copyright-Jason-Verschoor.-iStockphoto.com_-e1507583569416.jpg&#39;, &#39;http://cdn.roaring.earth/wp-content/uploads/2016/03/Scratching-head-main-text.jpg&#39;, &#39;https://content.presspage.com/uploads/1979/1920_190416-oped-nielsen-grizzly-alex-taylor-banner-534230.jpg?10000&#39;, &#39;https://outsider.com/wp-content/uploads/2020/07/Grizzly-Bear.png&#39;, &#39;https://static01.nyt.com/images/2020/07/10/multimedia/10xp-bears-pix/10xp-bears-pix-videoSixteenByNineJumbo1600.jpg&#39;, &#39;https://images.fineartamerica.com/images/artworkimages/mediumlarge/2/grizzli-bear-cub-lyl-dil-creations.jpg&#39;, &#39;https://cowboystatedaily.com/wp-content/uploads/2020/05/bear-photo-not-cat-scaled.jpg&#39;, &#39;https://2.bp.blogspot.com/-p-QKKk3T8O0/UQN3a5YSALI/AAAAAAAAFcE/iTlNg3jee9A/s1600/Grizzly+Bear-2013-0pic-03.jpg&#39;, &#39;https://3.bp.blogspot.com/-_kQl-36lVL4/ThYEDrnAGBI/AAAAAAAABdM/sQkA6n28LJY/s1600/Grizzly+7+WA.jpg&#39;, &#39;https://fotos.perfil.com/2019/12/02/trim/1140/641/grizly-bear-811359.jpg&#39;, &#39;https://wildlifeimages.org/wp-content/uploads/2016/09/DSC1704.jpg&#39;, &#39;https://lakechelannow.com/wp-content/uploads/2019/08/Grizzly_Bear-Face-800x600.jpg&#39;, &#39;https://www.realtree.com/sites/default/files/content/images/open-graph/2020/cdenniswdonohue-shutterstock-griz.jpg&#39;, &#39;https://wallsdesk.com/wp-content/uploads/2017/01/Grizzly-Bear-4K.jpg&#39;, &#39;http://2.bp.blogspot.com/-u2jNl3VZLpU/T5LoHWgdunI/AAAAAAAAFPo/DdDtaVJGTco/s1600/grizzly-bear_grizzly-bear.jpg&#39;, &#39;https://life.hawkeoptics.com/wp-content/uploads/2019/07/Keith-Crowley-Grizzly-Bears-03.jpg&#39;, &#39;https://img.theculturetrip.com/1440x807/wp-content/uploads/2018/01/carnivore-nature-wild-alaska-wildlife-grizzly-bear-861962.jpg&#39;, &#39;https://www.skinnymoose.com/outdoorsmorgasbord/files/2014/03/Grizzly-Bear-3.jpg&#39;, &#39;https://blog.humanesociety.org/wp-content/uploads/2020/07/grizzly-bear-iStock-647126690_369827.jpg&#39;, &#39;https://ewscripps.brightspotcdn.com/dims4/default/083faf0/2147483647/strip/true/crop/806x453+0+21/resize/1280x720!/quality/90/?url=https:%2F%2Fewscripps.brightspotcdn.com%2F00%2F7f%2F2489255d4d9ab8fc447f4b57ed66%2Fgrizzly-bear.jpg&#39;, &#39;https://www.lintelligencer.com/wp-content/uploads/2020/09/Alaska-Grizzly-kills-hunter-in-attack-at-national-park-Report.jpg&#39;, &#39;https://the-biggest.net/wp-content/uploads/2019/07/how-tall-was-the-biggest-grizzly-bear.jpg&#39;, &#39;https://wallsdesk.com/wp-content/uploads/2017/01/Grizzly-Bear-for-desktop-background.jpg&#39;, &#39;https://www.shetzers.com/wp-content/uploads/2017/06/R-Grizzly-bear-cub-standing-tall-704x880.jpg&#39;, &#39;https://4.bp.blogspot.com/-7YmqPws-fF4/WhI9SBZv5dI/AAAAAAAAKik/KR02M342yKYwifxV3MgJQJYu1vhydOhFQCLcBGAs/s1600/IMG_3113.JPG&#39;, &#39;https://resize.hswstatic.com/w_1024/gif/grizzly-center.jpg&#39;, &#39;https://c.wallhere.com/photos/80/58/brown_bear_face_beautiful_background-629567.jpg!d&#39;, &#39;https://buckrail.com/wp-content/uploads/2018/05/Grizzly-bears-are-a-popular-attraction-for-visitors.-Jackson-Hole-EcoTour-Adventures.jpg&#39;, &#39;https://gephardtdaily.com/wp-content/uploads/2015/08/11754872_1109393535742666_5103459483633495575_o.jpg&#39;, &#39;http://www.outdoorhub.com/wp-content/uploads/sites/2/2015/08/outdoorhub-yellowstone-grizzly-bear-kills-hiker-in-apparent-predatory-attack-2015-08-12_15-18-35.jpg&#39;, &#39;https://www.whistler.ca/sites/default/files/styles/crop_min_663/public/2019/Apr/page/main-images/25900/grizzly.jpg?itok=NGH8XPEe&#39;, &#39;https://d.ibtimes.co.uk/en/full/1462246/grizzly-bear.jpg&#39;, &#39;https://cdn.rbth.com/all/2016/10/07/grizzly_gettyimages-dv1620005_b.jpg&#39;, &#39;https://www.rmef.org/wp-content/uploads/2020/05/wyoming-grizzly-bear.jpg&#39;, &#39;https://images.fineartamerica.com/images/artworkimages/mediumlarge/2/standing-grizzly-bear-cub-in-the-evening-light-daryl-l-hunter.jpg&#39;, &#39;https://www.wintersexpress.com/files/2019/05/animal-bear-cute-162340.jpg&#39;, &#39;https://weneedfun.com/wp-content/uploads/Grizzly-Bear-Picture-4.jpg&#39;, &#39;https://intercontinentalcry.org/wp-content/uploads/2019/08/grizzly-bear1.jpg&#39;, &#39;http://calgaryguardian.com/wp-content/uploads/2017/05/142_1289.jpg&#39;, &#39;https://cdn.abcotvs.com/dip/images/492803_012715-ss-grizzly-bears-img.jpg?w=1600&#39;, &#39;http://www.publicdomainpictures.net/pictures/90000/velka/grizzly-bear-profile.jpg&#39;, &#39;https://wallsdesk.com/wp-content/uploads/2017/01/Grizzly-Bear-HD-Desktop.jpg&#39;, &#39;https://townsquare.media/site/101/files/2020/05/GrizzRS.jpg?w=1200&#39;, &#39;https://wallpapertag.com/wallpaper/full/e/b/8/437151-grizzly-bear-backgrounds-2560x1600-for-tablet.jpg&#39;, &#39;https://images.fineartamerica.com/images-medium-large-5/usa-alaska-grizzly-bear-cub-sits-brenda-tharp.jpg&#39;, &#39;https://external-preview.redd.it/bccjV-0WX40IgFdJ1FOy7_IE9nLPXR0wloCap7hXTSA.jpg?auto=webp&amp;s=a17fd3832e57032a5b44af94010a189e4e906ea6&#39;, &#39;https://defenders.org/sites/default/files/styles/meta_image/public/2019-04/grizzly_bear_sow_jim_peaco_nps_header.jpg?itok=vTdBffpn&#39;, &#39;https://outsider.com/wp-content/uploads/2020/08/grizzly-bear-hiker-glacier-national-park-video.png&#39;, &#39;https://i.cbc.ca/1.4174820.1506608673!/fileImage/httpImage/image.jpg_gen/derivatives/16x9_1180/grizzly-glares-at-viewer.jpg&#39;, &#39;https://ourplnt.com/wp-content/uploads/2020/12/grizzly-bear.jpg&#39;, &#39;https://spca.bc.ca/wp-content/uploads/WS2017_92846_Stephen-Lustig_Grizzly-Bear.jpg&#39;, &#39;https://braincharm.com/wp-content/uploads/2019/08/cropped-Grizzly-Bear-Bozeman-Grizzly-Montana-Bear-3483886.jpg&#39;, &#39;https://wallsdesk.com/wp-content/uploads/2017/01/Grizzly-Bear-Wallpapers-HD.jpg&#39;, &#39;https://cdn.britannica.com/19/186719-050-887A6F2C/Grizzly-bear-Rocky-Mountains-Wyoming.jpg&#39;, &#39;http://www.pbs.org/wnet/nature/files/2018/07/Bear133.jpg&#39;, &#39;http://1.bp.blogspot.com/-CoOIzMhLQUI/UHzVx6IxyVI/AAAAAAAAA-c/RHMhnAXXniU/s1600/Grizzly+Bear+Sleepy.jpg&#39;, &#39;http://www.photos-public-domain.com/wp-content/uploads/2012/03/grizzly-bear.jpg&#39;, &#39;http://img.huffingtonpost.com/asset/1910_1000/58c0a5fe1d000027007cd5c0.jpg&#39;, &#39;http://blog.theclymb.com/wp-content/uploads/2014/09/angry-grizzly-bear.jpg&#39;, &#39;http://s3.amazonaws.com/Photo_of_the_Day/system/uploads/photo/image/12388/sized_Grizzly_Bear_Cubs.jpg&#39;, &#39;https://www.unilad.co.uk/wp-content/uploads/2015/08/UNILAD-mom-grizzly8.jpg&#39;, &#39;https://www.hoglezoo.org/wp-content/themes/hoglezoo_new/images/animal_finder/491283162GrizzlyBear.jpg&#39;, &#39;http://dawnsbrain.com/wp-content/uploads/2014/11/grizzly-bear-6.jpg&#39;, &#39;https://4.bp.blogspot.com/-2_RuGHXGm0Y/UQW3vwH37JI/AAAAAAAAEzc/Mt1seFmFrog/s1600/Grizzly-Bear-.jpg&#39;, &#39;https://i.ytimg.com/vi/zzJbkmOVgMI/maxresdefault.jpg&#39;, &#39;https://cdn.abcotvs.com/dip/images/1407687_062916-wtvd-file-grizzly-bear-img.jpg?w=1280&amp;r=16:9&#39;, &#39;https://wallsdesk.com/wp-content/uploads/2017/01/Grizzly-Bear-Background-.jpg&#39;, &#39;https://devdenverzoo.com/wp-content/uploads/2018/09/Grizzly-Bear_04.jpg&#39;, &#39;http://www.montanaoutdoor.com/wp-content/uploads/2018/02/Grizzly-King-FEAT.jpg&#39;, &#39;https://outsider.com/wp-content/uploads/2020/06/Grizzly-Bear-Unsplash.png&#39;, &#39;http://www.wallpapergeeks.com/wp-content/uploads/2014/03/Grizzly-Bear-Near-McNeil-River-Alaska.jpg&#39;, &#39;https://outsider.com/wp-content/uploads/2020/09/two-grizzly-bears-brutally-fight-over-fish-in-alaska-1170x702.png&#39;, &#39;https://lh3.googleusercontent.com/proxy/XiCQkPJB2tAag16S3wO0yNJnMQXTpTzEOZw-eWQKr6nOaJhlqeJzHrDhPowuHfLQREfxRPAN9kjW-6KrwU8HUeBesZsH-nLKkYV2lr5NE5sXcRy5xwMqv9cbYYYNpEJnhJs=w1200-h630-p-k-no-nu&#39;, &#39;https://cottagelife.com/wp-content/uploads/2020/07/shutterstock_546562111.jpg&#39;, &#39;https://images.fineartamerica.com/images-medium-large-5/grizzly-bear-6-thomas-woolworth.jpg&#39;, &#39;https://redtri.com/wp-content/uploads/2014/07/grizzly-bear-2.jpg&#39;, &#39;https://images.fineartamerica.com/images/artworkimages/mediumlarge/1/grizzly-bear-twenty-two-north-photography.jpg&#39;, &#39;https://a57.foxnews.com/static.foxnews.com/foxnews.com/content/uploads/2019/06/931/524/iStock-grizzly-bear-and-cubs.jpg?ve=1&amp;tl=1&#39;, &#39;http://www.alaskaphotoworld.com/alaska365/wp-content/uploads/2013/06/Grizzly-Bear-Yukon-Alaska-c-Laurent-Dick-Wild-Alaska-Travel(pp_w1060_h657).jpg&#39;, &#39;http://mediad.publicbroadcasting.net/p/kufm/files/styles/x_large/public/201712/grizzly-bear-snow_pd.jpg&#39;, &#39;https://i.ytimg.com/vi/jR_U9AoAtJE/maxresdefault.jpg&#39;, &#39;http://www.marketwire.com/library/MwGo/2017/3/7/11G132324/Images/3_Bears_Approach_by_Jim_Lawrence-4f4d16b51311853286570ff0d3022a81.jpg&#39;, &#39;http://2.bp.blogspot.com/-e6e4YOB-K9I/UQEz1wt72TI/AAAAAAAAC0s/YZUgPnIwTks/s640/Grizzly+bear.jpg&#39;, &#39;https://media.spokesman.com/photos/2018/08/18/Grizzly_Bears_Montana.JPG.jpg&#39;, &#39;https://s3-assets.eastidahonews.com/wp-content/uploads/2015/10/03030033/0ad8593723.jpg&#39;, &#39;https://www.mtpr.org/sites/kufm/files/styles/x_large/public/201512/grizzly-bear_02-PD.jpg&#39;, &#39;https://www.indianz.com/News/2017/01/12/grizzlybearyellowstoneitingchiang.jpg&#39;, &#39;https://www.alloutdoor.com/wp-content/uploads/2019/08/Grizzly_Bear_Ursus_arctos_ssp..jpg&#39;, &#39;https://www.getwest.ca/site/assets/files/1049/uchuck-grizzly-bear.jpg&#39;, &#39;http://zooidaho.org/wp-content/uploads/2016/02/shonibear.jpg&#39;, &#39;http://www.cs.columbia.edu/~sedwards/photos/kyle200604/20060412-7108%20Grizzly%20bear.jpg&#39;, &#39;https://cdn.suwalls.com/wallpapers/animals/grizzly-bear-46852-1920x1200.jpg&#39;, &#39;http://wildlifewaystation.org/images/content/animals/Bear-Grizzly-2.JPG&#39;, &#39;http://2.bp.blogspot.com/-NjMTuklENdE/UHzVv_8dIxI/AAAAAAAAA-U/tNBsQDn8kFI/s1600/Grizzly+Bear+Pic.jpg&#39;, &#39;https://live.staticflickr.com/8078/8277276763_b4d8cff511_b.jpg&#39;, &#39;http://images.fineartamerica.com/images-medium-large/1-grizzly-bear-yukon-robert-postma.jpg&#39;, &#39;https://www.yourhikeguide.com/wp-content/uploads/scandinavian_wildlife_park_26-26995.jpg&#39;, &#39;http://bloximages.newyork1.vip.townnews.com/stltoday.com/content/tncms/assets/v3/editorial/b/99/b99156d5-0ad8-5b5c-a98a-d805c9a5d6bb/57eaaca236063.image.jpg?resize=1200%2C1369&#39;, &#39;http://www.tweedsmuirparklodge.com/assets/Uploads/_resampled/ScaleWidthWzEyMDBd/Grizzly-bear-with-fish-at-Tweedsmuir.jpg&#39;, &#39;https://1471793142.rsc.cdn77.org/data/images/full/27318/palm-beach-zoo-debuts-grizzly-bear-cubs.jpg&#39;, &#39;https://media.salon.com/2014/03/Grizzly-Bear.jpg&#39;, &#39;https://d3d0lqu00lnqvz.cloudfront.net/media/media/897b2e5d-6d4c-40fa-bbe8-6829455747e2.jpg&#39;, &#39;https://www.trbimg.com/img-5966ab20/turbine/ct-yellowstone-grizzly-scarface-killed-20170712&#39;, &#39;https://www.wyomingpublicmedia.org/sites/wpr/files/styles/x_large/public/202005/grizzly_and_cubs.png&#39;, &#39;https://cmkt-image-prd.freetls.fastly.net/0.1.0/ps/5129718/910/1365/m2/fpnw/wm1/mrkxj2x8a849nf6stvtxuofhydmjnf7slsysexqsuhadz3xaxi6ze1soz8huzzsg-.jpg?1538388129&amp;s=48c555641b232ab7c64b9c76b97a67bc&#39;, &#39;http://www.my-photo-blog.com/wp-content/uploads/2017/07/Grizzly-Bear-Nursing.jpg&#39;, &#39;https://i0.wp.com/pgdailynews.ca/wp-content/uploads/2017/12/Grizzly.jpg&#39;, &#39;https://www.naturalworldsafaris.com/~/media/images/blogs/2018/01/grizzly-bear-hunting-ban/mmr_2015-08-06_7055.jpg&#39;, &#39;http://i.huffpost.com/gen/1747973/images/o-GRIZZLY-BEAR-RAINFOREST-facebook.jpg&#39;, &#39;https://bloximages.chicago2.vip.townnews.com/trib.com/content/tncms/assets/v3/editorial/b/6c/b6c62d25-f84e-51b0-95ae-223fcd943312/57cc8795a69a1.image.jpg?resize=1200%2C800&#39;, &#39;https://www.readersdigest.ca/wp-content/uploads/2018/09/grizzly-bear-cub.jpg&#39;, &#39;https://images.fineartamerica.com/images/artworkimages/mediumlarge/1/grizzly-bear-judy-vincent.jpg&#39;, &#39;http://2.bp.blogspot.com/-9JAlJayP2XU/UQN3Wffpa8I/AAAAAAAAFbs/eMP5BcuLetc/w1200-h630-p-k-nu/Grizzly+Bear-2013-0pic-02.jpg&#39;, &#39;https://townsquare.media/site/99/files/2018/12/Bear.jpg?w=1200&amp;h=0&amp;zc=1&amp;s=0&amp;a=t&amp;q=89&#39;, &#39;http://www.hickerphoto.com/images/1024/alert-grizzly-bear-56745.jpg&#39;, &#39;https://s3.amazonaws.com/images.gearjunkie.com/uploads/2015/07/Grizzly-Bear.jpg&#39;, &#39;https://wildlifefriendly.org/wp-content/uploads/2015/09/Grizzly.jpg&#39;, &#39;https://www.thefencepost.com/wp-content/uploads/sites/12/2018/08/grizzlies-tsln-081118-1240x828.jpg&#39;, &#39;https://www.expeditionsalaska.com/wp-content/uploads/2017/04/16-brown-bear-photos-2377.jpg&#39;, &#39;https://wallsdesk.com/wp-content/uploads/2017/01/Grizzly-Bear-Download.jpg&#39;, &#39;http://4.bp.blogspot.com/-QmwOWiR3ydM/USOj4DBjZSI/AAAAAAAAFBM/bvX4-MmH-tY/s1600/Grizzly_Bear_Info_Images+08.jpg&#39;, &#39;https://www.scitechnow.org/wp-content/uploads/2015/05/Ep27_Grizzly-Bears.jpg&#39;, &#39;https://whatthingsweigh.com/wp-content/uploads/grizzly_bear.jpg&#39;, &#39;https://www.huntingillustrated.com/wp-content/uploads/2014/03/Depositphotos_93855856_xl-2015-1-scaled.jpg&#39;, &#39;https://www.wildnatureimages.com/images/xl/080914-113-Grizzly-Bear.jpg&#39;, &#39;http://media1.s-nbcnews.com/j/newscms/2017_07/1905761/170217-grizzly-alaska-mn-1130_e938eae58cdfe33a8c5bd9af07356dd9.nbcnews-ux-2880-1000.jpg&#39;, &#39;https://i.ytimg.com/vi/-klfQbvz0Nw/maxresdefault.jpg&#39;, &#39;https://s1.ibtimes.com/sites/www.ibtimes.com/files/styles/embed/public/2017/11/20/grizzly-bear.jpg&#39;, &#39;https://www.canadatravelspecialists.com/media/3362/bear-catching-salmon.jpeg&#39;, &#39;https://www.legendsofamerica.com/wp-content/uploads/2018/07/Grizzlybear-269x300.png&#39;, &#39;https://farm8.staticflickr.com/7026/6843888709_b6136360c8_z.jpg&#39;, &#39;https://i.cbc.ca/1.4775731.1533917302!/fileImage/httpImage/image.jpg_gen/derivatives/original_780/eyes-of-the-grizzly.jpg&#39;, &#39;http://mediad.publicbroadcasting.net/p/kufm/files/styles/x_large/public/201606/grizzly_PD.jpg&#39;, &#39;https://i1.wp.com/backcountryjourneys.com/wp-content/uploads/2015/12/bigstock-Grizzly-Bear-9532331.jpg&#39;, &#39;https://gohunt-assets-us-west-2.s3.amazonaws.com/washington-grizzly-bear-og.jpg&#39;, &#39;https://www.expeditionsalaska.com/wp-content/uploads/2016/09/09_SEP3502.jpg&#39;, &#39;https://www.shared.com/content/images/2017/08/Ordelheide_20160803-_D5A7701_bearfamily.jpg&#39;, &#39;https://detroitzoo.org/wp-content/uploads/2015/08/Grizzly-Boys.jpg&#39;, &#39;https://filson-life.imgix.net/2020/03/grizzly-bear-reintroduction-1.jpg?fit=scale&amp;fm=pjpg&amp;h=573&amp;ixlib=php-1.2.1&amp;w=860&amp;wpsize=entry-main&#39;, &#39;https://cdn0.wideopenspaces.com/wp-content/uploads/2020/04/whatdogrizzlybearseat4-scaled.jpg&#39;, &#39;https://s3-assets.eastidahonews.com/wp-content/uploads/2019/05/06175149/grizzly-bear-860x571.jpg&#39;, &#39;https://cdn.s3-media.wbal.com/Media/2017/03/22/ac89e9aa-1e3f-4f88-bef3-aeba490d0059/original.jpg&#39;, &#39;https://upload.wikimedia.org/wikipedia/commons/thumb/a/a9/GrizzlyBearJeanBeaufort.jpg/1200px-GrizzlyBearJeanBeaufort.jpg&#39;, &#39;https://gray-kmvt-prod.cdn.arcpublishing.com/resizer/XDqt0Wh9pw0QyVfKY5V7d77a44o=/1200x675/smart/cloudfront-us-east-1.images.arcpublishing.com/gray/XDDLIRAFIRMF7KDSS56OJSWEIQ.jpg&#39;, &#39;https://miro.medium.com/max/9504/1*1cfuPs8clxIj8f_CDH4sYw.jpeg&#39;, &#39;https://gohunt-assets-us-west-2.s3.amazonaws.com/Idaho-grizzly-bear-hunt-approved-og.jpg&#39;, &#39;https://bloximages.chicago2.vip.townnews.com/ravallirepublic.com/content/tncms/assets/v3/editorial/9/05/90555037-3848-5130-a254-aca92323e46f/5c87f956c8b30.image.jpg?resize=1200%2C755&#39;, &#39;https://media.spokesman.com/photos/2017/11/30/Yellowstone_Grizzlies.JPG.jpg&#39;, &#39;https://www.wpxi.com/resizer/e8abHzJalKpN_CfzbIS07FZBOig=/1200x628/d1hfln2sfez66z.cloudfront.net/09-24-2020/t_82d50577f56b4e2fa00191d8f33c12fe_name_Moose_hunter_mauled__killed_by_grizzly_bear_in_Alaska_Poster.jpg&#39;, &#39;https://bloximages.chicago2.vip.townnews.com/helenair.com/content/tncms/assets/v3/editorial/6/45/645660ec-59b9-58a0-a7d7-213e342af246/5a02181673916.image.jpg&#39;, &#39;https://i2.wp.com/nypost.com/wp-content/uploads/sites/2/2020/09/grizzly-bear-89.jpg?quality=90&amp;strip=all&amp;ssl=1&#39;, &#39;https://www.grandviewoutdoors.com/uploads/images/_facebook/Grizzly.jpg&#39;, &#39;https://i1.wp.com/nypost.com/wp-content/uploads/sites/2/2020/05/grizzly-bear-57.jpg?quality=90&amp;strip=all&amp;ssl=1&#39;, &#39;https://images.fineartamerica.com/images-medium-large-5/grizzly-bear-with-yearling-cub-matthias-breiter.jpg&#39;, &#39;https://davidsuzuki.org/wp-content/uploads/2017/04/grizzly-bears-alaska-wildlife-sanctuary-whittier.jpg&#39;, &#39;https://www.campbellriver.travel/media/2020/02/bear-ears1.jpg&#39;, &#39;https://3.bp.blogspot.com/-ERmaouEbCOw/ThYPiIH9ACI/AAAAAAAAB4E/AzbPHNqSMxE/s1600/Feeling_Grizzly-1600x1200.jpg&#39;, &#39;http://www.famouscutouts.com/images/detailed/0/675-Bear.jpg&#39;, &#39;https://cdn.apartmenttherapy.info/image/upload/f_auto,q_auto:eco,c_fill,g_auto,w_1500/at/news-culture/2019-11/grizzly-bear&#39;, &#39;http://1.bp.blogspot.com/-wzfvrOdkAao/USOjE-6mdDI/AAAAAAAAFAg/GRopRcG-p1k/s1600/Grizzly_Bear_Info_Images+01.jpg&#39;, &#39;http://static.independent.co.uk/s3fs-public/thumbnails/image/2016/06/30/08/yellowstone-grizzly-bear-.jpg&#39;, &#39;http://bearlegend.com/wp-content/uploads/2012/04/5004711979_d7bbce11c4_o.jpg&#39;, &#39;https://www.tsln.com/wp-content/uploads/2018/10/bears-tsln-101318-1-1240x823.jpg&#39;, &#39;https://i1.wp.com/www.animalprotectionparty.ca/wp-content/uploads/2017/10/grizzly-bear-report.jpg?fit=1072%2C712&amp;ssl=1&#39;, &#39;https://gohunt-assets-us-west-2.s3.amazonaws.com/grizzly-bear-og_0.jpg&#39;, &#39;http://i.huffpost.com/gen/1390652/images/o-GRIZZLY-BEAR-ROAR-facebook.jpg&#39;, &#39;https://wallsdesk.com/wp-content/uploads/2017/01/Grizzly-Bear-HD.jpg&#39;, &#39;https://thenarwhal.ca/wp-content/uploads/2018/04/BC-grizzly-bear.jpg&#39;, &#39;https://www.vmcdn.ca/f/files/via/import/2018/07/08143100_grizzly-bear.jpg;w=960&#39;, &#39;https://wyo4news.com/wp-content/uploads/2020/07/grizzly-bear.jpg&#39;, &#39;https://cdn.shopify.com/s/files/1/1520/0394/products/Grizzly_bear.jpg?v=1541529305&#39;, &#39;https://bozone.com/site/wp-content/uploads/2019/03/GRIZZLY.jpeg&#39;, &#39;http://www.news1130.com/wp-content/blogs.dir/sites/9/2015/09/17/iStock_000010656016_Double-e1442507974878.jpg&#39;, &#39;http://static-21.sinclairstoryline.com/resources/media/6078265b-815a-4172-a17f-67f94d69e53c-large16x9_ImportedfromLakana.jpg?1514431909725&#39;, &#39;https://4.bp.blogspot.com/-HNxOANqzIwQ/Un_rDbUxCGI/AAAAAAAABUc/CpX9FRsAdLA/s1600/Grizzly_Bear_2.jpg&#39;, &#39;https://cdn4.creativecirclemedia.com/powell/original/20190926-083657-Griz.jpg&#39;, &#39;https://tetonvalleylodge.com/wp-content/uploads/2015/04/grizzly-bear-idaho.jpg&#39;, &#39;https://idahobusinessreview.com/files/2018/08/grizzly-bear-scaled.jpg&#39;, &#39;https://cdn0.wideopenspaces.com/wp-content/uploads/2017/08/grizzly.jpg&#39;, &#39;https://holidayarchitects.co.uk/canada-holidays/wp-content/uploads/sites/7/Grizzly-bear-3-CRWW.jpg&#39;, &#39;https://imgc.allpostersimages.com/img/print/u-g-PZLADY0.jpg?w=338&amp;h=450&#39;, &#39;http://1.bp.blogspot.com/-422rK0Kje1E/UQW3yELFQeI/AAAAAAAAEzs/Rcg4Gniz4rU/s1600/Grizzly-Bear-2.jpg&#39;, &#39;https://gohunt-assets-us-west-2.s3.amazonaws.com/Grizzly-bear-protections-west-OG.jpg&#39;, &#39;https://cdnph.upi.com/sv/ph/og/upi/9261403133345/2014/1/f6484c26a086306575f2eabf184d2d11/v1.5/Conservationists-push-to-triple-Americas-grizzly-bear-population.jpg&#39;, &#39;https://www.the-sun.com/wp-content/uploads/sites/6/2020/09/NINTCHDBPICT000512282491.jpg?strip=all&amp;quality=100&amp;w=1200&amp;h=800&amp;crop=1&#39;, &#39;https://www.wyofile.com/wp-content/uploads/2013/09/blondie-the-griz2_Jackie-Skaggs_June-2011.jpg&#39;] Images downloaded. black bear: Got 278 image URLs. Downloading... urls = [&#39;https://scx2.b-cdn.net/gfx/news/hires/2019/blackbear.jpg&#39;, &#39;https://www.seacoastonline.com/storyimage/SO/20190730/NEWS/190739992/AR/0/AR-190739992.jpg&#39;, &#39;https://www.theintell.com/storyimage/PA/20190610/NEWS/190619908/AR/0/AR-190619908.jpg&#39;, &#39;https://www.enr.gov.nt.ca/sites/enr/files/black_bear_banner.jpg&#39;, &#39;http://justfunfacts.com/wp-content/uploads/2017/02/american-black-bear-2.jpg&#39;, &#39;https://www.gannett-cdn.com/-mm-/870435c5930644f2716846ecf8ba7354bdf4dead/c=0-414-862-901/local/-/media/2018/07/09/Westchester/Westchester/636667658911415885-Armonk-bear-3.jpg?width=3200&amp;height=1680&amp;fit=crop&#39;, &#39;https://wallup.net/wp-content/uploads/2019/09/719345-baribal-black-bear-bear-muzzle-eyes-predator.jpg&#39;, &#39;https://www.visitmt.com/binaries/content/gallery/MTOT/responsive/hero-f/dec-2014/blackbear_subjectmatterlandinghero.jpg&#39;, &#39;https://d3i3l3kraiqpym.cloudfront.net/wp-content/uploads/2016/05/26232920/12079543_847437148710024_685610861999970941_n.jpg&#39;, &#39;http://www.adirondackexplorer.org/wp-content/uploads/2016/12/17-Black-bear-Raquette.jpg&#39;, &#39;https://static1.pointsinfocus.com/2017/12/black-bears-of-revillagigedo-island-ketchikan-alaska/Fat-Bear.jpg&#39;, &#39;https://outsider.com/wp-content/uploads/2020/10/black-bear-encounter-how-to-prevent-survive-attack.jpg&#39;, &#39;https://nypost.com/wp-content/uploads/sites/2/2014/10/black-bear-cub.jpg?quality=90&amp;strip=all&amp;w=1200&#39;, &#39;http://www.stgeorgeutah.com/wp-content/uploads/2015/11/lynn_11-22-2011_black_bear_1.jpg&#39;, &#39;http://bearsmartdurango.org/wp-content/uploads/2013/06/100_0642.jpg&#39;, &#39;https://alaskashoreexcursions.com/media/ecom/prodxl/Baby-Black-Bear.JPG&#39;, &#39;https://www.fascinationwildlife.com/wp-content/uploads/2018/11/TON6447_DxO.jpg&#39;, &#39;http://www.canadianrockies.net/wp-content/uploads/2012/03/blb0389_bigblackbear.jpg&#39;, &#39;https://i.cbc.ca/1.3267259.1444652249!/fileImage/httpImage/image.jpg_gen/derivatives/16x9_620/black-bear.jpg&#39;, &#39;https://binderparkzoo.org/wp-content/uploads/2017/10/black-bear-5-1024x683.jpg&#39;, &#39;http://www.camelcitydispatch.com/wp-content/uploads/2013/05/black-bear-stting-face-on.jpg&#39;, &#39;https://www.huntingnewfoundlandlabrador.com/-/media/marquees/hunting/hunting-species/black-bear/black-bear-main-header.jpg?mh=960&amp;mw=1280&amp;hash=935A53A530E3F07AFB9DC4FF03D08C8B103FD601&#39;, &#39;https://www.gofingerlakes.org/wp-content/uploads/Ursus_americanus_Simon-Pierre-Barrette.CC-BY-SA-004-1.jpg&#39;, &#39;http://elelur.com/data_images/mammals/asian-black-bear/asian-black-bear-04.jpg&#39;, &#39;https://www.cullmantribune.com/wp-content/uploads/2019/08/Black-bear-mother-and-cubs-1024x835.jpg&#39;, &#39;http://3.bp.blogspot.com/_1N1pZVb1_C4/TUCDSYH2XuI/AAAAAAAABU4/N-8QVjyjpiA/s1600/bear_black.jpg&#39;, &#39;http://naturalbridgezoo.com/wp-content/uploads/2017/05/BB1-1.jpg&#39;, &#39;https://live.staticflickr.com/3223/2762479597_07c4b2f908_b.jpg&#39;, &#39;http://grizzlybearwatching.com/wp-content/uploads/2017/03/BlackBear1-1500x998.jpg&#39;, &#39;https://en.reepark.dk/media/1613/_n011753.jpg?width=1024&#39;, &#39;https://render.fineartamerica.com/images/rendered/default/print/8.000/7.000/break/images/artworkimages/medium/2/bear-stare-jerry-lofaro.jpg&#39;, &#39;http://cdn-image.travelandleisure.com/sites/default/files/styles/1600x1000/public/1522685410/black-bear-BEAR418.jpg?itok=qmoXuFRx&#39;, &#39;https://exploreoakridge.com/wp-content/uploads/2019/10/American-Black-Bear-photo-by-Chris-Norcott.jpg&#39;, &#39;https://cottagelife.com/wp-content/uploads/2017/07/shutterstock_503744119.jpg&#39;, &#39;https://i0.wp.com/imagineourflorida.org/wp-content/uploads/2016/09/Florida_Black_Bear_square_Kon_Studio.jpg?fit=800%2C800&amp;ssl=1&#39;, &#39;https://2.bp.blogspot.com/-bMCoR7-d0SU/TmstJPh8sOI/AAAAAAAAAPo/4J5H-Mm2qEM/s1600/black-bear-wallpaper-11-755660.jpg&#39;, &#39;http://infotel.ca/news/medialibrary/image/orig-mediaitemid22167-3862.jpg&#39;, &#39;http://www.sott.net/image/s13/261520/full/Black_bear.jpg&#39;, &#39;https://downeast.com/wp-content/uploads/2014/02/Bear4.jpg&#39;, &#39;https://visitadirondacks.com/sites/default/files/images/adirondack-black-bear.jpg&#39;, &#39;https://www.vpr.org/sites/vpr/files/styles/x_large/public/202007/black-bear-fish-wildlife-dept-Tom-Rogers-2013.png&#39;, &#39;http://www.mountaincountrycabinrentals.com/wp-content/uploads/2014/10/Closeup-of-a-black-bear.jpg&#39;, &#39;https://nypost.com/wp-content/uploads/sites/2/2020/08/black-bear-81.jpg?quality=90&amp;strip=all&amp;w=1200&#39;, &#39;https://bear.org/wp-content/uploads/2008/02/20130607_Bow-copy.jpg&#39;, &#39;https://st.focusedcollection.com/14026668/i/1800/focused_181901682-stock-photo-american-black-bear-ursus-americanus.jpg&#39;, &#39;https://www.gulflive.com/resizer/XxMMGfEvOQQAVOEKfieknpQOIv8=/1280x0/smart/advancelocal-adapter-image-uploads.s3.amazonaws.com/image.gulflive.com/home/gulf-media/width2048/img/news_impact/photo/bears-threatened-fbdfb579fa67c166.jpg&#39;, &#39;https://wildlife.utah.gov/news_photos/11-18-19_black-bear-in-grass.jpg&#39;, &#39;https://www.piecebypiece.ca/wp-content/uploads/2018/05/165-Black-Bear-Cub.jpg&#39;, &#39;https://www.hdwallpapers.in/download/black_bear_hd_animals-HD.jpg&#39;, &#39;https://www.greatswamp.org/wp-content/uploads/2016/01/black-bear.jpg&#39;, &#39;http://getwallpapers.com/wallpaper/full/a/8/4/1452654-wallpaper-black-bear-pictures-2560x1600-for-4k.jpg&#39;, &#39;https://beartrackoutfitters.com/wp-content/uploads/2018/09/bear.jpg&#39;, &#39;http://justfunfacts.com/wp-content/uploads/2017/02/american-black-bear-smell.jpg&#39;, &#39;http://upload.wikimedia.org/wikipedia/commons/1/18/Black_Bear_7.jpg&#39;, &#39;http://snowbrains.com/wp-content/uploads/2015/08/American-Black-Bear-jpg.jpg&#39;, &#39;https://vignette.wikia.nocookie.net/parody/images/5/5a/11775722235_19bb44c6e7_b.jpg/revision/latest?cb=20161008190514&#39;, &#39;https://www.wildlifecenter.org/sites/default/files/patient_images/DSCN2925.JPG&#39;, &#39;https://media-cdn.wehco.com/img/photos/2020/12/11/blackbearnoppers06cmykoriginal1483610356_t1070_h5b279ad6a60bb8d6261090d0367921ea9d3e0cc8.jpg&#39;, &#39;https://www.gannett-cdn.com/-mm-/ba9293e2ff57f90c5ea896bbb7fb36126f38dbc9/c=0-134-3468-2093/local/-/media/2016/06/28/CNYGroup/Elmira/636027114617396897-black-bear.jpg?width=3200&amp;height=1680&amp;fit=crop&#39;, &#39;https://bearexpert.com/wp-content/uploads/2019/10/american-black-bear.jpg&#39;, &#39;https://cdn2.outdoorphotographer.com/gallery/7522/leahed_100307_589944_290c530a74_28f7de1b95-leahed-dsc_9774.jpg&#39;, &#39;https://onncg8dr7k-flywheel.netdna-ssl.com/wp-content/uploads/2020/10/GettyImages-1195788516.jpg&#39;, &#39;https://www.gannett-cdn.com/-mm-/cd26c8713e884a8483a3eb4efd7e9b47f526e46d/c=0-264-4620-2863/local/-/media/Bridgewater/2015/01/05/B9315749966Z.1_20150105153333_000_GUS9JJHMR.1-0.jpg?width=3200&amp;height=1680&amp;fit=crop&#39;, &#39;https://www.mlive.com/resizer/Klh1maBtQ2BXs9MJ79W4mVfcL8k=/1280x0/smart/advancelocal-adapter-image-uploads.s3.amazonaws.com/image.mlive.com/home/mlive-media/width2048/img/outdoors_impact/photo/black-bears-new-exhibit-at-binder-park-zoo-07-a88a34fbe0690fea.jpg&#39;, &#39;https://texnat.tamu.edu/files/2018/07/IMG_1573.jpg&#39;, &#39;https://photos1.blogger.com/blogger/5712/2802/1600/DSC01502.jpg&#39;, &#39;https://bloximages.newyork1.vip.townnews.com/pilotonline.com/content/tncms/assets/v3/editorial/e/d5/ed52c12b-4e68-5024-a886-f0fc147bf94e/563d906095138.image.jpg&#39;, &#39;https://img1-azrcdn.newser.com/image/1255962-12-20190904134100.jpeg&#39;, &#39;https://www.gravel.org/wp-content/uploads/2015/10/Black-Bear.jpg&#39;, &#39;https://3.bp.blogspot.com/-nFt10gfJrzM/UDKIjeW21LI/AAAAAAAADfA/uomt-SjA-Sc/s1600/IMG_5635.jpg&#39;, &#39;https://www.crozetgazette.com/wp-content/uploads/2018/06/iStock-153562011.jpg&#39;, &#39;https://images.thestar.com/-S-RKsYxNaEcCX0LRaqhNeLpMAs=/1200x932/smart/filters:cb(1565190981014)/https://www.thestar.com/content/dam/thestar/vancouver/2019/08/06/child-injured-by-bear-bite-at-greater-vancouver-zoo-officials-say/blackbear.jpg&#39;, &#39;https://socalguidedhunts.com/wp-content/uploads/2013/09/guided-black-bear-hunts.jpg&#39;, &#39;https://seniors101.ca/wp-content/uploads/2015/08/Black-bear-cub.jpg&#39;, &#39;https://www.koamnewsnow.com/content/uploads/2020/05/pixabay-black-bear.jpg&#39;, &#39;https://www.gannett-cdn.com/-mm-/40756a948d5a0edcc7ce6d0e16b133540995c9c8/c=0-138-1997-1266/local/-/media/2017/03/06/JacksonMS/JacksonMS/636243918786987260-0307bear01.jpg?width=3200&amp;height=1680&amp;fit=crop&#39;, &#39;https://www.wallpaperflare.com/static/805/363/779/bear-black-bear-forest-black-wallpaper.jpg&#39;, &#39;https://img.huffingtonpost.com/asset/5d71a56a2500007a1205d0b4.jpeg?cache=i3bilfyydx&amp;ops=1778_1000&#39;, &#39;https://images.fineartamerica.com/images/artworkimages/mediumlarge/1/one-big-black-bear-john-rowe.jpg&#39;, &#39;http://i.huffpost.com/gen/1105509/images/o-MARYLAND-BLACK-BEAR-facebook.jpg&#39;, &#39;http://justfunfacts.com/wp-content/uploads/2017/02/black-bear.jpg&#39;, &#39;https://blog.humanesociety.org/wp-content/uploads/2016/06/BLACK-BEAR-ISTOCK_000046186676_288801-1220x813.jpg&#39;, &#39;https://aldf.org/wp-content/uploads/2018/05/blackbear-121274561-16x9.jpg&#39;, &#39;https://www.timberon.org/wp-content/uploads/Young_black_bear.jpg&#39;, &#39;https://www.outsideonline.com/sites/default/files/styles/img_600x600/public/2019/06/28/black-bear-grazes_s.jpg?itok=ZaqoTZKg&#39;, &#39;https://a-z-animals.com/media/Asiatic-black-bear.jpg&#39;, &#39;https://www.worldlandtrust.org/wp-content/uploads/2019/07/youung-black-bear.jpg&#39;, &#39;https://images.fineartamerica.com/images/artworkimages/mediumlarge/1/bear-family-timothy-flanigan.jpg&#39;, &#39;https://nhpbs.org/wild/images/blackbearusfw2.jpg&#39;, &#39;https://a57.foxnews.com/a57.foxnews.com/static.foxnews.com/foxnews.com/content/uploads/2018/09/640/320/1862/1048/Black20Bear20iStock.jpg?ve=1&amp;tl=1?ve=1&amp;tl=1&#39;, &#39;https://www.gannett-cdn.com/presto/2019/05/08/PASH/9be97cd2-c85d-4eb6-a503-68b17b29ce94-NC_Bear_study_NO27_resting_after_work_up.jpg?crop=639,359,x0,y23&amp;width=3200&amp;height=1680&amp;fit=bounds&#39;, &#39;https://abdnews.org/wp-content/uploads/2017/04/Authorities-Rescue-Black-Bear-Cubs-After-Mother-Hit-By-Truck.jpg&#39;, &#39;http://blog.healthywildlife.ca/wp-content/uploads/2016/07/black-bear-hg-1-of-1.jpg&#39;, &#39;https://www.vmcdn.ca/f/files/via/import/2019/10/01132841_black-bear.jpg;w=700;h=347;mode=crop&#39;, &#39;https://advancelocal-adapter-image-uploads.s3.amazonaws.com/image.pennlive.com/home/penn-media/width2048/img/pa-sportsman/photo/23770296-standard.jpg&#39;, &#39;http://wildlife.org/wp-content/uploads/2015/01/Florida-Blackbear-via-Flickr-credit-Rich-Turner-940.jpg&#39;, &#39;http://snowbrains.com/wp-content/uploads/2015/08/connie-lemperle-black-bear-web.jpg&#39;, &#39;https://detroit.cbslocal.com/wp-content/uploads/sites/15909782/2015/05/black-bear-forest.jpg?w=1500&#39;, &#39;https://www.gannett-cdn.com/-mm-/4f6c5cb86bdd5d6da988b998c98d5233eb4312d0/c=0-250-4921-3030/local/-/media/2017/12/30/Tallahassee/Tallahassee/636502285489982021-Black-Bears.jpg?width=3200&amp;height=1680&amp;fit=crop&#39;, &#39;https://www.poconorecord.com/storyimage/PR/20161114/NEWS/161119826/AR/0/AR-161119826.jpg&#39;, &#39;https://floridablackbearscenicbyway.org/wp-content/uploads/2020/02/2411420-1920x1080-DesktopNexus.com_.jpg&#39;, &#39;http://www.wildernesscollege.com/images/blkbr-face.jpg&#39;, &#39;https://www.trbimg.com/img-557b8359/turbine/ct-indiana-black-bear-20150612&#39;, &#39;http://wiseaboutbears.org/wp-content/uploads/2014/04/img034.jpg&#39;, &#39;https://img.thrfun.com/img/214/282/bears_tx3.jpg&#39;, &#39;http://www.sciencebuzz.org/sites/default/files/images/Black_bear.jpg&#39;, &#39;http://i.huffpost.com/gen/1669786/images/o-BLACK-BEAR-CANADA-facebook.jpg&#39;, &#39;https://images.wallpaperscraft.com/image/bear_black_bear_forest_113045_800x1200.jpg&#39;, &#39;https://storage.googleapis.com/afs-prod/media/media:c1a9aa6b7050465d83977305953495aa/3000.jpeg&#39;, &#39;https://www.wildnatureimages.com/images/xl/140729-016-Black-Bear-at-Anan-Wildlife-Observatory.jpg&#39;, &#39;https://brevardzoo.org/wp-content/uploads/2019/05/bearsidebar.jpg&#39;, &#39;https://canadaintherough.com/wp-content/uploads/2020/06/blackbear.jpg&#39;, &#39;https://i1.wp.com/albertawild.com/wp-content/uploads/2017/02/bear-1698.jpg?fit=1698%2C1132&#39;, &#39;http://mediad.publicbroadcasting.net/p/upr/files/styles/x_large/public/201612/black-bear.jpg&#39;, &#39;http://www.encyclopediaofalabama.org/images/m-9033.jpg&#39;, &#39;http://bloximages.newyork1.vip.townnews.com/pilotonline.com/content/tncms/assets/v3/editorial/8/47/84743c51-975b-555f-9f30-1234790e97a8/563d905fe2c27.image.jpg?resize=1200%2C852&#39;, &#39;http://bearlegend.com/wp-content/uploads/2012/04/2641024724_d12e4afcb9_o-361.jpg&#39;, &#39;https://images.dailyhive.com/20190916163711/North-Shore-Black-Bear-Society.jpg&#39;, &#39;https://s29027.pcdn.co/wp-content/uploads/2019/08/Black-Bear-mating-Tekiela-TEK1811.jpg&#39;, &#39;https://someinterestingfacts.net/wp-content/uploads/2016/07/American-black-bear.jpg&#39;, &#39;https://media.gettyimages.com/photos/black-bear-standing-in-rocky-stream-british-columbia-canada-picture-id974154560&#39;, &#39;http://www.toledoblade.com/image/2013/01/21/black-bear.JPG&#39;, &#39;https://www.thehuntingpage.com/wp-content/uploads/sites/2/2014/01/o-BLACK-BEAR-facebook.jpg&#39;, &#39;https://cdn-image.travelandleisure.com/sites/default/files/styles/1600x1000/public/1572373216/black-bear-tennessee-BEARLODGE1019.jpg?itok=jO4eurBD&#39;, &#39;http://4.bp.blogspot.com/-YS1MBBAHGPs/TjkTZIS8WGI/AAAAAAAABi0/alssUhDH3Pk/s1600/Baby+black+bears+3.jpg&#39;, &#39;https://www.transylvaniatimes.com/home/cms_data/dfault/photos/stories/id/9/1/41091/s_top&#39;, &#39;https://www.wsls.com/resizer/fmqqOp8dNrEIIDxQOlsBSRip5KY=/1600x1333/smart/filters:format(jpeg):strip_exif(true):strip_icc(true):no_upscale(true):quality(65)/arc-anglerfish-arc2-prod-gmg.s3.amazonaws.com/public/3VGIKDGQDNAY5I4NO7KP4ZX5N4.jpg&#39;, &#39;https://mediad.publicbroadcasting.net/p/wvtf/files/styles/x_large/public/201607/AP_608334627084.jpg&#39;, &#39;https://gothunts.com/wp-content/uploads/2019/06/Black-Bear-scaled.jpeg&#39;, &#39;http://www.visitmysmokies.com/wp-content/uploads/2013/08/Black-Bear-Cub.jpg&#39;, &#39;https://cdn.audleytravel.com/-/-/79/160033025091139069040022125202060038124167252088.jpg&#39;, &#39;http://2.bp.blogspot.com/-oL5wK6KYI7M/UBji1ikDXXI/AAAAAAAAAMY/jmXUpXVGet4/s1600/Black-Bear-05.jpg&#39;, &#39;https://www.montanaoutdoor.com/wp-content/uploads/2018/05/bear6.jpg&#39;, &#39;http://2.bp.blogspot.com/_1N1pZVb1_C4/TUCDn6EEngI/AAAAAAAABVA/h6BmG9TLADA/s1600/Black+Bear+159087.jpg&#39;, &#39;https://www.oregonlive.com/resizer/nSifR1unuKEMPswzQtebZRI_03g=/600x0/arc-anglerfish-arc2-prod-advancelocal.s3.amazonaws.com/public/6GF72P3X25EXVLEKGSGVXUJRKI.png&#39;, &#39;http://someinterestingfacts.net/wp-content/uploads/2016/07/Black-bear.jpg&#39;, &#39;https://www.remotelands.com/travelogues/app/uploads/2019/07/AsiaWire-BearReturn-2.jpg&#39;, &#39;https://images.fineartamerica.com/images/artworkimages/mediumlarge/1/7-maine-black-bear-sharon-fiedler.jpg&#39;, &#39;https://d.ibtimes.co.uk/en/full/1611947/black-bear.jpg&#39;, &#39;https://animalhype.com/wp-content/uploads/2019/12/How-Fast-Do-Black-Bears-Run-1024x682.jpg&#39;, &#39;http://uffmannatureimages.net/wp-content/uploads/2012/07/20120519-_Q2C6428Black-Bears-save-for-web-cs6.jpg&#39;, &#39;https://www.gannett-cdn.com/presto/2019/01/02/PASH/bff6ff36-67d2-44be-bdda-0d5e29cda4e1-Black_bear_Ken_Taylor.jpg?crop=1796,1007,x0,y0&amp;width=3200&amp;height=1680&amp;fit=bounds&#39;, &#39;https://wildlife.org/wp-content/uploads/2015/07/Black-Bear-Reintroduction-Image-1-600.jpg&#39;, &#39;https://imgc.allpostersimages.com/img/print/posters/barrett-hedges-a-large-black-bear-ursus-americanus-moves-quickly-over-the-rocks_a-L-13725186-4990831.jpg&#39;, &#39;http://www.wildernessrealty.com/wp-content/uploads/2015/02/Maine-Black-Bear.jpg&#39;, &#39;http://cdn0.wideopenspaces.com/wp-content/uploads/2014/10/bigstock-Black-bear-cub-62558696.jpg&#39;, &#39;http://archery360.com/wp-content/uploads/2014/06/black-bear-cub.jpg&#39;, &#39;https://www.wideopenspaces.com/wp-content/uploads/2020/09/wisconsinblackbear.jpg&#39;, &#39;https://cdn.extra.ie/wp-content/uploads/2018/05/15124559/Black-bear-1.jpg&#39;, &#39;https://2.bp.blogspot.com/-oMj7lKf-Lb8/UMJTf68A6SI/AAAAAAAABfw/L91dawds-Nk/s1600/black-bear-photos-2012+03.jpg&#39;, &#39;https://i.cbc.ca/1.4130464.1495668985!/fileImage/httpImage/image.jpg_gen/derivatives/16x9_780/black-bear.jpg&#39;, &#39;http://content.wzzm13.com/photo/2015/10/09/635799990906985114-ThinkstockPhotos-178500326_40932_ver1.0.jpg&#39;, &#39;http://www.my-photo-blog.com/wp-content/uploads/2014/07/Black-Bear-Cub.jpg&#39;, &#39;https://www.massaudubon.org/var/ezdemo_site/storage/images/media/departments/lww/mammals/images/black-bear/black-bear-standing-up-next-to-tree-c-karen-karlberg-500vert/196541-4-eng-US/black-bear-standing-up-next-to-tree-c-karen-karlberg-500vert_blockitemmedium.jpg&#39;, &#39;https://www.grandviewoutdoors.com/uploads/images/BlackBearUSFWS_181004_111434.jpg&#39;, &#39;https://mediad.publicbroadcasting.net/p/wusf/files/styles/x_large/public/201504/black_bear_closeup_gary_langley.jpg&#39;, &#39;https://images.fineartamerica.com/images/artworkimages/mediumlarge/2/6-american-black-bear-cub-david-kenny.jpg&#39;, &#39;https://www.coniferousforest.com/wp-content/uploads/2016/08/American-Black-Bear.jpg&#39;, &#39;http://justfunfacts.com/wp-content/uploads/2017/10/asiatic-black-bear-5.jpg&#39;, &#39;https://www.gannett-cdn.com/presto/2019/12/30/PKNS/e7f38dd1-a441-4cc3-a48a-1df9445344de-KNS-Zoo_Knoxville_Bears_BP_3.JPG?width=540&amp;height=&amp;fit=bounds&amp;auto=webp&#39;, &#39;https://miro.medium.com/max/6014/1*sGT7ccEjG6KF0-UjdsJ3nQ.jpeg&#39;, &#39;https://wildlife.org/wp-content/uploads/2017/03/blackbear.png&#39;, &#39;https://bearexpert.com/wp-content/uploads/2020/08/american-black-bear-6.jpg&#39;, &#39;http://cdn0.wideopenspaces.com/wp-content/uploads/2015/12/BlackBearMass.jpg&#39;, &#39;http://dnr.maryland.gov/wildlife/PublishingImages/Maryland-Bear-Stamp-Winning-Artwork-19-20.jpg&#39;, &#39;http://www.thestar.com/content/dam/thestar/news/gta/2015/06/01/black-bear-cornered-in-newmarket-backyard/bear-file.jpg&#39;, &#39;https://upload.wikimedia.org/wikipedia/commons/thumb/b/b5/2015-08-07_Black_Bear_near_Stewart%2C_BC_1090.jpg/1280px-2015-08-07_Black_Bear_near_Stewart%2C_BC_1090.jpg&#39;, &#39;http://www.adirondackalmanack.com/wp-content/uploads/2017/05/blackbear.jpg&#39;, &#39;https://www.coniferousforest.com/wp-content/uploads/2016/08/American-Black-Bear-Cubs.jpg&#39;, &#39;http://strangesounds.org/wp-content/uploads/2014/08/bear-cubs-photo.jpg&#39;, &#39;https://bear.org/wp-content/uploads/2017/10/Serious-Bear.jpg&#39;, &#39;https://thelaurelofasheville.com/wp-content/uploads/2016/06/Carolina_Nature_Photographers_Association-Black_Bear-6.jpg&#39;, &#39;https://yukon.ca/sites/yukon.ca/files/env/env-imgs/env-black-bear_0.jpg&#39;, &#39;https://www.victoriabuzz.com/wp-content/uploads/2019/08/black-bear-unsplash.jpg&#39;, &#39;https://media.spokesman.com/photos/2017/07/04/BLACK_BEAR.JPG.jpg&#39;, &#39;http://yesofcorsa.com/wp-content/uploads/2018/10/American-Black-Bear-Best-Wallpaper-1024x753.jpg&#39;, &#39;https://wallup.net/wp-content/uploads/2019/09/300546-minnesota-black-bear.jpg&#39;, &#39;https://cdn1.theweek.co.uk/sites/theweek/files/2016/10/161026_black_bear.jpg&#39;, &#39;https://bloximages.newyork1.vip.townnews.com/swnewsmedia.com/content/tncms/assets/v3/editorial/7/1a/71a9b7ca-1825-5fdd-9534-5a7c30ac10c8/5d444ec6ac2d5.image.jpg&#39;, &#39;https://quincy-network.s3.ca-central-1.amazonaws.com/wp-content/uploads/sites/37/2020/06/MGN_1280x960_70623P00-TYOFD-860x645.jpg&#39;, &#39;http://www.karelianbeardog.us/photos/outdoor/blackbears/Black%20bear.jpg&#39;, &#39;https://brevardzoo.org/wp-content/uploads/2019/05/bearmain.gif&#39;, &#39;http://justfunfacts.com/wp-content/uploads/2017/10/asiatic-black-bear-2.jpg&#39;, &#39;http://ovlc.org/wp-content/uploads/2014/07/black_bear.jpg&#39;, &#39;https://cdn0.wideopenspaces.com/wp-content/uploads/2017/02/black-bear-feature.jpg&#39;, &#39;https://nhpbs.org/wild/images/blackbearusfw1.jpg&#39;, &#39;http://uffmannatureimages.net/wp-content/uploads/2012/07/20120518-KQ2C5610Black_Bears-Edit-692x1024.jpg&#39;, &#39;https://www.raincoast.org/wp-content/uploads/2019/12/black-bear-diane-bb-v1.1.jpg&#39;, &#39;https://gohunt-assets-us-west-2.s3.amazonaws.com/media/Large-Montana-black-bear.jpg&#39;, &#39;http://www.hww.ca/kaboom/images/Mammals/Black-Bear/Black-Bear-David-Cracknell.jpg&#39;, &#39;http://2.bp.blogspot.com/-yc7X_uO7iMM/UA7U_q5_NtI/AAAAAAAAAqI/72EaqVglzPM/s1600/black-bear.jpg&#39;, &#39;https://d.newsweek.com/en/full/1092319/black-bear.jpg&#39;, &#39;https://www.grandviewoutdoors.com/uploads/images/_facebook/Black-Bear-Sweepstakes-beauty.jpg&#39;, &#39;http://3.bp.blogspot.com/-vwLa2VwfXg4/Ul6IwR1sIJI/AAAAAAAABYw/INnD5gQH-dM/s1600/Black-Bear.jpg&#39;, &#39;http://wyrz.org/wp-content/uploads/2016/07/black_bear.jpg&#39;, &#39;https://www.gannett-cdn.com/-mm-/98e9eb0055148d8550b3a7d264f19fd6462e6062/c=0-213-4288-2636/local/-/media/2017/03/22/CarolinaGroup/Asheville/636257813777562324-Black-bear-Getty-images.jpg?width=3200&amp;height=1680&amp;fit=crop&#39;, &#39;https://floridawildlifefederation.org/wp-content/uploads/2020/04/black-bear-scaled-e1598566846480.jpg&#39;, &#39;https://www.stgeorgeutah.com/wp-content/uploads/2015/01/lynn_11-22-2011_black_bear_6-1.jpg&#39;, &#39;https://bento.cdn.pbs.org/hostedbento-prod/gallery/20170713_222850_315402black-bear-01-gettyimages-155467721.jpg.1280x720_q85.jpg&#39;, &#39;https://dehayf5mhw1h7.cloudfront.net/wp-content/uploads/sites/301/2020/06/26101300/bear-illinois-dnr.jpg&#39;, &#39;http://2.bp.blogspot.com/-MKgsmEatcvk/UKuf-CiWdFI/AAAAAAAACQU/VPvHckGI7DA/s1600/Black_bear_large.jpg&#39;, &#39;https://kanati.com/wp-content/uploads/black-bear-life-size-mount_poseBB109-feature.png&#39;, &#39;https://compote.slate.com/images/0a308e2c-48e2-476a-ad72-61c20aa92709.jpg&#39;, &#39;https://external-preview.redd.it/ieT9RTLmwvN4hfQBYix4109CLYniR3fSUAeT6jg6kO0.jpg?auto=webp&amp;s=4f2ec1a52f7c1f5b16238503377981645c54ae27&#39;, &#39;http://wallpapersdsc.net/wp-content/uploads/2017/10/Black-Bear-Background.jpg&#39;, &#39;https://www.gannett-cdn.com/-mm-/2b06f05d8e31b4112ec2ecbca6e9ef0db0cf4d0b/c=0-108-2125-1309/local/-/media/2016/05/18/Wilmington/Wilmington/635991906230694281-black-bear.jpg?width=3200&amp;height=1680&amp;fit=crop&#39;, &#39;https://i.ytimg.com/vi/-2cj5pPe778/maxresdefault.jpg&#39;, &#39;https://www.outdoorrevival.com/wp-content/uploads/2017/04/american-black-bear.jpg&#39;, &#39;https://www.pennlive.com/resizer/zKZdn6cmyoUATjOlNY4O_OEWRTI=/1280x0/smart/advancelocal-adapter-image-uploads.s3.amazonaws.com/image.pennlive.com/home/penn-media/width2048/img/pa-sportsman/photo/black-bear-8789aeebd5c67247.jpg&#39;, &#39;http://www.hww.ca/kaboom/images/Mammals/Black-Bear/Black-Bear-Elliott-Fotherby.jpg&#39;, &#39;http://www.hdnicewallpapers.com/Walls/Big/Bear/Animal_Black_Bear_Wallpaper.jpg&#39;, &#39;https://biologydictionary.net/wp-content/uploads/2020/09/shutterstock_1452356795-1.jpg&#39;, &#39;http://theazaleainnbb.com/wp-content/uploads/2018/07/black-bear.jpg&#39;, &#39;https://wallpapercave.com/wp/wp3102474.jpg&#39;, &#39;https://www.simplemost.com/wp-content/uploads/2019/06/AdobeStock_122783246.jpeg&#39;, &#39;https://onekindplanet.org/wp-content/uploads/2017/09/blackbear.jpg&#39;, &#39;https://images.fineartamerica.com/images-medium-large-5/baby-black-bear-jack-nevitt.jpg&#39;, &#39;http://www.wildlifecenter.org/sites/default/files/patient_images/Black_Bear/DSCN6285.JPG&#39;, &#39;https://audubonnatureinstitute.org/images/600x450/zoo/black-bear-600.jpg&#39;, &#39;https://bear.org/wp-content/uploads/2008/01/Bear-by-lake-looking.jpg&#39;, &#39;https://cottagelife.com/wp-content/uploads/2019/02/Cottage-Life-Black-Bear-cub.jpg&#39;, &#39;https://images.axios.com/WACso7e7dbhjup_i7iVfclq3BdI=/0x322:4288x2734/1920x1080/2018/05/22/1527002317479.jpg&#39;, &#39;https://northdakotawildlifefederation.org/wp-content/uploads/2020/02/black-bear.jpg&#39;, &#39;https://a57.foxnews.com/a57.foxnews.com/static.foxnews.com/foxnews.com/content/uploads/2018/11/640/320/1862/1048/louisiana-black-bear.jpg?ve=1&amp;tl=1?ve=1&amp;tl=1&#39;, &#39;https://www.montanaoutdoor.com/wp-content/uploads/2015/05/bears_desktop_2700x1809_hd-wallpaper-832781.jpg&#39;, &#39;https://www.stgeorgeutah.com/wp-content/uploads/2017/01/blackbear.jpg&#39;, &#39;https://fthmb.tqn.com/OUfFPaVmyC8KJnjYhPqr-aq-Sy4=/4896x3264/filters:fill(auto,1)/tired-black-bear-cub-537071213-59bda526845b340011591e7f.jpg&#39;, &#39;https://cdn2.outdoorphotographer.com/gallery/7522/thegagglephotog@gmail.com_102543_647246_d57a3bd609_1c886941c4-thegagglephotoggmail-com-baby-black-bear-standing-fb.jpg&#39;, &#39;http://images.dailyhive.com/20160826144034/black-bear-e1475078273412.jpg&#39;, &#39;http://animalia.bio/uploads/animals/photos/full/1.25x1/YCezTGiM824aJwMLQgqJ.jpg&#39;, &#39;http://justfunfacts.com/wp-content/uploads/2017/10/asiatic-black-bear-eating.jpg&#39;, &#39;https://images.fineartamerica.com/images-medium-large-5/standing-bear-timothy-flanigan.jpg&#39;, &#39;https://www.trbimg.com/img-58eeaeb6/turbine/os-black-bear-dead-sanford-criminal-20170412&#39;, &#39;https://winchestersun.com/wp-content/uploads/sites/44/2020/06/A1-062320-Black-bear-e1593005720644.jpg&#39;, &#39;https://i0.wp.com/taiwan-scene.com/wp-content/uploads/2019/06/taiwan-hualien-formosan-black-bear.jpg?fit=870%2C654&amp;ssl=1&#39;, &#39;https://www.gannett-cdn.com/presto/2018/11/04/PGRF/7c692a2a-f1d1-4f07-8181-6bfc90c42b2c-AP18305732083625.jpg?crop=1999,1144,x0,y211&amp;width=3200&amp;height=1680&amp;fit=bounds&#39;, &#39;http://i.huffpost.com/gen/1190583/thumbs/o-BLACK-BEAR-facebook.jpg&#39;, &#39;http://1.bp.blogspot.com/-Jc2_QqcDTz4/UBjix7v9rjI/AAAAAAAAAMA/Hr67qTiw_I4/s1600/Black-Bear-02.jpg&#39;, &#39;http://mediad.publicbroadcasting.net/p/nhpr/files/styles/x_large/public/201303/April26girlapril30.jpg&#39;, &#39;http://mediad.publicbroadcasting.net/p/nhpr/files/201303/April25onlog.jpg&#39;, &#39;http://www.exploreclarion.com/wp-content/uploads/2018/11/black-bear.png&#39;, &#39;https://external-preview.redd.it/ny2anVEkjB6eTawYfAN6KcZ7TUyH69buX9Vhm56cds8.jpg?auto=webp&amp;s=500e3a52f7e797eff002fcd91f0f3cf62ff1f401&#39;, &#39;https://img.huffingtonpost.com/asset/594a9e981700001f001021dc.jpeg?ops=1910_1000&#39;, &#39;https://site-547756.mozfiles.com/files/547756/medium/Black_Bear3.jpg&#39;, &#39;https://images.fineartamerica.com/images-medium-large/pa-black-bear-portrait-bill-maile-.jpg&#39;, &#39;https://www.oceanlight.com/stock-photo/ursus-americanus-black-bear-image-18790-351363.jpg&#39;, &#39;https://www.gannett-cdn.com/-mm-/a5076e7a43a0cec6129489319d0fb728e2cd1814/c=0-264-5184-3193/local/-/media/2017/02/15/DetroitFreePress/DetroitFreePress/636227474186999380-GettyImages-497031868.jpg?width=3200&amp;height=1680&amp;fit=crop&#39;, &#39;https://3.bp.blogspot.com/-T62hFwmwBSg/TmstHyDCjWI/AAAAAAAAAAg/hZSRZIqaEpE/s1600/black-bear-backgrounds-4-751651.jpg&#39;, &#39;https://media.news4jax.com/photo/2015/11/06/Black-bear-blurb-jpg_308110_ver1.0_1280_720.jpg&#39;, &#39;https://downeast.com/wp-content/uploads/2014/02/Bear9.jpg&#39;, &#39;http://www.minnesotaseasons.com/Mammals/Large/American_black_bear_03.jpg&#39;, &#39;https://animals.net/wp-content/uploads/2018/12/Black-Bear-2.jpg&#39;, &#39;https://i.cbc.ca/1.4656566.1525955305!/cpImage/httpImage/image.jpg_gen/derivatives/16x9_780/alberta-black-bear.jpg&#39;, &#39;http://www.hdnicewallpapers.com/Walls/Big/Bear/Animal_Black_Bear_in_Forest.jpg&#39;, &#39;http://2.bp.blogspot.com/-NU71JkUr_MU/UNois4w5TnI/AAAAAAAABK4/ul6piYtCZUU/s1600/christmas+bear.JPG&#39;, &#39;http://www.trbimg.com/img-52bde9f3/turbine/os-blackbearhabitat9910-jpg-20131227/2000/2000x1182&#39;, &#39;http://elelur.com/data_images/mammals/asian-black-bear/asian-black-bear-05.jpg&#39;, &#39;https://globaljusticeecology.org/wp-content/uploads/black-bear-937037_1920-980x460.png&#39;, &#39;http://s1.ibtimes.com/sites/www.ibtimes.com/files/styles/embed/public/2017/05/16/black-bears-19723071920.jpg&#39;, &#39;http://www.nwtrek.org/wp-content/uploads/2017/12/KBYG-black-bear.jpg&#39;, &#39;https://wildlifefriendly.org/wp-content/uploads/2015/09/Black-bear-Full.jpg&#39;, &#39;https://www.sott.net/image/s13/270500/full/Black_bear_looks_angry_Shutter.jpg&#39;, &#39;http://wiseaboutbears.org/wp-content/uploads/2014/06/bearmaleJune-222012D80_2149-copy.jpg&#39;, &#39;https://www.columbiatribune.com/storyimage/MO/20200519/NEWS/200519240/AR/0/AR-200519240.jpg&#39;, &#39;https://cdn2.bigcommerce.com/server100/6ca92/product_images/uploaded_images/florida-black-bear.jpg?t=1430242234&#39;, &#39;http://explorenorth.com/library/nature/images/brown_black_bear-tutshi_lake-0709.jpg&#39;, &#39;https://cdn.shopify.com/s/files/1/1603/1175/products/American_Black_Bear_Cub_3265_2048x.jpg?v=1523665570&#39;, &#39;http://getwallpapers.com/wallpaper/full/a/0/7/1303653-black-bear-desktop-wallpaper-1920x1080-for-meizu.jpg&#39;, &#39;https://farm6.staticflickr.com/5588/15080045718_78c2561e6e_b.jpg&#39;, &#39;https://www.nps.gov/shen/learn/nature/images/BlackBear_6.jpg?maxwidth=1200&amp;autorotate=false&#39;, &#39;https://www.gannett-cdn.com/-mm-/a5076e7a43a0cec6129489319d0fb728e2cd1814/c=0-264-5184-3193/local/-/media/2017/06/23/PAGroup/YorkDailyRecord/636338199651309082-GettyImages-482466374.jpg?width=3200&amp;height=1680&amp;fit=crop&#39;, &#39;http://www.reportingday.com/wp-content/uploads/2018/07/Black-Bear-Cute-Pictures-1.png&#39;, &#39;https://upload.wikimedia.org/wikipedia/commons/9/9c/%22Cinnamon%22_Black_Bear.jpg&#39;, &#39;https://media.timesfreepress.com/img/photos/2014/11/09/111014b04_black_bears_t800_h8b150168072b2d9c018ca481200aa3e621674f4c.JPG&#39;, &#39;https://www.realtree.com/sites/default/files/styles/site_large/public/content/inserts/642px-blackbearatwoburnsafaripark.jpg&#39;, &#39;http://adwimages.co.uk/Blog/wp-content/uploads/2016/11/adult-black-bear.jpg&#39;, &#39;https://images.fineartamerica.com/images/artworkimages/mediumlarge/2/black-bear-cub-in-a-tree-ursula-salzmann.jpg&#39;, &#39;https://cdn.vox-cdn.com/thumbor/SNyMBO6T0qwheM_sxxaWIKDDPAc=/0x0:5000x3313/1200x800/filters:focal(1435x1342:2235x2142)/cdn.vox-cdn.com/uploads/chorus_image/image/57942213/GettyImages_187133529.0.jpg&#39;] Images downloaded. teddy bear: Got 283 image URLs. Downloading... urls = [&#39;https://i2-prod.birminghammail.co.uk/incoming/article17583074.ece/ALTERNATES/s1227b/0_IFP_BEM_160120bears011JPG.jpg&#39;, &#39;http://cdn.shopify.com/s/files/1/2622/2548/products/wholesale-plush-in-a-rush-14271861817446_1200x.jpg?v=1584804420&#39;, &#39;https://cdn8.bigcommerce.com/s-dee9d/images/stencil/1280x1280/products/970/6782/Life_size_72in_black_teddy_bear_Juju_Cuddles_is_Tall_dark_and_adorable__95688.1463592717.jpg?c=2&#39;, &#39;https://www.sugardelites.com/assets/images/teddybearlarge.jpg&#39;, &#39;http://www.photos-public-domain.com/wp-content/uploads/2010/12/white_teddy_bear.jpg&#39;, &#39;http://wallsdesk.com/wp-content/uploads/2016/11/Lonely-Teddy-Bear.jpg&#39;, &#39;http://www.fitzulas.com/Merchant4c/graphics/00000001/2014/gund-4040161-xl.jpg&#39;, &#39;https://backdropscanada.ca/wp-content/uploads/2015/01/p-8282-Teddy_Bear_Blue_TL_800302__02186.jpg&#39;, &#39;https://cdn0.rubylane.com/shops/chippewalakeantiques/863.1L.jpg&#39;, &#39;https://cdn.shopify.com/s/files/1/2975/6858/products/tan-big-bear-9_1200x1200.jpg?v=1524446749&#39;, &#39;https://cdn.notonthehighstreet.com/system/product_images/images/001/708/113/original_standing-teddy-bears.jpg&#39;, &#39;https://n2.sdlcdn.com/imgs/i/6/4/X-Atom-Teddy-Bears-Couple-SDL372766290-2-658f9.jpeg&#39;, &#39;https://www.sippycupmom.com/wp-content/uploads/2017/09/NTBD-Exclusive-Bear.jpg&#39;, &#39;http://theawesomedaily.com/wp-content/uploads/2017/10/teddy-bear-images-10-2.jpg&#39;, &#39;https://wallsdesk.com/wp-content/uploads/2016/11/Teddy-Bear-Photos.png&#39;, &#39;https://cdn8.bigcommerce.com/s-dee9d/images/stencil/1280x1280/products/883/8957/48in_green_teddy_bear_Big_smile_and_soft_cuddly_bear__93790.1493921224.jpg?c=2&#39;, &#39;https://hips.hearstapps.com/vader-prod.s3.amazonaws.com/1543338622-costco-giant-teddy-bear-1543338603.jpg?crop=1xw:1xh;center,top&#39;, &#39;http://icecreamoffpaperplates.com/wp-content/uploads/2016/08/teddy-bears.jpg&#39;, &#39;http://cdn.shopify.com/s/files/1/2610/9472/products/BL1985_BIRKIN_TEDDY_BEAR_01_1024x1024.jpg?v=1554885535&#39;, &#39;https://d3n8a8pro7vhmx.cloudfront.net/accessalliance/pages/454/meta_images/original/Cute_but_Lonely_Teddy_Bear_Sitting_on_Grass.jpg?1591840883&#39;, &#39;https://www.super99.in/media/catalog/product/cache/1/image/1800x/040ec09b1e35df139433887a97daa66f/0/1/01_22.jpg&#39;, &#39;https://static1.momsimage.com/wordpress/wp-content/uploads/2020/03/2020-03-30_110127.jpg&#39;, &#39;https://www.stuffedwithplushtoys.com/assets/full/27-1704436.jpg?20200129144114&#39;, &#39;https://www.celebrationgiftware.com.au/media/catalog/product/cache/cb58f11d039ee9c021f50f3360077761/t/s/tshirtbear-yellow-birthdetails.jpg&#39;, &#39;https://cdn.shopify.com/s/files/1/2622/2548/products/wholesale-plush-in-a-rush-8100-14243358867558_1024x1024.jpg?v=1588363171&#39;, &#39;https://cdn.notonthehighstreet.com/fs/34/8c/3995-961a-4318-86e4-a5ee78006bf4/original_personalised-teddy-bear-gift.jpg&#39;, &#39;https://pngimg.com/uploads/teddy_bear/teddy_bear_PNG114.png&#39;, &#39;http://edicollector.com/wp-content/uploads/2017/10/Krampus-Teddy-Bear-Edicollector-02.jpg&#39;, &#39;https://img.pngio.com/teddy-bear-png-baby-teddy-bear-png-1456_1456.png&#39;, &#39;https://cdn1.tedsby.com/tb/large/storage/1/3/0/13062/cute-handmade-teddy-bear-miniature-ooak-artist.jpg&#39;, &#39;https://cdn0.rubylane.com/_pod/item/1068141/0001459/1910s-Antique-Steiff-Tiny-Teddy-Bear-pic-1-2048-50-f.jpg&#39;, &#39;https://cdn0.rubylane.com/_pod/item/1494839/RL446/Large-Ideal-Antique-Teddy-Bear-full-2o-2048-14-r-ffffff-9f9b7e.jpg&#39;, &#39;https://pngimg.com/uploads/teddy_bear/teddy_bear_PNG104.png&#39;, &#39;https://startknitting.org/wp-content/uploads/2018/03/Teddy-Bear-Free-Knitting-Pattern-f.jpg&#39;, &#39;https://cdn.notonthehighstreet.com/fs/7a/fe/5bda-9f46-403c-9d21-c798fa5de5ed/original_personalised-siblings-teddy-bears.jpg&#39;, &#39;https://cdn1.tedsby.com/tb/large/storage/1/3/9/139462/cute-handmade-teddy-bear-oliver.jpg&#39;, &#39;http://www.listofdownload.com/wp-content/uploads/2017/02/red-roses-cute-teddy-bear-picture-background-wallpaper.jpg&#39;, &#39;https://i5.walmartimages.com/asr/5d5541cd-d9cc-4b47-b7de-ebc107b74d82_1.9f14f307142cfd730852e875760b90bc.jpeg&#39;, &#39;https://townsquare.media/site/43/files/2020/08/Teddy-Bear.jpg?w=1200&amp;h=0&amp;zc=1&amp;s=0&amp;a=t&amp;q=89&#39;, &#39;https://alqurumresort.com/img/vermont-teddy-bear-valentines-day.jpg&#39;, &#39;https://api.time.com/wp-content/uploads/2016/12/teddy-bear.jpg&#39;, &#39;https://www.kentishembroidery.co.uk/133/mm01-cuddly-mumbles-bracken-teddy-bear-989.jpg&#39;, &#39;http://www.fitzulas.com/Merchant4c/graphics/00000001/2012/gund-015418-xl.jpg&#39;, &#39;http://oglasi.ovh/images/2020/02/15/84/pomeranian-boo-white-teddy-bear_4.jpg&#39;, &#39;https://perpetualpreschool.com/wp-content/uploads/2017/12/32221695_ml.jpg&#39;, &#39;https://cdn.shopify.com/s/files/1/0270/2981/products/Bear_Plush_Pink_Color_with_Bow_25_cm_1024x1024.jpg?v=1527556065&#39;, &#39;https://www.myflowergift.com/media/catalog/product/cache/1/image/1200x1200/9df78eab33525d08d6e5fb8d27136e95/s/n/snow_white..3_feet_height_white_teddy_bear_4000.jpg&#39;, &#39;http://www.photos-public-domain.com/wp-content/uploads/2011/01/teddy-bear-wearing-mardi-gras-beads.jpg&#39;, &#39;https://wallsdesk.com/wp-content/uploads/2016/11/Teddy-Bear-Wallpaper.jpg&#39;, &#39;https://3.bp.blogspot.com/-MF361EGT_e4/TrwxX4LsSMI/AAAAAAAAEP8/xKbu4DUVjEI/s1600/little+bear.JPG&#39;, &#39;https://www.petlandracine.com/wp-content/uploads/2019/05/1386238_800.jpg&#39;, &#39;https://2.bp.blogspot.com/-v-DbNHEhI0c/UkK6mc0ImdI/AAAAAAAAAB8/4rdaS87Bxqo/s1600/Giant+Teddy+Halloween+2013+Photo+Blog+4.jpg&#39;, &#39;https://cdn.shopify.com/s/files/1/0798/6397/products/eddie_cover_no_logo.jpg?v=1535766533&#39;, &#39;https://www.kidswholesaleclothing.co.uk/4599-thickbox_default/soft-toys-for-personalisation-teddy-bear-grey.jpg&#39;, &#39;https://cdn.thisiswhyimbroke.com/images/ebonics-romantic-bear.jpg&#39;, &#39;https://www.worldofbears.com/acatalog/Oxford%2010in_WEB.jpg&#39;, &#39;https://pngimg.com/uploads/teddy_bear/teddy_bear_PNG5.png&#39;, &#39;https://cdn.notonthehighstreet.com/system/product_images/images/001/941/993/original_baby-teddy-bear-dress-up-costume.jpg&#39;, &#39;https://pngimg.com/uploads/teddy_bear/teddy_bear_PNG14.png&#39;, &#39;https://www.zookini.com.au/media/catalog/product/cache/8/image/5beb446e055b53f6b95ea24807ed418d/w/a/waffle-cute-teddy-bear-beige-01.jpg&#39;, &#39;https://teddy.ph/wp-content/uploads/2019/08/feature-30.jpg&#39;, &#39;http://www.sippycupmom.com/wp-content/uploads/2017/09/Teddy-Bear.jpg&#39;, &#39;https://cdn.jewishboston.com/uploads/2019/01/iStock-932242472.jpg&#39;, &#39;https://newcastlebeach.org/images/teddy-bear-with-heart-4.jpg&#39;, &#39;https://1.bp.blogspot.com/_GSA-YfDFMXc/TDhlS3NvdcI/AAAAAAAAAb8/m0-7WTaPif8/s1600/DSC_1528.JPG&#39;, &#39;https://teddybears.co.uk/wp-content/uploads/2019/02/uk-2019-2736x3648.jpg&#39;, &#39;https://cdn.thewhoot.com/wp-content/uploads/2018/06/Knitted-Teddy-Bear-Patterns-1.jpg&#39;, &#39;https://cdn0.rubylane.com/shops/1147637/bk727.1L.jpg&#39;, &#39;https://cdn0.rubylane.com/_pod/item/737200/266/Vintage-Steiff-Original-Teddy-Bear-1950x7827s-full-3o-2048-eea9d521-f.jpg&#39;, &#39;https://cdn-r.fishpond.com/0037/184/777/237402416/6.jpeg&#39;, &#39;https://cdn.notonthehighstreet.com/fs/0e/9b/9f39-5053-4edd-a7b8-33a6780fb100/original_personalised-1st-christmas-teddy-bear.jpg&#39;, &#39;https://pngimg.com/uploads/teddy_bear/teddy_bear_PNG24.png&#39;, &#39;https://www.teddybearaustralia.com.au/wp-content/uploads/2018/09/FullSizeRender-6.jpg&#39;, &#39;https://worldofbears.com/acatalog/Steiff-022098.jpg&#39;, &#39;https://cdn8.bigcommerce.com/s-dee9d/images/stencil/1280x1280/products/883/8961/4ft_green_teddy_bear_Big_smile_and_soft_cuddly_bear__85725.1493921227.jpg?c=2&#39;, &#39;https://thegadgetflow.com/wp-content/uploads/2013/01/Personalised-Teddy-Bear-In-A-Gift-Tin-4.jpg&#39;, &#39;https://www.steiffteddybears.co.uk/img/products/027710.png&#39;, &#39;https://image.made-in-china.com/2f0j00wqhfEUTWOVbo/Factary-Price-Giant-Teddy-Bear-Big-Plush-Teddy-Bear-Soft-Toys-for-Girls.jpg&#39;, &#39;https://cdn0.rubylane.com/_pod/item/1491561/Peacockx20Bear/Peacock-Stores-Teddy-Bear-foot-label-pic-1A-2048:10.10-27-f.jpg&#39;, &#39;https://n3.sdlcdn.com/imgs/g/u/e/Ultra-Blue-Teddy-Bear-12-SDL607416536-2-76098.jpeg&#39;, &#39;https://1.bp.blogspot.com/-ChPUEPH4ssg/T-nXRUqH6zI/AAAAAAAAAWY/7HEyWdQvV_E/s1600/teddy+bear+picnic+(7).JPG&#39;, &#39;https://s2.r29static.com/bin/entry/a85/0,0,2000,1050/x,80/1655673/image.jpg&#39;, &#39;https://app.skufetch.com/images.tmp/Gemmy_8_5_ft_Animate_294606_109_0_res.jpg&#39;, &#39;https://www.stuffedwithplushtoys.com/assets/full/u4040131.jpg&#39;, &#39;https://www.bloomsonly.com/media/catalog/product/cache/2/image/1200x1200/9df78eab33525d08d6e5fb8d27136e95/m/e/meng-meng-cute-brown-teddy-bear-head-tilt-twisting-holiday-gifts-velvet-ribbon-light-brown-bear.jpg&#39;, &#39;https://www.desicomments.com/dc3/02/215657/215657.jpg&#39;, &#39;https://www.teddybearacademy.net/wp-content/uploads/2014/08/Marco-full.jpg&#39;, &#39;https://st4.depositphotos.com/4431055/22853/i/950/depositphotos_228530988-stock-photo-cute-teddy-bears-hugging-back.jpg&#39;, &#39;https://pngimg.com/uploads/teddy_bear/teddy_bear_PNG45.png&#39;, &#39;http://images.antiquesatlas.com/dealer-stock-images/sladesantiques/Vintage_Small_9_Steiff_Mohair__as527a528z.jpg&#39;, &#39;https://www.worldofbears.com/acatalog/LG01.jpg&#39;, &#39;https://teddybears.co.uk/wp-content/uploads/2017/08/075797-2736x3648.jpg&#39;, &#39;https://cdn8.bigcommerce.com/s-dee9d/images/stencil/1280x1280/products/882/8984/6ft_Green_lucky_teddy_Life_Size_bear_cuddly_Giant_and_biggest_cuddles_bear__64679.1493929106.jpg?c=2&#39;, &#39;https://pngimg.com/uploads/teddy_bear/teddy_bear_PNG11.png&#39;, &#39;http://www.pavlovspuppets.com/p/teddy3.jpg&#39;, &#39;https://wallsdesk.com/wp-content/uploads/2016/11/Teddy-Bear-Pictures.jpg&#39;, &#39;https://www.taylorherring.com/wp-content/uploads/2015/04/GiantTeddyBears-6.jpg&#39;, &#39;https://wallsdesk.com/wp-content/uploads/2016/11/Teddy-Bear-Wallpapers.jpg&#39;, &#39;https://primopromo.com.au/assets/Uploads/Teddy-Bear+Dark-Green-v3.jpg&#39;, &#39;https://cdn0.rubylane.com/shops/700632/I-1277.1L.jpg&#39;, &#39;https://cdn1.bigcommerce.com/server1900/dee9d/images/stencil/700x900/products/970/6782/Life_size_72in_black_teddy_bear_Juju_Cuddles_is_Tall_dark_and_adorable__95688.1463592717.jpg?c=2&#39;, &#39;https://n1.sdlcdn.com/imgs/i/7/9/Teddy-bear-SDL324941391-1-f3e93.png&#39;, &#39;https://1.bp.blogspot.com/-eTFJzsbT2Pg/T3qHL_rPBMI/AAAAAAAABsA/5J8eXBe2d9A/s1600/Teddy+Bear+Wallpapers.jpg&#39;, &#39;http://geekologie.com/2014/11/10/teddy-bear-dog-2.jpg&#39;, &#39;https://plazarealestate.com.au/wp-content/uploads/sites/131/2016/07/Teddy-Bears.jpg&#39;, &#39;https://cdn0.rubylane.com/_pod/item/1491561/1920sx20Germanx20bear/lovely-German-1920s-teddy-bear--full-2-2048-93.jpg&#39;, &#39;https://cdn.geekwire.com/wp-content/uploads/2017/11/Pasted-image-at-2017_11_15-02_22-PM.png&#39;, &#39;https://twinsmom.com/wp-content/uploads/2020/04/GUND-Slumbers-Teddy-Bear-Stuffed-Animal-Plush-Brown-1722.jpg&#39;, &#39;https://teddybears.co.uk/wp-content/uploads/2019/02/1903-2736x3648.jpg&#39;, &#39;https://dayz.gamepedia.com/media/dayz.gamepedia.com/e/e5/TeddyBearBrown.png&#39;, &#39;https://www.melijoe.com/images/142519/open_graph.jpg&#39;, &#39;http://3.bp.blogspot.com/-oU6bGNvicT0/UjH80jmsEfI/AAAAAAAAFTA/H6gDxpq_rE4/s1600/teddy_bear_wallpapers+%2814%29.jpg&#39;, &#39;https://i.ebayimg.com/images/i/221655718748-0-1/s-l1000.jpg&#39;, &#39;https://www.worldofbears.com/acatalog/steiff-ean-001765.jpg&#39;, &#39;https://winkgo.com/wp-content/uploads/2016/09/Proud-Grandpa-Buys-Giant-Teddy-Bear-His-Granddaughter-05.jpg&#39;, &#39;https://s-i.huffpost.com/gen/1995262/images/o-TEDDY-BEAR-COOKIES-facebook.jpg&#39;, &#39;https://n3.sdlcdn.com/imgs/i/h/h/Mable-Cuddle-Big-Teddy-Bear-SDL312942984-1-7984b.jpeg&#39;, &#39;https://i5.walmartimages.com/asr/dfe8f0fc-3ada-4f4d-b641-4e86af319c30_1.2c587767c675128916b101e1563dc5b2.jpeg&#39;, &#39;https://n4.sdlcdn.com/imgs/a/0/r/Toysaa-Brown-Jumbo-Teddy-SDL441635333-1-f7f59.jpg&#39;, &#39;https://www.worldofbears.com/acatalog/steiff-ean-012037.jpg&#39;, &#39;https://wallsdesk.com/wp-content/uploads/2016/11/Teddy-Bear-Background.jpg&#39;, &#39;https://www.tteengift.com/wp-content/uploads/2014/12/Small-Classic-Teddy-Bear-G01.jpg&#39;, &#39;https://www.dhresource.com/0x0s/f2-albu-g3-M01-AF-81-rBVaHFoewiyATnxuAAPEbt5vzFw787.jpg/63-160-cm-white-giant-teddy-bear-big-huge.jpg&#39;, &#39;https://cdn.shopify.com/s/files/1/2622/2548/products/wholesale-plush-in-a-rush-105-14241810382950_1200x.jpg?v=1584732813&#39;, &#39;https://www.jarrold.co.uk/userdata/root/images/products/steiff/teddy-bear-replica-1909.jpg&#39;, &#39;https://usercontent2.hubstatic.com/14656219_f1024.jpg&#39;, &#39;https://www.worldofbears.com/acatalog/steiff-113673.jpg&#39;, &#39;https://4.bp.blogspot.com/_OTdJvruSaiI/Swtbm1GvbWI/AAAAAAAAFdo/WXyAoA_1Qco/s1600/IMG_3609.JPG&#39;, &#39;http://cdn.shopify.com/s/files/1/0748/9103/products/steiff_10_1920_brass_000713-37_grande.jpeg?v=1426675827&#39;, &#39;https://giftteens.com/wp-content/uploads/2018/01/PPST0063.jpg&#39;, &#39;https://theawesomedaily.com/wp-content/uploads/2017/10/teddy-bear-images-17-1.jpg&#39;, &#39;http://www.worldofbears.com/acatalog/gund-4056332.jpg&#39;, &#39;http://4.bp.blogspot.com/_ED0zYuiiwBg/TBke2UCnvHI/AAAAAAAACJU/AfQyXaz-NJI/s1600/aetna+bear.jpg&#39;, &#39;https://www.buildabear.co.uk/on/demandware.static/-/Sites-buildabear-master/default/dw82e7e236/25239x.jpg&#39;, &#39;https://www.lifejackets.com/wp-content/uploads/2020/03/229-EBbearblueribboneverych-1.png&#39;, &#39;http://www.funandcash.com/ebay/teddy-white-small-X-1-A.jpg&#39;, &#39;https://3.bp.blogspot.com/_ED0zYuiiwBg/TLNvSWhZTCI/AAAAAAAACrM/1zXtB07mYlY/s1600/teddy+bears+halloween+closeup+2.JPG&#39;, &#39;https://jooinn.com/images/teddy-bear-48.jpg&#39;, &#39;https://cdn.shopify.com/s/files/1/2622/2548/products/wholesale-plush-in-a-rush-106-14242280636518_1200x.jpg?v=1597087632&#39;, &#39;https://cdn.shopify.com/s/files/1/2622/2548/products/wholesale-plush-in-a-rush-8101-14241651163238_1200x.jpg?v=1584559861&#39;, &#39;https://www.carouselshop.co.uk/media/catalog/product/cache/9/image/2000x/040ec09b1e35df139433887a97daa66f/B/F/BFFC8662B837D2AA8409CA13393604F6.jpg&#39;, &#39;https://www.worldofbears.com/acatalog/Steiff-237010.jpg&#39;, &#39;https://cdn3.volusion.com/9nxdj.fchy5/v/vspfiles/photos/BB-1486-2.jpg?v-cache=1520605016&#39;, &#39;https://cdn.shopify.com/s/files/1/3045/2256/products/GRID-1_76173971-e87f-42ab-bebd-e5f0db3fe386_600x900.png?v=1594136153&#39;, &#39;https://www.grabhub.co.uk/wp-content/uploads/2020/06/Big-Cuddly-Teddy-Bear-4.jpg&#39;, &#39;https://cdn.shopify.com/s/files/1/1417/0972/products/4056786-high-res_1024x1024.jpg?v=1548786811&#39;, &#39;https://lovemydoodles.com/wp-content/uploads/2020/04/IMG_0006-18.jpg&#39;, &#39;https://i5.walmartimages.com/asr/ab097d42-d89e-4db0-a7df-6d87b08de9ab_1.0e68fae386f2fafcb61bfbd7fc12828e.jpeg&#39;, &#39;https://www.worldofbears.com/acatalog/steiff-000867.jpg&#39;, &#39;http://cdn.shopify.com/s/files/1/2622/2548/products/wholesale-plush-in-a-rush-110-14235158642790_1200x.jpg?v=1584033067&#39;, &#39;https://www.braillehouse.org.au/wp-content/uploads/2018/12/Hand-knitted-teddy-bear-3.jpg&#39;, &#39;https://3.bp.blogspot.com/-vmp7XBf08eM/Tca-_DqLdeI/AAAAAAAACGQ/cJa3P2VUpT4/s1600/%252362+Teddy+bears+picnic.JPG&#39;, &#39;https://image.made-in-china.com/2f0j00NdUtRvuYOLbp/2017-New-Design-Scary-Teddy-Bear-Zombie-Bear-Undead-Bear-Bloody-Bear-Horrible-Teddy-Bear.jpg&#39;, &#39;https://i5.walmartimages.com/asr/aa216a37-5af0-447c-a7eb-515b94be2bc7.c9ca3e8b8902b7cac68d5a93587a5598.jpeg&#39;, &#39;https://teddybears.co.uk/wp-content/uploads/2015/09/petsy-28cm.jpg&#39;, &#39;http://www.iheartteacups.com/wp-content/uploads/2017/05/IMG_3852.jpg&#39;, &#39;https://cdn.notonthehighstreet.com/fs/93/ed/2016-9d7d-4c2d-bc12-e84f66c2e4d5/original_valentine-s-day-bertie-bear.jpg&#39;, &#39;https://4.bp.blogspot.com/-003EDE5jTOw/UDSwjEWC7oI/AAAAAAAADuQ/lA_x_5ECQAo/s1600/teddy-bear-14-hqwallpapers4u.co.cc.jpg&#39;, &#39;https://3.bp.blogspot.com/_ED0zYuiiwBg/TTeCTVngmNI/AAAAAAAADF0/b6ySiPXTVlA/s1600/sleep+eyed+bear.JPG&#39;, &#39;http://cdn.shopify.com/s/files/1/2622/2548/products/wholesale-plush-in-a-rush-108-14241933426790_1200x.jpg?v=1588417411&#39;, &#39;http://www.fitzulas.com/Merchant4c/graphics/00000001/2016/4056250.jpg&#39;, &#39;https://www.sayitwithbears.co.uk/wp-content/uploads/2016/07/large-personalised-bonnie-honey-scaled.jpg&#39;, &#39;https://webimg.secondhandapp.com/1.1/5e30189ab33a15626007900b&#39;, &#39;https://www.buildabear.com/on/demandware.static/-/Sites-buildabear-master/default/dwa68008ec/26614x.jpg&#39;, &#39;http://www.worldofbears.com/acatalog/mxmas-2017-1.jpg&#39;, &#39;https://hdwallpaperfun.com/wp-content/uploads/2015/10/Cute-Teddy-Bear-Wallpaper.jpg&#39;, &#39;https://teddybears.co.uk/wp-content/uploads/2015/05/MT-new-2017-cropped.jpg&#39;, &#39;https://cdn0.rubylane.com/shops/1539575/0025.1L.jpg&#39;, &#39;http://cdn.shopify.com/s/files/1/2429/7549/products/Edgar-_4_634bce55-3448-4579-adaf-349cc2dfe069_1200x1200.jpg?v=1557254763&#39;, &#39;https://cdn.shopify.com/s/files/1/2622/2548/products/wholesale-plush-in-a-rush-14271863685222_1024x1024.jpg?v=1586794398&#39;, &#39;https://2.bp.blogspot.com/_ED0zYuiiwBg/S_FJV5v3f4I/AAAAAAAAB5o/7GGX-bleb1Y/s1600/bears.JPG&#39;, &#39;https://cdn11.bigcommerce.com/s-dee9d/images/stencil/1280x1280/products/59/9448/Huge_Blue_Teddy_Bear_Happy_Cuddles_38in__38354.1495128960.jpg?c=2&#39;, &#39;http://cdn.shopify.com/s/files/1/2622/2548/products/wholesale-plush-in-a-rush-103-14241683964006_1200x.jpg?v=1585177055&#39;, &#39;https://n1.sdlcdn.com/imgs/g/x/j/ToyHub-3-Feet-Super-Soft-SDL448496021-1-7dfe5.jpeg&#39;, &#39;https://cdn-image.realsimple.com/sites/default/files/styles/portrait_435x518/public/1510689111/giant-teddy-bear.jpg?itok=JRUEDZtP&#39;, &#39;https://www.buildabear.com/dw/image/v2/BBNG_PRD/on/demandware.static/-/Sites-buildabear-master/default/dw78d308a2/28167x.jpg?sw=600&amp;sh=600&amp;sm=fit&amp;q=70&#39;, &#39;https://www.pcsoutdoors.com/images/products/detail/BeaverBearLgFront.jpg&#39;, &#39;https://www.buildabear.co.uk/on/demandware.static/-/Sites-buildabear-master/default/dwdac83d3c/24663x.jpg&#39;, &#39;http://allpicts.in/wp-content/uploads/2015/10/Cute-Teddy-bear-with-Pink-roses.jpg&#39;, &#39;https://www.thetoyshoppe.com/images/productslarge/57457d.jpg&#39;, &#39;https://www.stuffedwithplushtoys.com/assets/full/17223-RD.jpg?20201103131623&#39;, &#39;https://pngimg.com/uploads/teddy_bear/teddy_bear_PNG97.png&#39;, &#39;https://teddybears.co.uk/wp-content/uploads/2017/08/113413_113420_113437_web-2736x3648.jpg&#39;, &#39;https://4.bp.blogspot.com/-fGtPzuETOho/T3qG6e61h9I/AAAAAAAABro/z8CWfoVG3bQ/s1600/Teddy+Bear+Wallpapers+2.jpg&#39;, &#39;https://pngimg.com/uploads/teddy_bear/teddy_bear_PNG94.png&#39;, &#39;http://cdn.shopify.com/s/files/1/0704/5013/products/teddy-bears-gund-maxie-bear-beige-24-1_1024x1024.jpg?v=1544388291&#39;, &#39;http://c.shld.net/rpx/i/s/i/spin/image/spin_prod_1099814412??hei=64&amp;wid=64&amp;qlt=50&#39;, &#39;https://cdn0.rubylane.com/shops/1754162/118.1L.jpg&#39;, &#39;http://www.photos-public-domain.com/wp-content/uploads/2010/12/cream_colored_teddy_bear.jpg&#39;, &#39;https://cdn0.rubylane.com/_pod/item/737200/266/Vintage-Steiff-Original-Teddy-Bear-1950x7827s-full-1o-2048-fe3a394d-f.png&#39;, &#39;https://cdn0.rubylane.com/_pod/item/1491561/Peacockx20Bear/Peacock-Stores-Teddy-Bear-foot-label-full-3o-2048-94-r-ffffff-d8cbbb.jpg&#39;, &#39;https://cdn0.rubylane.com/shops/your-favorite-doll/156.1L.jpg&#39;, &#39;https://954puppies.com/wp-content/uploads/2019/07/DSC03401-1.jpg&#39;, &#39;https://pngimg.com/uploads/teddy_bear/teddy_bear_PNG7.png&#39;, &#39;https://www.pets4homes.co.uk/images/classifieds/2018/08/16/2028360/large/stunning-toy-cavapoo-teddy-bear-puppies-pra-clear-5b9d3f067fc36.jpg&#39;, &#39;https://n1.sdlcdn.com/imgs/f/g/5/Lovely-Multicolour-Small-Teddy-Bear-SDL963778079-1-36406.jpg&#39;, &#39;https://www.buildabear.com/on/demandware.static/-/Sites-buildabear-master/default/dwbebeadb4/24925x.jpg&#39;, &#39;http://cdn.shopify.com/s/files/1/2679/2566/articles/19424368_161403274403867_6843080688077087305_n_1200x1200.jpg?v=1563408993&#39;, &#39;https://www.luxurypuppies2u.com/wp-content/uploads/2020/01/bibi-teddy-bear-dog-2.jpg&#39;, &#39;https://cdn.notonthehighstreet.com/fs/d7/0c/8e2c-5db7-4ecf-8fec-9dd401de329a/original_personalised-new-baby-teddy-bear.jpg&#39;, &#39;https://www.worldofbears.com/acatalog/steiff-403286.jpg&#39;, &#39;https://www.worldofbears.com/acatalog/steiff-026812a.jpg&#39;, &#39;https://www.pioupiou-et-merveilles.fr/3237-large_default/giant-teddy-bear-gaston-beige-100cm.jpg&#39;, &#39;https://d3h6k4kfl8m9p0.cloudfront.net/stories/qjGrIHo8t0ha-j8tgE3tdQ.jpeg&#39;, &#39;https://rare.us/wp-content/uploads/sites/3/2017/07/teddy-bears.jpg&#39;, &#39;https://pngimg.com/uploads/teddy_bear/teddy_bear_PNG90.png&#39;, &#39;http://1.bp.blogspot.com/_ED0zYuiiwBg/TCoGLyKhVNI/AAAAAAAACMU/Sk2m6kJtwQ0/s1600/odd+bear+seated.jpg&#39;, &#39;https://www.henrymayo.com/images/content-images/Teddy-Bear.jpg&#39;, &#39;https://www.onlinedelivery.in/images/thumbnails/1202/1165/detailed/29/8522.jpg&#39;, &#39;https://usercontent2.hubstatic.com/14720461_f1024.jpg&#39;, &#39;https://www.buildabear.com/on/demandware.static/-/Sites-buildabear-master/default/dw2b81d8a7/28502x.jpg&#39;, &#39;https://cdn.shopify.com/s/files/1/2622/2548/products/wholesale-plush-in-a-rush-112-14235212972134_1200x.jpg?v=1584034090&#39;, &#39;https://www.hicodenver.com/wp-content/uploads/2020/05/Teddy-Bear-with-Heart.png&#39;, &#39;http://1.bp.blogspot.com/-z6yWAofGr14/T3FujYmUuTI/AAAAAAAABZ8/LY-pQFofo0o/s1600/Christmas+Teddy+Bear+Wallpapers+4.jpg&#39;, &#39;https://www.worldofbears.com/acatalog/steiff-113666.jpg&#39;, &#39;http://traditionsjewishgifts.com/media/brown-hanukkah-plush-teddy-bear-RLTYTEDDY2.jpg&#39;, &#39;https://www.school-bears.co.uk/wp-content/uploads/2018/01/personalised-teddy-bear-anne.jpg&#39;, &#39;https://www.worldofbears.com/acatalog/ean-034978.jpg&#39;, &#39;https://sc01.alicdn.com/kf/HTB17fixJ1uSBuNjy1Xcq6AYjFXaJ.jpg&#39;, &#39;https://api.time.com/wp-content/uploads/2019/12/Teddy-Bear.jpg?quality=85&amp;w=1200&amp;h=628&amp;crop=1&#39;, &#39;http://weneedfun.com/wp-content/uploads/2015/10/Cute-Teddy-Bear-Wallpaper-4.jpg&#39;, &#39;https://1.bp.blogspot.com/-gdpjJWS07gg/UkK6oVmYZXI/AAAAAAAAACY/RZu_k0a2hl4/s1600/Giant+Teddy+Halloween+2013+photo+blog+1.jpg&#39;, &#39;https://pixfeeds.com/images/baby-care/baby-gifts/1280-622057492-white-teddy-bear.jpg&#39;, &#39;https://purepng.com/public/uploads/large/two-teddy-bear-in-basket-qyo.png&#39;, &#39;https://3.bp.blogspot.com/_ED0zYuiiwBg/S_FJynlFrhI/AAAAAAAAB5w/ioeinkP5Ri0/s1600/bears+profile.JPG&#39;, &#39;https://cdn11.bigcommerce.com/s-dee9d/images/stencil/1280x1280/products/143/1173/Sweetie-Pie-Big-Love-hazelnut-brown-teddy-bear-30in__97755.1542992358.jpg?c=2&#39;, &#39;https://d3h6k4kfl8m9p0.cloudfront.net/stories/B4LWqbQh48c0ultSGdJraA.jpeg&#39;, &#39;https://cdn.notonthehighstreet.com/system/product_images/images/001/942/001/original_baby-teddy-bear-dress-up-costume.jpg&#39;, &#39;http://cdn.shopify.com/s/files/1/0748/9103/products/jellycat_18_bumbly_bears_grande.jpg?v=1530708337&#39;, &#39;https://www.taylorherring.com/wp-content/uploads/2015/04/GiantTeddyBears-5-781x1020.jpg&#39;, &#39;http://1.bp.blogspot.com/-4Z91ISiPs94/UYzX1S-xB9I/AAAAAAAAE7c/MGsL0bQ2EpY/s1600/Coco-L-Cuddles-white-teddy-bear-with-necklace-26in__23715.1327379838.1280.1280.jpg&#39;, &#39;https://theeducationhub.org.nz/wp-content/uploads/2020/03/Teddy-bear-hunt-scaled.jpg&#39;, &#39;https://cdn.suwalls.com/wallpapers/photography/happy-teddy-bear-family-under-the-snowy-pine-tree-51847-1920x1080.jpg&#39;, &#39;https://cdn8.bigcommerce.com/s-dee9d/images/stencil/1280x1280/products/875/6201/Adorable_Brown_Bears_Set_Of_three_Gift_Huge_Family_Giant_Teddy__55363.1436899340.jpg?c=2&#39;, &#39;https://teddybearsandfriends.com/wp-content/uploads/2013/12/Teddy-Bear-Miniature-US-Special-1984-97-98-1_.jpg&#39;, &#39;https://usercontent2.hubstatic.com/11954973_f260.jpg&#39;, &#39;https://wallsdesk.com/wp-content/uploads/2016/11/Teddy-Bear-Wallpapers-HD.jpg&#39;, &#39;http://www.fitzulas.com/Merchant4c/graphics/00000001/2017/173902.jpg&#39;, &#39;https://4.bp.blogspot.com/-m23FOuiaNfM/Vlcb1HUm1-I/AAAAAAAABi4/NAAxnfHZ7kY/s1600/IMG_2519.JPG&#39;, &#39;https://cdn8.bigcommerce.com/s-dee9d/images/stencil/1280x1280/products/354/2910/Sweetie-Tubs-mocha-brown-teddy-bear-65in_3__58929.1323818431.jpg?c=2&#39;, &#39;https://oneofakindantiques.com/r.php?itemNumber=5261&amp;imageNumber=1&amp;w=1500&amp;type=regular&#39;, &#39;https://teddybears.co.uk/wp-content/uploads/2017/09/113321.jpg&#39;, &#39;https://i.ebayimg.com/00/s/MTAyNFg3Njg=/z/pnMAAOSw7eld87sL/$_86.JPG&#39;, &#39;https://www.megelles.com/assets/full/MEG-frankie.jpg?20191212083854&#39;, &#39;https://www.fromme.co.zw/uploads/2020/08/Teddy-FM_.jpg&#39;, &#39;http://2.bp.blogspot.com/-uBj8qN2NvdM/T3FurKV2-WI/AAAAAAAABaE/04CNHLuEczw/s1600/Christmas+Teddy+Bear+Wallpapers.jpg&#39;, &#39;https://bestdolltoys.com/wp-content/uploads/2020/03/51YOoVe9H1L.jpg&#39;, &#39;https://cdn.thewhoot.com/wp-content/uploads/2018/06/Knitted-Teddy-Bear-Patterns--550x896.jpg&#39;, &#39;https://cdn0.rubylane.com/_pod/item/1130386/Bear1/Adorable-antique-Jointed-Mohair-Teddy-Bear-full-4o-2048-a9115339-r-ffffff-f68787.jpg&#39;, &#39;https://i.ebayimg.com/00/s/MTAyNFg4OTk=/z/pwYAAOSw4VRc6XRa/$_86.JPG&#39;, &#39;http://2.bp.blogspot.com/_ED0zYuiiwBg/TTd9rrMJswI/AAAAAAAADFc/i3w3l43MeGg/s1600/aetna.JPG&#39;, &#39;https://s32071.pcdn.co/wp-content/uploads/ep0195_1.jpg&#39;, &#39;https://craftsmumship.com/wp-content/uploads/2013/04/Kina-dolls-size-knitted-cardigan.jpg&#39;, &#39;https://www.professorshouse.com/wp-content/uploads/2019/08/teddy-bear-names.jpg&#39;, &#39;http://mylitter.com/wp-content/uploads/2019/02/bear.jpg&#39;, &#39;https://petvblog.com/wp-content/uploads/2020/06/teddy-bear-puppies-1024x683.jpg&#39;, &#39;https://www.worldofbears.com/acatalog/steiff-ean-000997.jpg&#39;, &#39;https://3.bp.blogspot.com/_ED0zYuiiwBg/TLNuVSd7t_I/AAAAAAAACrE/AXkCJv9QF9Y/s1600/teddy+bears+halloween.JPG&#39;, &#39;http://cdn.shopify.com/s/files/1/2975/6858/products/large-tan-bear_1200x1200.jpg?v=1524446719&#39;, &#39;http://www.familytree.com/wp-content/uploads/2017/09/National-Teddy-Bear-Day-Find-more-genealogy-blogs-at-FamilyTree.com_.jpg&#39;, &#39;https://s3.amazonaws.com/hoover.church.of.christ/wp-content/uploads/2020/08/teddy-bear-sick-in-the-hospital.jpg&#39;, &#39;https://www.stuffedwithplushtoys.com/assets/full/9750-30.jpg?20180212090824&#39;, &#39;https://www.worldofbears.com/acatalog/steiff-ean-111556.jpg&#39;, &#39;https://cdn8.bigcommerce.com/s-dee9d/images/stencil/700x900/products/883/8961/4ft_green_teddy_bear_Big_smile_and_soft_cuddly_bear__85725.1493921227.jpg?c=2&#39;, &#39;https://www.carouselshop.co.uk/media/catalog/product/cache/9/image/2000x/040ec09b1e35df139433887a97daa66f/E/E/EE49104AE5D9AFA3C9C246D2F4F81F73.jpg&#39;, &#39;https://www.elizabeths.co.uk/upload/mt/eliz126/products/lg_null-teddy-bearsgrey.jpg&#39;, &#39;https://www.sayitwithbears.co.uk/wp-content/uploads/2017/05/SN0778-925x1024.jpg&#39;, &#39;https://www.grabhub.co.uk/wp-content/uploads/2020/07/Peek-a-Boo-Teddy-Bear-1.jpg&#39;, &#39;https://images.wallpaperscraft.com/image/soft_toy_teddy_bear_bear_117110_938x1668.jpg&#39;, &#39;https://www.snappysnaps.co.uk/media/catalog/product/cache/62/image/650x650/9df78eab33525d08d6e5fb8d27136e95/s/n/snappy_teddy_bear.png&#39;, &#39;https://petclassifieds.com/wp-content/uploads/2020/10/20201003_153234.jpg&#39;, &#39;https://images.wallpaperscraft.com/image/toy_teddy_bear_teddy_31381_800x1420.jpg&#39;, &#39;https://www.curiousmondo.com/images/2017/11/02/teddy-bear-making-04.jpg&#39;, &#39;https://www.worldofbears.com/acatalog/LCG01.jpg&#39;, &#39;https://image.made-in-china.com/2f0j00iOetbZrDhvzU/Mini-Baby-Teddy-Bear-Keychain-with-Shirt.jpg&#39;, &#39;https://pngimg.com/uploads/teddy_bear/teddy_bear_PNG106.png&#39;, &#39;https://www.thunderbay.ca/en/recreation/resources/Thunder-Bay_recreation_interior_0032_Eventsteddy-bears-picnic.jpg&#39;, &#39;http://1.bp.blogspot.com/-NosZBJngTnA/Tp_rt11Z4PI/AAAAAAAAAJg/GNVaaoWmesg/s1600/Teddy+bear+detail1.JPG&#39;, &#39;https://www.carouselshop.co.uk/media/catalog/product/cache/9/image/2000x/040ec09b1e35df139433887a97daa66f/D/1/D10F255704F7CE7FBEB25963EFF90A74.jpg&#39;, &#39;https://www.scarymommy.com/wp-content/uploads/2017/11/screen-shot-2017-11-13-at-8-39-00-am.png&#39;, &#39;https://3.bp.blogspot.com/-JB9Xu_dEIxA/UkLLT_b-TXI/AAAAAAAAADM/2UnCl1TvU8g/s1600/Giant+Teddy+Fall+2013+photo+blog+3.jpg&#39;, &#39;https://s34468.pcdn.co/wp-content/uploads/2019/09/DSC07821-scaled.jpg&#39;, &#39;https://cdn0.rubylane.com/shops/738907/T722.1L.jpg?63&#39;] Images downloaded. After checking images for issues, 714 (total) images remain. files has 714 elements. files[0] = scraped_images/grizzly/00000143.jpg, files[-1] = scraped_images/teddy/00000109.png2.png . And a routine that will parse filename to get the class label, and another that will list all the files in a certain class . def label_func(file_path): return file_path.parents[0].name # just get the name of the parent directory for the file print(f&quot;label_func yields {set([label_func(fp) for fp in files])}&quot;) # sanity check: do we get all the labels we expect? lbl2files = {l: [f for f in files if label_func(f) == l] for l in labels} . label_func yields {&#39;teddy&#39;, &#39;grizzly&#39;, &#39;black&#39;} . class SiameseImage(fastuple): def show(self, ctx=None, **kwargs): if len(self) &gt; 2: img1,img2,similarity = self else: img1,img2 = self similarity = &#39;Undetermined&#39; if not isinstance(img1, Tensor): if img2.size != img1.size: img2 = img2.resize(img1.size) t1,t2 = tensor(img1),tensor(img2) t1,t2 = t1.permute(2,0,1),t2.permute(2,0,1) else: t1,t2 = img1,img2 line = t1.new_zeros(t1.shape[0], t1.shape[1], 10) return show_image(torch.cat([t1,line,t2], dim=2), title=similarity, ctx=ctx, **kwargs) . class SiameseTransform(Transform): def __init__(self, files, splits): self.splbl2files = [{l: [f for f in files[splits[i]] if label_func(f) == l] for l in labels} for i in range(2)] self.valid = {f: self._draw(f,1) for f in files[splits[1]]} def encodes(self, f): f2,same = self.valid.get(f, self._draw(f,0)) img1,img2 = PILImage.create(f),PILImage.create(f2) return SiameseImage(img1, img2, int(same)) def _draw(self, f, split=0): same = random.random() &lt; 0.4 cls = label_func(f) if not same: cls = random.choice(L(l for l in labels if l != cls)) return random.choice(self.splbl2files[split][cls]),same splits = RandomSplitter()(files) tfm = SiameseTransform(files, splits) tls = TfmdLists(files, tfm, splits=splits) dls = tls.dataloaders(after_item=[Resize(224), ToTensor], after_batch=[IntToFloatTensor, Normalize.from_stats(*imagenet_stats)]) valids = [v[0] for k,v in tfm.valid.items()] assert not [v for v in valids if v in files[splits[0]]] . Defining the Contrastive Loss Model . We&#39;re going to, again, copy the fastai Siamese Networks tutorial but change up the model a bit: we&#39;re going to output two &quot;embedding vectors&quot;, one for each input image. . I found it way easier to interface with the rest of fastai if I just &quot;packaged&quot; these two vectors into one big long vector, and then later just &#39;cut it in half&#39; whenever I needed one vector or the other. . Initially we&#39;re going to use an embedding dimension of 3 so we can visualize it. This isn&#39;t actually going to be ideal for achieving high accuracy, so afterward we&#39;ll re-do it with the dimension increased. . class SiameseNet(nn.Module): def __init__(self, arch=resnet34, lin_ftrs= [256, 128], emb_sz=128, # dimensionality of embeddings: 128 works pretty well. Sadly 3 is too small in my experience ps=0.5, bn_final=False): super(SiameseNet, self).__init__() store_attr() self.body = create_body(self.arch, cut=-2) self.head = create_head(num_features_model(self.body), self.emb_sz, self.lin_ftrs, self.ps, self.bn_final) self.cnn = nn.Sequential(self.body, self.head) def forward(self, x1, x2): # note that this expects two inputs not a single pair-like &quot;SiameseImage&quot; output1 = self.cnn(x1) output2 = self.cnn(x2) return torch.cat((output1,output2),dim=-1) def get_embedding(self, x): # operates on just one image instead of 2 return self.cnn(x) def split_out(out): # this will split the model output down the middle, into the set of two embeddings return torch.split(out, int(out.shape[-1]/2), dim=-1) model = SiameseNet().cuda() apply_init(model.head, nn.init.kaiming_normal_) CL_DISTANCE_FUNC = F.pairwise_distance # btw, cosine similarity did not work well for me -SH CL_MARGIN = 4. # distance beyond which we stop pushing dissimilar items apart. 4 seems to work as well as any other value I tried. class ContrastiveLoss(nn.Module): &quot;&quot;&quot;Takes embeddings of two samples and a target label == 1 if samples are from the same class and label == 0 otherwise&quot;&quot;&quot; def __init__(self, margin=CL_MARGIN): # big margin for training means &quot;always keep pushing dissimilar points away&quot; super(ContrastiveLoss, self).__init__() self.margin = margin def forward(self, embs, target): emb1, emb2 = split_out(embs) dist = CL_DISTANCE_FUNC(emb1, emb2) pdist, ndist = dist*target, dist*(1-target) loss = 0.5* ((pdist**2) + (F.relu(self.margin-ndist)**2)) # relu serves as the &quot;hinge&quot; return loss.mean() def siamese_splitter(m): return L(m.body, m.head).map(params) . Downloading: &#34;https://download.pytorch.org/models/resnet34-333f7ec4.pth&#34; to /root/.cache/torch/hub/checkpoints/resnet34-333f7ec4.pth . . We&#39;ll define the following custom way of measuring accuracy, called sim_acc . def sim(p, delta=None): &quot;where outputs are within delta of each other, they are similar (1), otherwise not (0)&quot; if delta is None: delta = CL_MARGIN * 0.45 # a bit less than half the margin seems to work ok p0, p1 = split_out(p) return (CL_DISTANCE_FUNC(p0,p1) &lt;= delta)*1 def sim_acc(pred,targ, delta=None): &quot;similarity accuracy&quot; return ( sim(pred, delta=delta) == targ ).float().mean() . Define the model, freeze it, and run the LRFinder: . learn = Learner(dls, model, loss_func=ContrastiveLoss(), splitter=siamese_splitter, metrics=sim_acc) learn.freeze() . learn.lr_find() # for some reason lr_find takes FOREVER. . SuggestedLRs(valley=tensor(0.0132)) . learn.fit_one_cycle(5, 0.02) # below, note that sim_acc=0.5 is roughly the same as &quot;random guessing&quot; . epoch train_loss valid_loss sim_acc time . 0 | 182.274185 | 35.945770 | 0.654930 | 00:55 | . 1 | 127.189186 | 14.088330 | 0.654930 | 00:55 | . 2 | 91.577187 | 6.649684 | 0.654930 | 00:57 | . 3 | 69.468987 | 4.976199 | 0.669014 | 00:55 | . 4 | 55.596302 | 4.554039 | 0.683099 | 00:56 | . learn.unfreeze() learn.fit_one_cycle(4, slice(1e-5, 1e-3)) . epoch train_loss valid_loss sim_acc time . 0 | 15.782226 | 4.337954 | 0.690141 | 00:56 | . 1 | 15.417539 | 4.133821 | 0.725352 | 00:57 | . 2 | 14.990416 | 4.219871 | 0.753521 | 01:00 | . 3 | 14.579235 | 4.243847 | 0.767606 | 00:59 | . So, the accuracy is not as good as our regular &quot;traditional&quot;/&quot;vanilla&quot; classifier, but it&#39;s still...well...actually.... I&#39;ve run this many times in the course of preparing the post, and I&#39;ve seen it score as high as 95% and as low as 75%. ...Hmm. Well, moving on for now. . Now we&#39;ll add a show_results method: . myacc_val = 0 # for diagnostically messing with delta @typedispatch def show_results(x:SiameseImage, y, samples, outs, ctxs=None, max_n=6, nrows=None, ncols=3, figsize=None, **kwargs): global myacc_val sims = sim(y[2], delta=None if &#39;delta&#39; not in kwargs else kwargs[&#39;delta&#39;]) acc = (sims == x[2]).float().mean().item() # compute accuracy for diagnostic purposes if &#39;show_acc&#39; in kwargs and kwargs[&#39;show_acc&#39;]: print(&quot;accuracy = &quot;,acc) myacc_val = acc if &#39;just_acc&#39; in kwargs: return if figsize is None: figsize = (ncols*6, max_n//ncols * 3) if ctxs is None: ctxs = get_grid(min(x[0].shape[0], max_n), nrows=None, ncols=ncols, figsize=figsize) for i,ctx in enumerate(ctxs): pred, targ = sims[i].item(), x[2][i].item() title = f&#39;Actual: {[&quot;Not similar&quot;,&quot;Similar&quot;][targ]} n Prediction: {[&quot;Not similar&quot;,&quot;Similar&quot;][pred]}&#39; if pred != targ: title = &#39;***&#39;+title.upper()+&#39;***&#39; # uppercase when we get it wrong SiameseImage(x[0][i], x[1][i], title).show(ctx=ctx) . learn.show_results(max_n=12, delta=2, show_acc=True) # make max_n large &amp; vary delta to tweak performance . accuracy = 0.78125 . Now Let&#39;s Visualize the Embeddings . @patch def siamembed(self:Learner, item, rm_type_tfms=None, with_input=False): return self.predict(item, rm_type_tfms=None, with_input=False)[0] . import plotly.graph_objects as go nclasses = len(labels) def plot_clusters(labels,dim=3): fig = go.Figure() colors = [&#39;red&#39;,&#39;green&#39;,&#39;blue&#39;,&#39;orange&#39;]+[&#39;black&#39;]*max(nclasses-4,0) for i,l in enumerate(labels): cluster = np.zeros((len(lbl2files[l]),dim)) for j,f in enumerate(lbl2files[l]): # TODO: this is insanely slow; should use batches instead img = PILImage.create(f) cluster[j] = learn.siamembed(SiameseImage(img, img))[0:3].detach().numpy() # TODO: for now just grab the first 3 coorrdinates, not even PCA fig.add_trace( go.Scatter3d(x=cluster[:,0], y=cluster[:,1], z=cluster[:,2], hovertext=labels[i], name=labels[i], mode=&#39;markers&#39;, marker=dict(size=5, opacity=0.6, color=colors[i]))) fig.show() plot_clusters(labels) . . . ^TODO: that is the first 3 of 128 dimensions. So it&#39;ll look more &quot;overlappy&quot; than it really is. . And Now: Do the Zero-Shot! . Give it the spectacled bears, which this model has never seen before! . labels = [&#39;grizzly&#39;,&#39;black&#39;,&#39;teddy&#39;,&#39;spectacled&#39;] scrape_for_me(dl_path, [labels[-1]], search_suffix, erase_dir=False, max_n=300) subdirs, path, files = labels, Path(dl_path), [] for s in subdirs: files += get_image_files(path/s) print(f&#39;{len(files)} files ready to load.&#39;) print(f&quot;files[0] = {files[0]}, files[-1] = {files[-1]}&quot;) print(f&quot;label_func yields {set([label_func(fp) for fp in files])}&quot;) # sanity check: do we get all the labels we expect? lbl2files = {l: [f for f in files if label_func(f) == l] for l in labels} plot_clusters(labels) . spectacled bear: Got 262 image URLs. Downloading... urls = [&#39;https://s1.ibtimes.com/sites/www.ibtimes.com/files/styles/embed/public/2017/06/28/andean-bear-14218511920.jpg&#39;, &#39;http://4.bp.blogspot.com/-6xZLUXHh8Uc/UUxmEy9QZBI/AAAAAAAAXcY/TMXg3WwS3GA/s1600/Spectacled+Bear+2.jpg&#39;, &#39;https://www.coolearth.org/wp-content/uploads/2016/06/Spectacled-Bear-2.jpg&#39;, &#39;https://s.hdnux.com/photos/01/07/31/01/18714719/5/920x920.jpg&#39;, &#39;https://www.bioexpedition.com/wp-content/uploads/2014/10/Spectacled_Bear_Dave-Pape.jpg&#39;, &#39;http://www.bearsoftheworld.net/images/bears/spectacled_bear_02.jpg&#39;, &#39;https://live.staticflickr.com/7431/9349596216_623a25b335_b.jpg&#39;, &#39;https://wallpapercave.com/wp/wp2676931.jpg&#39;, &#39;http://3.bp.blogspot.com/-Sg8TmR5qh88/UUxmNY4d0HI/AAAAAAAAXcw/dpL2qFHZvp0/s1600/Spectacled+Bear+5.jpg&#39;, &#39;https://wanderlord.com/wp-content/uploads/2017/03/Spectacled-Bear.jpg&#39;, &#39;https://i.natgeofe.com/n/804d9cdb-f8da-449a-93b0-aac7a448b7c0/spectacled-bear_thumb.JPG?w=1200&#39;, &#39;https://img00.deviantart.net/46a0/i/2011/237/1/8/spectacled_bear_by_skarkdahn-d47sr16.jpg&#39;, &#39;https://www.animalphotos.me/mamm1/bear-spec_files/spectacle2.jpg&#39;, &#39;http://justfunfacts.com/wp-content/uploads/2017/11/spectacled-bear-5.jpg&#39;, &#39;https://www.activewild.com/wp-content/uploads/2018/03/spectacled-bears-1024x683.jpg&#39;, &#39;https://a-z-animals.com/media/animals/images/original/spectacled_bear4.jpg&#39;, &#39;http://www.rainforest-alliance.org/sites/default/files/2016-09/spectacled-bear-header.jpg&#39;, &#39;https://lh6.googleusercontent.com/-Sptgd7fYIqY/TYk4YVRbndI/AAAAAAAAB7E/MYqqcMu-isw/s1600/Spectacled_Bear_Tennoji_2.jpg&#39;, &#39;https://pre00.deviantart.net/e486/th/pre/i/2012/023/6/5/spectacled_bear_by_shimmichan-d4nd6wh.jpg&#39;, &#39;https://www.vanwageningen.net/i/upload/2014/10/29/20141029132015-bc5e40e5-me.jpg&#39;, &#39;https://live.staticflickr.com/6124/6014296334_89fcc4133a_b.jpg&#39;, &#39;https://farm4.staticflickr.com/3606/3292437597_527cab83ef_z.jpg&#39;, &#39;https://media.buzzle.com/media/images-en/photos/mammals/bears/1200-1002804-spectacled-bear-face.jpg&#39;, &#39;https://focusingonwildlife.com/news/wp-content/uploads/003_MTF_0221_spectacled.jpg&#39;, &#39;http://justfunfacts.com/wp-content/uploads/2017/11/spectacled-bear.jpg&#39;, &#39;https://res.cloudinary.com/dk-find-out/image/upload/q_70,c_pad,w_1200,h_630,f_auto/MA_00155387_i4leyu.jpg&#39;, &#39;https://colombiareports.com/wp-content/uploads/2017/07/spectacled_bear.jpg&#39;, &#39;https://i.ytimg.com/vi/wWgdrMOH8d4/maxresdefault.jpg&#39;, &#39;http://1.bp.blogspot.com/-qAm-_Q_k5I0/TfA4AvZt_1I/AAAAAAAABNM/Ov-m-olxu_I/s640/Spectacled-Bear.jpg&#39;, &#39;https://1.bp.blogspot.com/-hq_blqxeAVk/XsFZuPiS06I/AAAAAAAADps/lVr1KiOLbLEfjVO34nufzWmMdo8DJXsOQCPcBGAYYCw/w1200-h630-p-k-no-nu/Spectacled_Bear.jpg&#39;, &#39;http://tenrandomfacts.com/wp-content/uploads/2016/07/Spectacled-Bear.jpg&#39;, &#39;https://live.staticflickr.com/8393/8696456854_49f079714b_b.jpg&#39;, &#39;https://happygringo.com/wp-content/uploads/2020/02/portada-1.jpg&#39;, &#39;https://static1.squarespace.com/static/56a1a14b05caa7ee9f26f47d/t/57390f5520c6471cf068c6cc/1463357302812/&#39;, &#39;https://www.zoochat.com/community/media/spectacled-bears.112852/full?d=1282939786&#39;, &#39;http://3.bp.blogspot.com/-EGI8NqbPcvo/UUxmUJ6t1qI/AAAAAAAAXdA/fDUqD60Tv00/w1200-h630-p-k-no-nu/Spectacled+Bear.jpg&#39;, &#39;https://www.zoochat.com/community/media/spectacled-bear.109154/full?d=1281223819&#39;, &#39;https://nationalzoo.si.edu/sites/default/files/styles/1400x700_scale_and_crop/public/animals/andean-bear-007.jpg?itok=MJoAKHeV&#39;, &#39;https://colombiareports.com/wp-content/uploads/2017/07/andean-bear-2-2017-01-31.jpg&#39;, &#39;https://img.izismile.com/img/img3/20100513/640/cute_spectacled_bear_640_11.jpg&#39;, &#39;https://mma.prnewswire.com/media/1030258/The_Wild_Animal_Sanctuary_Rescued_Spectacled_Bear.jpg?p=facebook&#39;, &#39;https://www.zoochat.com/community/media/spectacled-bear.108090/full?d=1280694438&#39;, &#39;https://natureandculture.org/wp-content/uploads/2019/03/Cloud-Forest-Andean-Bear-768x432.jpg&#39;, &#39;http://featuredcreature.com/wp-content/uploads/2012/10/6a010535647bf3970b0134830b6483970c-800wi2.jpg&#39;, &#39;https://lh6.googleusercontent.com/-Sptgd7fYIqY/TYk4YVRbndI/AAAAAAAAB7E/MYqqcMu-isw/w1200-h630-p-k-no-nu/Spectacled_Bear_Tennoji_2.jpg&#39;, &#39;https://live.staticflickr.com/2900/14021204319_c4d111529b_b.jpg&#39;, &#39;http://theamazonianassignment.weebly.com/uploads/1/2/1/3/12136910/944137409_orig.jpg&#39;, &#39;https://www.aboutanimals.com/images/spectacled-bear-ecuadorian-andes-mountains-328x562.jpg?c14113&#39;, &#39;http://norwichsciencefestival.co.uk/wp-content/uploads/sites/4/SavingSpectacledBear1200x500_1200x500_acf_cropped.jpg&#39;, &#39;https://www.parkgrandhydepark.co.uk/blog/wp-content/uploads/2017/05/shutterstock_492598162.jpg&#39;, &#39;https://www.apex-expeditions.com/wp-content/uploads/2015/04/04-Spectacled-Bear-Papallacta-%C2%A9-Jonathan-Rossouw.jpg&#39;, &#39;https://66.media.tumblr.com/9decce76250961499fe7054e55a907b2/tumblr_omltex2dq01qg5f3ho1_1280.jpg&#39;, &#39;http://i1.treknature.com/photos/2959/bear_0111111.jpg&#39;, &#39;https://nationalzoo.si.edu/sites/default/files/animals/andean-bear-001.jpg&#39;, &#39;https://live.staticflickr.com/4103/4831613245_311f43d099_b.jpg&#39;, &#39;https://imgs.mongabay.com/wp-content/uploads/sites/20/2018/06/15124317/MTF_0409_golden_spectacled_bear_%C2%A9michael_tweddle.jpg&#39;, &#39;https://img.izismile.com/img/img3/20100513/640/cute_spectacled_bear_640_13.jpg&#39;, &#39;http://farm4.staticflickr.com/3419/3774261161_577e09be2c_z.jpg?zz=1&#39;, &#39;http://2.bp.blogspot.com/-vdZv8wGWMdo/UUxmNCvsvhI/AAAAAAAAXco/H5Pzgk5dtOk/s1600/Spectacled+Bear+6.jpg&#39;, &#39;https://www.zoochat.com/community/media/spectacled-bear.342492/full?d=1479072515&#39;, &#39;https://www.si.edu/sites/default/files/newsdesk/photos/20100422-040mm.jpg&#39;, &#39;http://1.bp.blogspot.com/-G-M1STXREJI/UUxmFpUBSoI/AAAAAAAAXcg/qvb2WX5SW0s/s1600/Spectacled+Bear+3.jpg&#39;, &#39;https://www.wisebirding.co.uk/wp-content/uploads/Spectacled-Bear2.jpg&#39;, &#39;https://www.sustainability-times.com/wp-content/uploads/thumbs/AndeanBear_ZN-38o7iv74jqj9grl16xtssg.jpg&#39;, &#39;https://media.sciencephoto.com/image/c0175188/800wm/C0175188-Spectacled_Bear.jpg&#39;, &#39;https://wallpapercave.com/wp/wp2676880.jpg&#39;, &#39;http://www.stlzoo.org/files/1014/0017/1158/ANDEANBEAR9410WINKELMAN2.jpg&#39;, &#39;https://2.bp.blogspot.com/-KBaTMMdVHoY/T_A-HQlM8mI/AAAAAAAAMHE/cBonrzV6sfY/s1600/Spectacled+Bear2.jpg&#39;, &#39;https://www.theanimalfiles.com/images/spectacled_bear_1.jpg&#39;, &#39;https://www.mindenpictures.com/cache/pcache2/00542362.jpg&#39;, &#39;https://www.tourradar.com/days-to-come/wp-content/uploads/2016/01/Spectacled-bear.jpg&#39;, &#39;https://www.zoochat.com/community/media/spectacled-bear.250657/full?d=1393011952&#39;, &#39;https://images.fineartamerica.com/images-medium-large-5/2-spectacled-bear-in-andean-foothills-peru-tui-de-roy.jpg&#39;, &#39;https://images.robertharding.com/preview/RM/RH/HORIZONTAL/1127-16827.jpg&#39;, &#39;https://newyork.cbslocal.com/wp-content/uploads/sites/14578484/2017/05/julie-larsen-maher_1638_andean-bear-and-cub_qz_05-01-17.jpg?w=1024&amp;h=0&amp;crop=1&#39;, &#39;http://2.bp.blogspot.com/-1jh4WfVEyx4/T_A-OoNHGFI/AAAAAAAAMHM/Wm41l9WFfgs/s1600/Spectacled+Bear3.jpg&#39;, &#39;http://blog.nationalgeographic.org/wp-content/uploads/2009/02/Spectacled-Bear-picture-2.jpg&#39;, &#39;http://2.bp.blogspot.com/-und_0cRk_O8/URGtY1vnHGI/AAAAAAAAARQ/9aAIlFO437s/s1600/spectacled-bear3.jpg&#39;, &#39;http://www.rainforest-alliance.org/sites/default/files/styles/750w_585h/public/2016-09/spectacled-bear-header.jpg?itok=0V7_KGpe&#39;, &#39;https://wtop.com/wp-content/uploads/2015/03/16619693699_5bd5ac78d4_b.jpg&#39;, &#39;https://i.pinimg.com/originals/90/88/80/908880871027303cfe43c19ea4655e75.jpg&#39;, &#39;https://www.sustainability-times.com/wp-content/uploads/2019/06/AndeanBear_ZN.jpg&#39;, &#39;http://www.animalspot.net/wp-content/uploads/2015/12/Spectacled-Bear-Habitat.jpg&#39;, &#39;https://www.aboutanimals.com/images/spectacled-bear-sitting-820x377.jpg?d8bc0c&#39;, &#39;http://seethewild.org/wp-content/uploads/2016/05/features.jpeg&#39;, &#39;https://i.pinimg.com/originals/24/eb/4e/24eb4e758b8bf55ef1c8a0d10e3d6b4a.jpg&#39;, &#39;https://www.discoveranimals.co.uk/wp-content/uploads/2014/09/spectacled_bear.jpg&#39;, &#39;https://www.shropshirestar.com/resizer/GqPX0-puTDFAn5Ff_V9fBEpM2Jk=/1000x0/filters:quality(100)/arc-anglerfish-arc2-prod-shropshirestar-mna.s3.amazonaws.com/public/4PL5ZCNSKVBPVK6UPFUAPHLMUI.jpg&#39;, &#39;http://upload.wikimedia.org/wikipedia/commons/thumb/7/77/Spectacled_Bear.jpg/436px-Spectacled_Bear.jpg&#39;, &#39;https://d.ibtimes.co.uk/en/full/1613674/spectacled-bear.jpg?w=400&#39;, &#39;https://images.fineartamerica.com/images/artworkimages/mediumlarge/1/spectacled-bear-portrait-rose-santuci-sofranko.jpg&#39;, &#39;http://justfunfacts.com/wp-content/uploads/2017/11/spectacled-bear-cubs.jpg&#39;, &#39;http://1.bp.blogspot.com/-Srm8EQe_xjU/TwK6I75A_jI/AAAAAAAAEt8/jQqGqztNuls/s1600/spectacled-bear-spectacled-bear.jpg&#39;, &#39;https://st2.depositphotos.com/4380587/11651/i/950/depositphotos_116510914-stock-photo-picture-of-a-spectacled-bear.jpg&#39;, &#39;http://kids.sandiegozoo.org/sites/default/files/2017-07/andean-bear-tree.jpg&#39;, &#39;https://southafricatoday.net/wp-content/uploads/2018/07/1532665810_1-1024x1000.jpg&#39;, &#39;https://wallpapercave.com/wp/wp2676970.jpg&#39;, &#39;https://upload.wikimedia.org/wikipedia/en/c/ce/Spectacled-bear.jpg&#39;, &#39;https://i.pinimg.com/originals/0b/24/7b/0b247b1295ab238a6a9873bfc9465d45.jpg&#39;, &#39;http://bearlegend.com/wp-content/uploads/2012/04/6093558068_e2c0675823_o.jpg&#39;, &#39;http://4.bp.blogspot.com/-zHQPWNws7VQ/TwK7vuoleYI/AAAAAAAAEuI/iZJGb0R9CEQ/s1600/spectacled_bear-spectacled_bear.jpg&#39;, &#39;http://www.ecns.cn/hd/2020/05/18/e41ef93a186c40a38726189b8901f6f3.jpg&#39;, &#39;https://lh3.googleusercontent.com/-TijTJ1kPu7U/TYk4Z-b-flI/AAAAAAAAB7M/X8njDXrfBAk/s1600/spectacled-beard.jpg&#39;, &#39;https://vignette.wikia.nocookie.net/vsbattles/images/0/0c/Spectacled_bear_vector_by_phoenixtdm_dcek9fs-fullview.png/revision/latest?cb=20190617023302&#39;, &#39;https://4.bp.blogspot.com/-xKDgjZh9q_Y/Ux2oRtCuyXI/AAAAAAAAMsM/PEgp-j44bS8/s1600/Spectacled-Bear.jpg&#39;, &#39;https://www.naturalhistoryonthenet.com/wp-content/uploads/2017/01/Spectacled-Bear.jpg&#39;, &#39;https://www.saczoo.org/wp-content/uploads/2017/01/Spectacled-Bears.jpg&#39;, &#39;https://images6.alphacoders.com/406/406817.jpg&#39;, &#39;http://www.animalspot.net/wp-content/uploads/2015/12/Baby-Spectacled-Bear.jpg&#39;, &#39;http://www.mammalwatching.com/wp-content/uploads/2018/01/EC-square-fox.jpg&#39;, &#39;https://www.natureplprints.com/p/729/lucas-bustamante/spectacled-andean-bear-tremarctos-ornatus-maquipucuna-15316013_73045.jpg&#39;, &#39;http://4.bp.blogspot.com/-VxZ-1v7UTjY/UEAGEWmRNTI/AAAAAAAAk5w/iLr_Y0Pnrtg/s1600/120813+Spectacled+Bear+small.jpg&#39;, &#39;https://www.bearsinmind.org/Uploaded_files/Content/brilbeer.a3cb36.JPG&#39;, &#39;http://newyorktrendnyc.com/wp-content/uploads/2013/11/andean-bear.jpg&#39;, &#39;https://i.pinimg.com/originals/5b/88/ab/5b88ab3ff6b9d74aea2e1d94e521bc72.jpg&#39;, &#39;http://www.zooborns.com/.a/6a010535647bf3970b0192aac4e2da970d-500wi&#39;, &#39;https://home.bt.com/images/spectacled-bears-and-snow-leopards-among-creatures-getting-funding-boost-136427641293802601-180606124211.jpg&#39;, &#39;http://2qn4774cz98e17p2h549htbt.wpengine.netdna-cdn.com/wp-content/uploads/2013/11/Male-Andean-Bear-face.jpg&#39;, &#39;https://nationalzoo.si.edu/sites/default/files/animals/andeanbear-006.jpg&#39;, &#39;https://live.staticflickr.com/250/515823267_281f36649e_b.jpg&#39;, &#39;http://bearlegend.com/wp-content/uploads/2012/04/5409184198_ccc4b2c5a4_o.jpg&#39;, &#39;https://www.worldatlas.com/r/w728/upload/73/02/b4/shutterstock-118635484-min.jpg&#39;, &#39;https://4.bp.blogspot.com/-8Na0W3PKG-U/UpRE_rP_gXI/AAAAAAAABZI/rU-WV9XxIIE/s1600/Spectacled-Bear-gaert.JPG&#39;, &#39;https://www.pitara.com/wordpress/wp-content/uploads/2001/02/spectacled-bear.jpg&#39;, &#39;http://3.bp.blogspot.com/-EGI8NqbPcvo/UUxmUJ6t1qI/AAAAAAAAXdA/fDUqD60Tv00/s1600/Spectacled+Bear.jpg&#39;, &#39;https://www.si.edu/sites/default/files/newsdesk/photos/bernardo-021mm.jpg&#39;, &#39;https://lh6.googleusercontent.com/-cc05A4QkDxc/TYk4S3w1qFI/AAAAAAAAB7A/3vb0t85A7GU/s1600/spectacled_bear_03.jpg&#39;, &#39;https://www.aboutanimals.com/images/spectacled-bear-rocks-820x545.jpg?c14113&#39;, &#39;https://philadelphiazoo.160over90.io/wp-content/uploads/2019/10/Andean.SpectacledBear_Joaquin_0665.jpg&#39;, &#39;https://i.ytimg.com/vi/VXFIYIQgEkg/maxresdefault.jpg&#39;, &#39;https://a4.pbase.com/o6/34/564334/1/70568852.6wuZLzi7.20061119spectacledbear03ccomp.jpg&#39;, &#39;http://www.animalphotos.me/mamm1/bear-spec_files/spectacle1.jpg&#39;, &#39;https://ca-times.brightspotcdn.com/dims4/default/0a24096/2147483647/strip/true/crop/2000x3000+0+0/resize/840x1260!/quality/90/?url=https:%2F%2Fcalifornia-times-brightspot.s3.amazonaws.com%2Faa%2F74%2F245459fb41edb020b50a502e2a3a%2Ft16-0554-017-lg.jpg&#39;, &#39;https://media.buzzle.com/media/images-en/photos/mammals/bears/1200-71192249-spectacled-bear.jpg&#39;, &#39;https://farm3.staticflickr.com/2913/14137750328_d101997a4c_z.jpg&#39;, &#39;http://www.realworldholidays.co.uk/blog/wp-content/uploads/2015/12/spectacled-bear1.jpg&#39;, &#39;http://www.facts-about.info/wp-content/uploads/2014/12/Andean-Bear-at-Reid-Park-Zoo.jpg&#39;, &#39;http://justfunfacts.com/wp-content/uploads/2017/11/spectacled-bear-2.jpg&#39;, &#39;https://1.bp.blogspot.com/-Tou2SRVCRqw/UpRFIXCbzQI/AAAAAAAABZ8/CTtSSU6GhZI/s1600/Spectacled-Bear.jpg&#39;, &#39;https://img.izismile.com/img/img3/20100513/640/cute_spectacled_bear_640_01.jpg&#39;, &#39;http://www.facts-about.info/wp-content/uploads/2014/12/Andean-Bear1.jpg&#39;, &#39;http://upload.wikimedia.org/wikipedia/commons/6/62/Spectacled_Bear_059.jpg&#39;, &#39;https://media.nbcwashington.com/2019/09/4621594915_9022bfd814_b.jpg?fit=1024%2C702&#39;, &#39;https://philadelphiazoo.org/wp-content/uploads/2019/10/Andean.SpectacledBear_Rosie_3395.jpg&#39;, &#39;https://mma.prnewswire.com/media/1030258/The_Wild_Animal_Sanctuary_Rescued_Spectacled_Bear.jpg?p=publish&amp;w=950&#39;, &#39;https://c1.staticflickr.com/5/4149/4956021357_d3aa0407c1_z.jpg&#39;, &#39;http://images.fineartamerica.com/images-medium-large/spectacled-bear-tremarctos-ornatus-cub-pete-oxford.jpg&#39;, &#39;https://i.pinimg.com/736x/b9/ab/6f/b9ab6f27f50527d8ddd610f0f02e88cb--spectacled-bear-spirit-animal.jpg&#39;, &#39;http://2.bp.blogspot.com/-4bGjmY9K4pk/T_A-Yq5aNGI/AAAAAAAAMHc/pv9gEJ8O6Uo/s1600/Spectacled+Bear5.jpg&#39;, &#39;https://vg5b2ejdwb-flywheel.netdna-ssl.com/wp-content/uploads/2015/06/7oboa0_tu_u.jpg&#39;, &#39;https://resize.hswstatic.com/w_907/gif/types-of-spectacled-bear0.jpg&#39;, &#39;http://1.bp.blogspot.com/-xGs4-W-3iSY/TjaZG6_XnOI/AAAAAAAABUE/AkEJ97L1HQc/s1600/156521.jpg&#39;, &#39;https://www.robertharding.com/watermark.php?type=preview&amp;im=RM/RH/HORIZONTAL/1127-12838&#39;, &#39;https://www.zooportraits.com/wp-content/uploads/2018/05/Spectacled-Bear-Tremarctos-Ornatus.jpg&#39;, &#39;https://i.pinimg.com/736x/fa/40/33/fa403340878f175322c07b860b9d6426--spectacled-bear-bolivia.jpg&#39;, &#39;http://img.izismile.com/img/img3/20100513/640/cute_spectacled_bear_640_03.jpg&#39;, &#39;https://ourplnt.com/wp-content/uploads/2016/03/Spectacled-bear.jpg&#39;, &#39;https://i.pinimg.com/originals/ec/0c/96/ec0c969cd38a1a701a2c1e2a87a96561.jpg&#39;, &#39;http://bearlegend.com/wp-content/uploads/2012/04/3956278926_328d1c6a54_o.jpg&#39;, &#39;https://www.rainbowtours.co.uk/upload-files/product-excursions-gallery/EXC-PER-024_1_spectacled-bear.jpg&#39;, &#39;https://2.bp.blogspot.com/-6-AcWMkgynE/VEMIW1x0vtI/AAAAAAAAAEU/xUsNNkFj6rg/s1600/oso.jpg&#39;, &#39;http://cincinnatizoo.org/system/assets/uploads/2014/02/spectaculed-bear.jpg&#39;, &#39;http://3.bp.blogspot.com/-brSuqjGOIG0/URGtpFtyo_I/AAAAAAAAARg/vLE13RVoCsk/s1600/spectacled-bear.jpg&#39;, &#39;https://c2.staticflickr.com/2/1501/24144684635_73b9e79d88_b.jpg&#39;, &#39;https://critter.science/wp-content/uploads/2019/05/sb1.jpg&#39;, &#39;https://reidparkzoo.org/wp-content/uploads/2016/05/andeanbear9768z.jpg&#39;, &#39;https://srcnaut.com/cdn-cgi/image/f=auto,fit=crop,g=0.5x0.5,w=2000,h=1125,q=90,d=1/upload/32/02/df/shutterstock-1188627676.jpg&#39;, &#39;http://i1.chesterchronicle.co.uk/incoming/article8089938.ece/ALTERNATES/s615b/JS50546090.jpg&#39;, &#39;https://conservationnation.org/wp-content/uploads/2020/03/andean-bear-hero.jpg&#39;, &#39;http://seethewild.org/wp-content/uploads/2016/05/dreamstime_15373008-1.jpg&#39;, &#39;https://i1.wp.com/www.bearz.org/en/wp-content/uploads/2015/06/604014_10200989864724976_224585035_n1.jpg&#39;, &#39;https://media.buzzle.com/media/images-en/photos/mammals/bears/1200-30167654-spectacled-bear-with-bamboo.jpg&#39;, &#39;https://www.textbooktravel.com/wp-content/uploads/2020/08/Spectacled-Bear-Cub.jpg&#39;, &#39;https://upload.wikimedia.org/wikipedia/commons/thumb/9/99/Spectacled_Bear_-_Houston_Zoo.jpg/1200px-Spectacled_Bear_-_Houston_Zoo.jpg&#39;, &#39;https://1.bp.blogspot.com/-cloWtyc4dnw/T-5pMXHLd7I/AAAAAAAACog/ebO0-a0x89M/s1600/SpectacledBear.jpg&#39;, &#39;https://www.zoochat.com/community/media/spectacled-bear-at-chester-15-07-12.192796/full?d=1342391273&#39;, &#39;https://res.cloudinary.com/dk-find-out/image/upload/q_80,w_1440,f_auto/MA_00155387_i4leyu.jpg&#39;, &#39;http://2.bp.blogspot.com/-PQGmVUDZAhs/TwK5urRX1LI/AAAAAAAAEtw/s569QHCcx8Y/s1600/spectacled+bear.jpg&#39;, &#39;https://bw-1651cf0d2f737d7adeab84d339dbabd3-gallery.s3.amazonaws.com/images/image_2865567/db2b44df10ba2a567a8e5cc34ddfeed0_original.JPG&#39;, &#39;http://etc.usf.edu/clippix/pix/spectacled-bear-with-piece-of-food-in-its-mouth_medium.jpg&#39;, &#39;https://www.activewild.com/wp-content/uploads/2018/03/spectacled-bear-standing-768x1024.jpg&#39;, &#39;https://www.biolib.cz/IMG/GAL/BIG/28527.jpg&#39;, &#39;http://2.bp.blogspot.com/-1mdQ66udYmw/T_A-UjaJk5I/AAAAAAAAMHU/uJw0kPcz1vc/s1600/Spectacled+Bear4.jpg&#39;, &#39;https://www.apex-expeditions.com/wp-content/uploads/2015/04/02-Spectacled-Bear-Chaparri-JR-5.jpg&#39;, &#39;https://www.factzoo.com/sites/all/img/mammals/bears/spectacled-bear-face.jpg&#39;, &#39;http://images.fineartamerica.com/images-medium-large/andean-or-spectacled-bear-tremarctos-philippe-henry.jpg&#39;, &#39;https://i.pinimg.com/736x/ad/b9/c5/adb9c533cfd5c8f292ce21cabae6f2f9--spectacled-bear-baby-animals.jpg&#39;, &#39;https://4.bp.blogspot.com/-6TV6R9HEc-o/T_A98vwyTEI/AAAAAAAAMG8/ffIXmwgDoXw/s1600/Spectacled+Bear.jpg&#39;, &#39;http://cuencahighlife.com/wp-content/uploads/2015/03/chl-bear2.jpg&#39;, &#39;https://cms.prod.nypr.digital/images/27490/fill-1200x650/&#39;, &#39;https://www.worldatlas.com/upload/43/04/5c/shutterstock-92656222-min.jpg&#39;, &#39;https://c1.staticflickr.com/4/3444/3293260140_4257d5b231.jpg&#39;, &#39;https://www.animalfactsencyclopedia.com/images/bear-spectacledcloseinset.jpg&#39;, &#39;https://i.pinimg.com/originals/9b/34/7e/9b347e3e5fb5b58d954ce84aeccdcc42.jpg&#39;, &#39;https://wallpapercave.com/wp/wp2676943.jpg&#39;, &#39;https://www.si.edu/sites/default/files/newsdesk/photos/andean-bear.jpg&#39;, &#39;https://ecosphere.plus/wp-content/uploads/2018/02/Spectacled-bear_LAM0695-Heinz-Plenge-2-1080x540.jpg&#39;, &#39;https://i2-prod.chesterchronicle.co.uk/incoming/article8089934.ece/ALTERNATES/s1200/JS50546081.jpg&#39;, &#39;https://dancantravel.azurewebsites.net/wp-content/uploads/2017/09/DSC09006-2.jpg&#39;, &#39;https://pre00.deviantart.net/fc19/th/pre/i/2015/204/a/b/an_11dv___spectacled_bear_by_szallonntaidalma-d92d0pi.jpg&#39;, &#39;http://justfunfacts.com/wp-content/uploads/2017/11/spectacled-bear-4.jpg&#39;, &#39;http://justfunfacts.com/wp-content/uploads/2017/11/spectacled-bear-3.jpg&#39;, &#39;https://www.aboutanimals.com/images/spectacled-bear-ogimage.jpg&#39;, &#39;https://images.freeimages.com/images/large-previews/e0f/spectacled-bear-1561333.jpg&#39;, &#39;https://kentattractions.co.uk/wp-content/uploads/2016/09/Spectacled-Bear.jpg&#39;, &#39;https://i.pinimg.com/originals/7c/48/b1/7c48b17f45853a48890e0a32f02aa875.jpg&#39;, &#39;http://gringosabroad.com/wp-content/uploads/2013/11/Male-Andean-Bear-face.jpg&#39;, &#39;https://rangerplanet.com/wp-content/uploads/2019/10/spectacled-bear.jpg&#39;, &#39;https://2.bp.blogspot.com/-1jh4WfVEyx4/T_A-OoNHGFI/AAAAAAAAMHM/Wm41l9WFfgs/s400/Spectacled+Bear3.jpg&#39;, &#39;http://1.bp.blogspot.com/-qM3UoT_SQRk/TiAwjcnmqiI/AAAAAAAAAKE/mQAIjK3XPRg/s1600/spectacled_bear_2.jpg&#39;, &#39;https://www.wisebirding.co.uk/wp-content/uploads/Spectacled-Bear.jpg&#39;, &#39;http://www.factzoo.com/sites/all/img/mammals/bears/spectacled-bear-south-american.jpg&#39;, &#39;https://s3-eu-west-1.amazonaws.com/images.noahsarkzoofarm.co.uk/uploads/tinymce/rasu.jpg&#39;, &#39;https://i.ytimg.com/vi/2TmnhBSyQoo/maxresdefault.jpg&#39;, &#39;https://reidparkzoo.org/wp-content/uploads/2016/05/andeanbear9646z.jpg&#39;, &#39;https://vistapointe.net/images/spectacled-bear-5.jpg&#39;, &#39;https://www.aboutanimals.com/images/spectacled-bear-tree-820x513.jpg?d8bc0c&#39;, &#39;https://standfirst-whitleyaward-production.imgix.net/content/uploads/1996/12/18134457/Tremarctos_ornatus_portrait.jpg?auto=compress,enhance,format&amp;crop=faces,entropy,edges&amp;fit=crop&amp;fm=pjpg&amp;w=1866&amp;h=1400&#39;, &#39;https://c1.staticflickr.com/7/6037/6304684676_8fe4be5717_b.jpg&#39;, &#39;http://bearlegend.com/wp-content/uploads/2012/04/5566818433_9c994ec063_o.jpg&#39;, &#39;https://www.bwallpaperhd.com/wp-content/uploads/2018/12/SpectacledBear.jpg&#39;, &#39;https://cms.prod.nypr.digital/images/27460/fill-661x496/&#39;, &#39;https://i.ytimg.com/vi/lLcCBkNDQxs/maxresdefault.jpg&#39;, &#39;http://justfunfacts.com/wp-content/uploads/2017/11/spectacled-bear-eating-fruit.jpg&#39;, &#39;http://img07.deviantart.net/9fc0/i/2010/201/7/6/spectacled_bear_by_citronvert79.jpg&#39;, &#39;https://critterfacts.com/wp-content/uploads/2019/02/s_158118350.jpg&#39;, &#39;https://images.fineartamerica.com/images-medium-large-5/andean-bear-spectacled-bear-houston-zoo-tessa-fairey.jpg&#39;, &#39;https://images.fineartamerica.com/images/artworkimages/mediumlarge/2/spectacled-bear-david-stasiak.jpg&#39;, &#39;https://media.buzzle.com/media/images-en/photos/mammals/bears/1200-598140-spectacled-bear.jpg&#39;, &#39;http://magarticles.magzter.com/articles/8803/216564/58e38ecbbeeb4/Conservation-Insight-Andean-Bear.jpg&#39;, &#39;https://1.bp.blogspot.com/-DAyv4HJRE4E/XjRg-JFM_SI/AAAAAAAAAPU/NUHh82dMHZYSbMEQR3WEJOUXhO08GI4pACLcBGAsYHQ/s1600/baby-animal-photo-05032016-image-056.jpg&#39;, &#39;http://www.rainforest-alliance.org/sites/default/files/styles/large/public/2016-09/spectacled-bear.jpg?itok=BXWidYtz&#39;, &#39;http://www.parkgrandhydepark.co.uk/blog/wp-content/uploads/2017/05/shutterstock_550667422.jpg&#39;, &#39;https://nationalzoo.si.edu/sites/default/files/animals/andeanbear-005.jpg&#39;, &#39;https://bw-1651cf0d2f737d7adeab84d339dbabd3-gallery.s3.amazonaws.com/images/image_2865571/a3195154ccdac7c9efcbed5727462346_original.JPG&#39;, &#39;http://www.animalspot.net/wp-content/uploads/2015/12/Spectacled-Bear-in-the-Wild.jpg&#39;, &#39;http://bearlegend.com/wp-content/uploads/2012/04/6862037661_30664cf53f_o.jpg&#39;, &#39;https://www.bwallpaperhd.com/wp-content/uploads/2018/12/SpectacledBear-1024x576.jpg&#39;, &#39;http://www.animalspot.net/wp-content/uploads/2015/12/Spectacled-Bear-Eating.jpg&#39;, &#39;http://2.bp.blogspot.com/-3UzekS1270M/TiAwko0VrQI/AAAAAAAAAKI/rOXYR8LXLHM/s1600/spectacled_bear_3.jpg&#39;, &#39;http://www.animalspot.net/wp-content/uploads/2015/12/Spectacled-Bears-300x225.jpg&#39;, &#39;https://animalia.us-east-1.linodeobjects.com/animals/photos/full/1x1/determined.jpg&#39;, &#39;http://cdn4.awwnews.com/images/2015/03/044_3-Spectacled-Bear-Cubs.jpg&#39;, &#39;http://www.peru-breathtaking-trips.com/imgs/Spectacled%20bear.jpg&#39;, &#39;http://lh4.ggpht.com/-2YrERpe5ZeU/UOUBP6Zr8ZI/AAAAAAAAASQ/7oSIuID4iSs/%25255BUNSET%25255D.jpg&#39;, &#39;https://i.pinimg.com/736x/d2/99/fa/d299fa76c3d1a5c0e017514b086ddd9c--spectacled-bear-teddy-bears.jpg&#39;, &#39;https://c2.staticflickr.com/4/3685/8852797884_8f3a84d84c_b_d.jpg&#39;, &#39;https://www.si.edu/sites/default/files/newsdesk/photos/andean_bear_cubs2.jpg&#39;, &#39;https://critterfacts.com/wp-content/uploads/2019/02/s_1083570302_.jpg&#39;, &#39;https://www.worldlandtrust.org/wp-content/uploads/2017/08/RS26943_Ramiro-Mendoza-scr.jpg&#39;, &#39;http://www.kidzone.ws/lw/bears/images/spectacled-bear.jpg&#39;, &#39;https://upload.wikimedia.org/wikipedia/commons/thumb/5/5d/Oso_andino_Porcon.jpg/1200px-Oso_andino_Porcon.jpg&#39;, &#39;https://www.bioexpedition.com/wp-content/uploads/2012/05/Spectacled-Bear.jpg&#39;, &#39;https://www.earlham.ac.uk/sites/default/files/images/articles/Saving-Spectacled-Bear-Deepest-Darkest-Colombia/Saving-Spectacled-Bear-Deepest-Darkest-Colombia-Andean-770.jpg&#39;, &#39;https://featuredcreature.com/wp-content/uploads/2012/10/6a010535647bf3970b0134830b6313970c-800wi2.jpg&#39;, &#39;https://www.apex-expeditions.com/wp-content/uploads/2015/04/01-Spectacled-Bear-Chaparri-JR-2.jpg&#39;, &#39;http://2.bp.blogspot.com/-uKXzB18yA0M/UDBPCtHRm6I/AAAAAAAABrg/cceW2WF1lwQ/w1200-h630-p-k-no-nu/Spectacled-Bear-1.jpg&#39;, &#39;https://www.animalspot.net/wp-content/uploads/2015/12/Spectacled-Bear-Images.jpg&#39;, &#39;https://ptes.org/wp-content/uploads/2018/12/Andean-bear_credit-Tashkin-Meza-Andean-Bear-1000.jpg&#39;, &#39;http://www.telesurtv.net/export/sites/telesur/img/news/2015/11/27/spectacled_bear_2.jpg_1167511010.jpg&#39;, &#39;https://www.worldlandtrust.org/wp-content/uploads/2017/07/RS4817_Spectacled-Bear-2007-Fundacion-Ecominga-Candelaria-Reserve-c-Lou-Jost-1.jpg&#39;, &#39;http://etc.usf.edu/clippix/pix/spectacled-bear_medium.jpg&#39;] Images downloaded. After checking images for issues, 958 (total) images remain. 958 files ready to load. files[0] = scraped_images/grizzly/00000143.jpg, files[-1] = scraped_images/spectacled/00000003.jpg label_func yields {&#39;teddy&#39;, &#39;grizzly&#39;, &#39;black&#39;, &#39;spectacled&#39;} . . . TODO: Woops! Forgot to score how the model did on the spectacled bears! Will add that soon. ;-) Watch this space. . 3. Discussion . From this example, it looks like the contrastive loss method is worse than traditional classification in a couple ways: it requires more data (or else the model tends to overfit), it runs slower, and it&#39;s less accurate. (And we completely left out the challenge of training CL models which typically need to have their positive and negative examples &quot;mined&quot; to find &quot;hard&quot; cases so that the model &quot;learns&quot; more per iteration.) Why would anyone ever want to use it? . Well, we already mentioned the use case of &quot;produces semantically meaningful embeddings&quot; that can then be used for other downstream tasks. For example, word embeddings like Word2Vec or GloVe can be used for lots of NLP tasks. Jeremy Howard in the FastAI course shows how to embeddings of tabular data and how that can work better and be more meaningful than one-hot encoded tabular data. . Furthermore, regarding accuracy: OpenAI&#39;s CLIP became SOTA on ImageNet in early 2020! They used a TON of pre-training data, and ended up classifying images via contrastive losses better than any other method! . Are contrastive loss methods right for you and your use case, and your dataset? I don&#39;t know. Hopefully after this, you at least have some clue of how to implement such a thing, and how it compares and constrasts with the sort of vanilla classification most people who work with neural networks are used to. . 4. FastAI Details: How I Wrote My First Callback . I wrote a Callback to use my visualization routines. It&#39;s generic enough that you could easily pass in some other visualization routine -- in fact, mine is generic enough that I must assume someone else (LOL, as in Jeremy) has probably already written one at least as good, but this one is mine! . The basic structure of the callback is very simple. In the following I&#39;ve removed all the URL-bookkeeping so you can see the structure: . class VizPreds_Structure(Callback): &quot;&quot;&quot;Structure of my Progress-like callback: call the bokeh triangle plot (or some other routine) with each batch of training. Scroll down to next code block for &#39;full&#39; VizPreds routine.&quot;&quot;&quot; order = ProgressCallback.order+1 # run it after the main fastai ProgressCallback def __init__(self, method=&#39;auto&#39;, # method is a plotting function, must have a .do_plot(preds,targs) and not mind unexpected kwargs. Or &#39;auto&#39; activation=F.softmax, # PyTorch activation for preds. For trad. classification, &#39;preds&#39; are logits &amp; need softmax. or None ): store_attr() # one of my favorite fastai routines ever, sets all the &quot;self.&quot; vars def before_fit(self): # set up stuff if self.method==&#39;auto&#39;: # added the &#39;auto&#39; thing so it choose which default method to use based on num. of dimensions self.method = TrianglePlot2D_Bokeh if len(self.learn.dls.vocab) &lt;= 3 else TrianglePlot3D_Plotly def before_epoch(self): # remove our accumulated info over batches if not self.learn.training: # only operated on validation datasets self.learn.viz_preds, self.learn.viz_targs = None, None # stuff that&#39;s gonna get plotted def after_batch(self, **kwargs): # make predictions after each val batch and accumulate them to plot at the end if not self.learn.training: # only operated on validation datasets with torch.no_grad(): preds = self.activation(self.learn.pred, dim=1) if (self.activation is not None) else preds preds, targs = [x.detach().cpu().numpy().copy() for x in [preds, y]] # Uh...I probly don&#39;t need &quot;copy&quot; do I? self.learn.viz_preds = preds if self.learn.viz_preds is None else np.vstack((self.learn.viz_preds, preds)) self.learn.viz_targs = targs if self.learn.viz_targs is None else np.hstack((self.learn.viz_targs, targs)) def after_epoch(self): if not self.learn.training: print(f&quot;Epoch {self.learn.epoch}: Plotting {len(self.learn.viz_targs)} (= {len(self.learn.dls.valid.items)}?) points:&quot;) # call whatever the plotting method is and make the plot self.method(self.learn.viz_preds, self.learn.viz_targs, labels=self.dls.vocab, comment=f&#39;Epoch {self.learn.epoch}&#39;, thumb_height=self.thumb_height).do_plot() . That&#39;s the idea. If you only cared about plotting the very last batch of predictions, you could put all that code currently in after batch into the start of after_epoch -- which is how I had it initially until I started wondering, &quot;Hey where&#39;s the rest of my validation data?!&quot; . It&#39;s important that this viz routine gets registered as a callback for the fit, not the Learner. If you make a callback for the Learner, it will be executing lots of times when you don&#39;t want it to, such if/when you call the LRFinder. Don&#39;t do that. . In order to implement the mouseover-image-thumbnail preview feature that my mrspuff routine TrianglePlot2D_Bokeh provides, there&#39;s a bunch of extra bookkeeping needed to generate and then hang on to the thumbnail URLs. If we include all that, then the full Callback is below. . class VizPreds(Callback): &quot;&quot;&quot;Progress-like callback: call the bokeh triangle plot (or some other routine) with each batch of training&quot;&quot;&quot; order = ProgressCallback.order+1 # run it after the main fastai ProgressCallback def __init__(self, method=&#39;auto&#39;, # method is a plotting function, must have a .do_plot(preds,targs) and not mind unexpected kwargs. Or &#39;auto&#39; activation=F.softmax, # PyTorch activation for preds. For trad. classification, &#39;preds&#39; are logits &amp; need softmax. or None gen_urls=True, # generate thumbnail urls (if they don&#39;t exist) (2D_Bokeh only) thumb_height=80, # lets you vary the height of image thumbnails (2D_Bokeh only) force_new_urls=False, # if False, keeps whatever thumbnail urls are in learn.dls (2D_Bokeh only) ): store_attr() self.we_made_the_thumbs = False # so that we don&#39;t force-gen new urls a 2nd time after un-freezing def before_fit(self): # set up the plotting method and generate thumbnail URLs if applicable if self.method==&#39;auto&#39;: self.method = TrianglePlot2D_Bokeh if len(self.learn.dls.vocab) &lt;= 3 else TrianglePlot3D_Plotly dv = self.learn.dls.valid # dv is just a shorthand for &quot;dls.valid&quot; if self.gen_urls and self.method==TrianglePlot2D_Bokeh and ((&#39;url_dict&#39; not in dir(dv)) or self.force_new_urls) and not self.we_made_the_thumbs: self.we_made_the_thumbs = True # as in &quot;I made the donuts&quot;, https://www.youtube.com/watch?v=IYRurPB4WA0 #url_dict maps filenames to urls. if you&#39;re on regular-Jupyter instead of Colab, you can use filenames as urls self.learn.dls.valid.url_dict = dict(zip(dv.items, get_thumb_urls(dv.items, size=(self.thumb_height,self.thumb_height)))) def before_epoch(self): if not self.learn.training: self.learn.viz_preds, self.learn.viz_targs = None, None def after_batch(self, **kwargs): # make predictions after each val batch and accumulate them to plot at the end if not self.learn.training: with torch.no_grad(): preds = self.activation(self.learn.pred, dim=1) if (self.activation is not None) else preds preds, targs = [x.detach().cpu().numpy().copy() for x in [preds, y]] # remove copy()? self.learn.viz_preds = preds if self.learn.viz_preds is None else np.vstack((self.learn.viz_preds, preds)) self.learn.viz_targs = targs if self.learn.viz_targs is None else np.hstack((self.learn.viz_targs, targs)) def after_epoch(self): # now that we have all our pred/targ batches and urls ready (if applicable), plot! if not self.learn.training: print(f&quot;Epoch {self.learn.epoch}: Plotting {len(self.learn.viz_targs)} (= {len(self.learn.dls.valid.items)}?) points:&quot;) urls = None if self.method==TrianglePlot2D_Bokeh: dv = self.learn.dls.valid # dv is just a shorthand for &quot;dls.valid&quot; urls = [dv.url_dict[f] for f in dv.items] if &#39;url_dict&#39; in dir(dv) else dv.items # image urls or filenames self.method(self.learn.viz_preds, self.learn.viz_targs, urls=urls, labels=self.dls.vocab, comment=f&#39;Epoch {self.learn.epoch}&#39;, thumb_height=self.thumb_height).do_plot() . TrianglePlot2D_Bokeh is my mrspuff routine that allows for image-thumbnail previews, and these require that we generate and hang on to URLs that point to the images. (If you were to cut out all the URL-related stuff, this callback is really trivial.) . On regular-Jupyter (on your local machine, or on Paperspace Gradient, or Binder, etc.) the Jupyter server lets us just use filenames and it converts them all to URLs automatically for us! But on Colab, we need to generate the &quot;sharing URLs&quot;, and then remember those. So that&#39;s what a lot of the extra verbiage in this callback is for: it&#39;s about managing the image thumbnail URLs (if we&#39;re plotting in 2D, i.e. 3 classes where we&#39;re in the plane of the &quot;triangle&quot; that forms). . If there are in 4 or more dimensions, then we automatically trigger the Plotly-based plotter, which will automatically PCA-down to a 3D projection -- so for 4 classes, we get a 3D tetrahedron. And there are no thumnail URLs because sadly Plotly doesn&#39;t support those. . Acknowledgements: . Special thanks to Zach Mueller for assistance in interfacing with fastai! .",
            "url": "https://drscotthawley.github.io/blog/scottergories/2021/06/17/Contrasting-Contrastive-Loss.html",
            "relUrl": "/scottergories/2021/06/17/Contrasting-Contrastive-Loss.html",
            "date": " • Jun 17, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Typical (Neural-Network-Based) Classification vs. Zero-Shot, Part 1 - The Joy of 3D",
            "content": "(This blog post is an extended treatment of a talk I recently gave. To see the slides for the talk, click here.) . Intro . We&#39;re going to explore the difference between what I term &quot;traditional&quot; neural network (NN)-based classification and so-called &quot;zero-shot&quot; (or &quot;few shot&quot;) classifiers that rely on embedding semantically meaningful features as clusters in space by means of contrastive losses. These &quot;zero-shot&quot; (or &quot;few shot&quot;) or &quot;contrastive loss&quot; methods are increasingly prevalent in the literature, and have the nice property that, unlike traditional ML classifiers, they don&#39;t need to be re-trained whenever new classes are introduced. If we want to understand these embedding-based / zero-shot / contrastive loss methods, it will be helpful to first consider traditional classification as an embedding method of it own. . There is also a strong pedagogical point that I wish to make in this post. Often in teaching ML, many authors will spend some time on binary classification via logistic regression (see my post &quot;Naughty by Numbers: Classifications at Christmas&quot;) and then jump immediately into multi-class classification where the number of classes is 10, or 1000, or 1000 and up. There is an opportunity that is being passed over. The opportunity is visualization, and what is being passed over is the special case of three classes. (Or, as we&#39;ll see, we can squeeze an extra 4th class.) . Viz Matters . Visualization is an important part of the teaching process as well as for researchers wanting to understand their data. Much of my own teaching work has involved building data visualization apps for students to use in learning acoustics, and seeing Yang Hann Kim&#39;s speech when he received on Rossing Prize in Acoustics Education for his visualization efforts only further inspired me to continue developing such tools for students and instructors. (cf. The Physics Teacher featured my &quot;Polar Pattern Plotter&quot; app on the cover of its February 2018 issue.) . Humans cannot visualize beyond 3 dimensions, so problems involving more than 3 semantic features invariably rely on projection methods such a Principal Component Analysis (see my blog post, &quot;PCA from Scratch&quot;) or nonlinear embedding methods like t-SNE or UMAP. The problem with PCA is that projected data points tend to overlap, and with the latter methods twist and distort the space so much that the global structure is completely obfuscated. But in 3D the representations are exact! . Math point, for those who are interested:When we move from two classes to more than two, we typically switch from the logistic sigmoid activation and Binary Cross Entropy loss to softmax activation and Cross Entropy (~ K-L divergence) loss. Softmax contains more complexity than sigmoid (even if the latter is just two-class softmax with a coordinate transformation, and along each axis softmax acts like a sigmoid), yet for the case of 3 classes softmax contains all the complexity of higher numbers of classes, while still being visualizable. . We&#39;re going to make use of a little code library I&#39;m in the process of putting together called mrspuff! It&#39;s geared toward teaching via visualization and running on Google Colab, and (increasingly, as I learn) built to work on &amp; with fast.ai. . Dimensions and Embeddings . People who are not mathematicians, physicists, data scientists, etc. may be unaccustomed to this talk of &quot;dimensions&quot; when dealing with data. Let&#39;s dive in to the specific case of three-class classification. Say we&#39;re developing a computer program to guess (&quot;predict&quot;) whether a given image contains a cat, a dog, or a horse. Traditionally the &quot;ground truth&quot; or &quot;target&quot; values are expressed as &quot;one hot encoded&quot; vectors, such as... . cat: (1,0,0) dog: (0,1,0) horse: (0,0,1) . Then given an image of an animal, our neural network model will produce a set of 3 probabilities for each class, say... . import numpy as np from mrspuff.viz import * from mrspuff.utils import * from mrspuff.scrape import * labels = [&#39;cat&#39;,&#39;dog&#39;,&#39;horse&#39;] data = np.array([[0.7,0.2,0.1],[0.15,0.6,0.25],[0.05,0.15,0.8]]) for i in range(3): image_and_bars(data[i], labels, CDH_SAMPLE_URLS[i]).show(config = {&#39;displayModeBar&#39;: False}) print(&quot;&quot;) . . . . . . . . . . . ...the goal (of training the neural network model) is to get the predicted values to match up with the target values. . Note: we&#8217;ll be using image-based examples, but for everything you&#8217;ll see in these posts, similar methods have been applied to audio, text, and tabular data. . These numbers can be viewed as the strength of an attribute in an image, e.g. measures of cat-ness, dog-ness, and horse-ness (or measure of the likelihood of being a cat, dog, or horse, respectively), where a value of 1 means 100% of that property. Notice in each case, the three &quot;class&quot; probabilities add up to 1. This is always the case: probabilities always have to sum up to 1, i.e. 1 is &quot;100% certainty&quot; that gets split among the 3 classes. (This summing to 1 is an important property that we&#39;ll come back to in a bit.) . One thing that scientists like to do is take different variables and view them as coordinates of a single point in a multi-dimensional space. So for 3 classes we have 3 coordinates for 3 dimensions. We could make the &quot;cat-ness&quot; prediction probability be the &quot;x&quot; coordinate, and &quot;dog-ness&quot; be the &quot;y&quot; values, and &quot;horse-ness&quot; could be along the &quot;z&quot; axis. Then instead of drawing bar graphs, we could plot points in 3D space, where the coordinates of each point tell us the predictions: . All the 3D plots in this post can be rotated &amp; zoomed with the mouse or your finger. Try it! . . . (Here we also used the 3 class probabilities to set the R,G,B color values of the points. There&#39;s no new information contained in this; it just looks cool.) . What scientists tend to do is, even in cases where there are more then 3 variables (say, 10), we regard these as dimensions in some fancy abstract mathematical space where the laws may or may not conform to those of our universe -- for example, the idea of &quot;distance&quot; may be totally up for grabs. In cases where the number of values is infinite (say, as coefficients in a infinite series, or as a function of a continuous variable) we might even work in infinite dimensions! Often when we talk like this, it doesn&#39;t mean that we&#39;re actually picturing geometrical spaces in our heads -- we can&#39;t, for anything beyond 3 dimensions -- but it&#39;s a handy way of encapsulating a particular way of viewing the data or functions involved. And sometimes we do try to see what kinds of geometrical insights we can glean -- which is what we&#39;re going to do here! . Remember when we said that the individual class probabilities have to add up to 1? Look what happens when we plot a lot of such points... . prob, targ = calc_prob(n=400) TrianglePlot3D_Plotly(prob, targ=None, labels=labels, show_bounds=False).do_plot() . . . . . Note: Even though these are points in 3D space, they make up a triangle which lies along a plane -- a 2D :subspace&quot; of 3D. This is a consequence of having the &quot;constraint&quot; that all class probabilities add up to 1. We can color the points by their expected class values by choosing the triangle point (or &quot;pole&quot;) that they&#39;re nearest to -- i.e. by which &quot;bar&quot; is largest among the class probabilities. And we can include the boundaries between classes: . TrianglePlot3D_Plotly(prob, targ=targ, labels=labels, show_bounds=True).do_plot() . . . . Showing (3D) 3-Class Classification in 2D . Since these points lie along a plane, we can change coordinates and just use a 2D plot instead of a 3D plot. . (Optional) Math Trivia: Typically this would involve calculating a coordinate transformation either by hand or using something like PCA to do it for us, but in this case there&#39;s a simple &quot;hack&quot; transformation that will get us from $x$, $y$, and $z$ in 3D to our 2D coordinates $x&#39;$ and $y&#39;$:&gt; $$ x&#39; = y - x, y&#39; = z $$ . In a 2D version of our triangle plot, we can even enable &quot;image tooltips&quot; so that when the mouse hovers over a datapoint, you can see the image it represents: . urls = exhibit_urls(targ, labels) TrianglePlot2D_Bokeh(prob, targ=targ, labels=labels, show_bounds=True, urls=urls).do_plot() . . How Traditional NN Classification Training Proceeds . When we start training our classifier, the data (points) get mapped all over the place; it&#39;s a big jumble. The classifier will ultimately be scored by how many points lie on the &quot;correct side of the line&quot; for the class boundaries, but that&#39;s a discontinuous (either-or) criterion that&#39;s no good for training neural networks. So instead we use a loss function and a gradient descent on this loss function to try to minimize the distance from the mapped point to the &quot;pole&quot; of the target class point. In other words, training proceeds by trying to collapse all the data points onto the 3 (or 4) points corresponding to 100% certainty about each class prediction: The following a cartoon example time-lapse of ten training steps (we&#39;ll show real NN training in Part 2 of this blog series): . from ipywidgets import interact, interactive, fixed, interact_manual import ipywidgets as widgets probs, tmp = calc_prob(n=400, s=2.2) targs = np.random.randint(3,size=probs.shape[0]) targs_3 = one_hot(targs) # not used for plotting but for compiting gradients maxsteps = 10 def sequence(step): lr, grad = 1/maxsteps, targs_3-probs TrianglePlot2D_MPL(probs+step*lr*grad, targ=targs, labels=labels, show_bounds=True, comment=f&#39;Step {step+1}:&#39;).do_plot() # Could be interactive fun in Jupyter/Colab, but not easy to do in the blog: do_interact = False if do_interact: print(&quot;Move the slider below to advance the training step.&quot;) print(&quot;(Note, this is just a &#39;cartoon&#39; for now; to see actual NN training steps, wait until post Part 2.&quot;) interact(sequence, step=widgets.IntSlider(min=0,max=19,step=1,value=0)); else: for step in range(maxsteps): sequence(step) . . As the training proceeds, it tries to get the groups of data points to collapse to single locations at each target &quot;pole&quot;. . Loss vs. Accuracy . This method of visualization also allows us to visually &quot;see&quot; the concepts of loss and accuracy. For 3-classes with a softmax activation and categorical cross-entropy, the loss is nearly linear in the difference between the prediction and the target, i.e.: . Loss:~distance from target This is a continuous variable, which makes it suitable for training models via gradient descent. . In contrast to loss, accuracy is how many classifications the model gets correct, expressed as a percentage of the total number of data points. This is determined by what side of the decision boundary each prediction is on. . Accuracy:% of points on the correct side of decision boundary (discontinuous) It is instructive to view two configurations of data points with nearly identical loss values but wildly different accuracies: . Nearly identical losses: . # generate and save images that we&#39;ll load in the next cell !mkdir images import numpy as np import matplotlib.pyplot as plt # generate data along boundaries def gen_bound(x, y, z, n=20, ind0=1): # ind0=1 skips the &quot;first point&quot; return np.linspace(np.array([x[0],y[0],z[0]]), np.array([x[1],y[1],z[1]]), num=n+ind0)[ind0:] def gen_bound_data(n_per=20, ind0=0): bdata = np.zeros((n_per*3,3)) bdata[:n_per] = gen_bound(x=[0.333,0.5], y=[0.333,0.5], z=[0.333,0], n=n_per, ind0=ind0) bdata[n_per:2*n_per] = gen_bound(x=[0.333,0], y=[0.333,0.5], z=[0.333,0.5], n=n_per, ind0=ind0) bdata[-n_per:] = gen_bound(x=[0.333,0.5], y=[0.333,0], z=[0.333,0.5], n=n_per, ind0=ind0) return bdata def gen_near_bound_data(n_per=50, scale=7, eps=0.01): bdata = gen_bound_data(n_per=n_per) lower, right, left = bdata[0:n_per,:], bdata[n_per:2*n_per,:], bdata[-n_per:,:] # shift data a bit lower_catty = softmax( scale*(lower+np.array([eps,0,0])) ) lower_doggy = softmax( scale*(lower+np.array([0.0,eps,0])) ) left_catty = softmax( scale*(left+np.array([eps,0,0])) ) left_horsey = softmax( scale*(left+np.array([0,0,eps])) ) right_horsey = softmax( scale*(right+np.array([0,0,eps])) ) right_doggy = softmax( scale*(right+np.array([0,eps,0])) ) return np.vstack((lower_catty, lower_doggy, left_catty, left_horsey, right_horsey, right_doggy)) # move boundary a bit toward the &quot;correct&quot; side eps = 0.007 acc_data = gen_near_bound_data(eps=eps) btarg = np.argmax(acc_data, axis=-1) TrianglePlot2D_MPL(acc_data, targ=btarg, show_bounds=True, labels=labels, comment=&#39;100% Accuracy:&#39;).do_plot() plt.savefig(&quot;images/acc_100.png&quot;) # move boundary a bit toward the &quot;wrong&quot; side (keeping labels the same as before) inacc_data = gen_near_bound_data(eps=-eps) ibtarg = btarg.copy() TrianglePlot2D_MPL(inacc_data, targ=ibtarg, show_bounds=True, labels=labels, comment=&#39;0% Accuracy:&#39;).do_plot() plt.savefig(&quot;images/acc_0.png&quot;) . . Thus visualization can serve as a valuable teaching tool. . Furthermore, by letting us track which points are &quot;not where they should be&quot; on a plot, we can &quot;see&quot; the &quot;confusion matrix&quot; typically provided as a classification metric. More on that in Part 2. . Aside: Even 4 Classes? . Just as 3 class probabilities form a triangular 2D subspace (in 3D) that we can then plot in 2D, so too 4 classes form a tetrahedron (a pyramid made up of triangles), which is a 3D shape embedded in 4D space! So if we restrict our attention to this 3D subspace and use a 3D plotting program then we can actually represent 4 classes. Say we add another animal class, say &quot;bird&quot; symbolized by dark-colored points. Then our diagram could look like this: . prob4, targ4 = calc_prob(n=500, s=2.7, dim=4) # 4d probabilities TrianglePlot3D_Plotly(prob4, targ=targ4, labels=labels+[&#39;bird&#39;], show_labels=True, show_axes=False, add_poles=True).do_plot() . . . . Metric-Based Embedding Methods . In contrast to all this, metric-based embedding methods don&#39;t try to collapse all the data to a predefined set of 3 (or 4, or more) &quot;poles.&quot; Rather, they try to get similar data to end up as points that are near each other, and dissimilar data points far away from each other. This tends to produce &quot;clusters&quot; but they are not (typically) along the &quot;axes&quot; of the space, they&#39;re just &quot;somewhere out there.&quot; . Deep Learning experts Raia Hadsell, Sumit Chopra, and Yann LeCun described it this way (I&#39;m paraphrasing): Imagine all the data points are connected to each other via special kinds of springs. Similar kinds of points are connected by attractive springs that pull them together. Dissimilar kinds of points are connected by repulsive springs that push them further away from each other except these repulsive springs are special in that they only apply a force when they&#39;re close together; beyond a certain distance (called the &quot;margin&quot;), no repulsion occurs. (Why this special property is stipulated is a fine point we can get to later). . This picture of springs is the essence of a &quot;contrastive loss&quot; function. Unlike traditional NN classification where the loss is based on the &quot;distance&quot; to a &quot;target&quot; (or &quot;ground truth&quot;) value, with these metric-based methods we send in two (or even 3) data points together, and then either let them attract or repel each other, and we do this over and over and over until we reach some stopping criterion. Eventually, what we&#39;ll have is a space that contains clusters of similar points, separated by a &quot;margin&quot; distance that we specify. . Contrastive Loss Cartoon Demo . Below is a JavaScript animation of the &quot;springs&quot; cartoon above: . . Tip: You can think of the margin as the amount of &quot;push.&quot; . Note: (A computational aside) In this scenario, we don&#8217;t try to connect every point to every other point at the same time, as in some kind of N-body simulation. That could be computationally expensive and require something like a Barnes-Hut/octtree algorithm to make it efficient. Rather, we&#8217;re just randomly pairing two points at a time. Also, other metric learning schemes using &quot;triplet loss&quot; will group three points, setting one to be the &quot;anchor&quot; and then grabbing a positive and a negative example. For more on that, see a recent paper or some code from a couple years ago. Update: You&#8217;ll see that I just added a &quot;Triplets&quot; checkbox above! Note that it will internally drop the number of steps by a factor of 2 for &quot;honest&quot; comparison with the non-triplet case. . The cool thing about these methods is that the embedding that gets learned tends to work for classes the method has never seen before. So, for example, the embedding learned for grouping images of cats, dogs, and horses together would map images of birds to nearby points in the space. Then &quot;all we have to do&quot; if we want to predict a class is see whether a new instance is &quot;nearby&quot; (according to some distance measure we decide) to other similar points. We could even look at the &quot;center points&quot; of various clusters and regard these as the &quot;class prototype&quot; and use that in the future. . This fits (somewhat) with the notions of &quot;prototypes&quot; in human classification advanced by Eleanor Rosch in her revolutionary psychology work in the early 1970s. We can say more about this later. ;-) . This same method of contrastive losses and metrics is used not for classification per se but for things like photographic identity verification (an example that is given in Andrew Ng&#39;s Machine Learning course on Coursera): Say you want to have a facial recognition system (highly problematic for ethical reasons but it&#39;s a good example of the method so bear with me) for a company where there can be turnover in employees: You probably don&#39;t want to train a traditional classifier with separate a class for each employee because then you&#39;d have to re-train it every time someone joins or leaves the company. Instead, you can store an image of each employee, and then when they appear in front of a camera for identity verification, you could compare the &quot;distance&quot; between the embedded data point for the new photo from the data point for the stored photo(s). If the distance is small enough, then you can have confidence it&#39;s the same person. . This is the idea behind a &quot;Siamese Network&quot;, so called because like Siamese twins, it uses two identical branches consisting of the same network (or just the same network run twice): . Example of a Siamese Network (source: Sundin et al) . So in using metric-based learning for classification, we&#39;re essentially adopting this identity-verification app and applying it to entire classes instead of individuals. . What&#39;s nice about this is that, after you&#39;ve trained your embedding system, it can typically still be used to measure similarity between pairs of things it&#39;s never seen before, because in the process of training it was forced to learn &quot;semantically meaningful&quot; ways of grouping points together. This use of the linguistic work &quot;semantic&quot; is not accidental: the language model systems that rely on &quot;word embeddings&quot; can learn to group similar words together, and even have mathematical-like relationships in analogies (e.g., gender: &quot;king - man + woman = queen&quot;, or countries-and-capitals: &quot;Russia - Moscow + France = Paris&quot;) by treating the embedded data points as vectors that point from the origin of the coordinate system to the data point. We can say more about this and the distance metric they use (&quot;cosine similarity&quot;) another time. . How well do they work? . So, how do traditional ML classification and metric-based zero-shot methods stack up? Which one is more accurate? . Well, depends on what you want it for, but for example in 2016, a group of researchers scored pretty high on a Kaggle competition for classification using &quot;entity embeddings.&quot; They said: . &quot;Entity embedding not only reduces memory usage and speeds up neural networks compared with one-hot encoding, but more importantly by mapping similar values close to each other in the embedding space it reveals the intrinsic properties of the categorical variables. We applied it successfully in a recent Kaggle competition and were able to reach the third position with relative simple features.&quot; . As far as our own demonstrations, we&#39;ll explore that in Part 2. As a teaser, here&#39;s an image from my own Contrastive Loss Modification of the FastAI tutorial on Siamese Networks: . ...the model achieved an accuracy of 88 to 90% in identifying pet breeds -- here&#39;s the kicker -- that it had never seen before. The model was trained on a completely different set of breeds, which would have stumped a traditional NN classifier, but the similarity-based embedding method was able to apply the &quot;semantically meaningful&quot; representations learned during training to group new pet breeds by similarity! . There&#39;s an important point / &quot;confession&quot; that needs to be made here: These &quot;pet breeds&quot; results were obtained using way more than 3 dimensions -- 128 dimensions to be exact. In the real world, such high dimensions are typically necessary. In Part 2, we&#39;ll explore more carefully how the dimensionality of the embedding can affect our accuracy. . Summary . The &quot;Joy of 3D&quot; referred to in this blog post is about 3D as a teaching tool to motivate our understanding of both traditional NN classification and contrastive-loss based metric learning as both being types of embeddings. . The types of &quot;triangle plots&quot; introduced here give students a visual interpretation of &quot;where the data points are&quot; in terms of... . prediction/probability values (via locations of dots) | losses (~ distance from target) | accuracies (which side of &quot;the line&quot; they&#39;re on). Thus it also gives you a visual representation of the &quot;confusion matrix&quot;. | . | You can inspect the data points by mousing over the dots to see the images. Thus it allows you to track &quot;top losses&quot; visually, i.e. points that are &quot;not where they&#39;re supposed to be&quot;. | . | Next time, in Part 2, I&#39;ll walk you through the specifics and show you some real training examples (that you can run on your own) with these sorts of &quot;triangle plots&quot;, via my new FastAI callback VizPreds (that I learned how to write)! . Acknowledgements: . Special thanks to Zach Mueller, Tanishq Abraham and Isaac Flath for assistance in interfacing with fastai! . References: . &quot;Siamese and triplet learning with online pair/triplet mining&quot; by Adam Bielski | Example of new `Pipeline` class to create data for a Siamese model,&quot; by Jeremy Howard | &quot;Siamese Network &amp; Triplet Loss&quot; by Rohith Gandhi | pytorch-metric-learning by Kevin Musgrave | &quot;Contrastive Loss Explained&quot; by Brian Williams | &quot;Bootstrap Your Own Latent (BYOL)&quot; by Grill et al | &quot;Siamese Neural Networks for One-shot Image Recognition&quot; by Koch et al | &quot;Few Shot Learning&quot; by msiam | &quot;Learning to learn, Low shot learning&quot; by Katerina Fragkiadaki | &quot;Embarassingly Simple&quot;: &quot;We describe a zero-shot learning approach that can be implemented in just one line of code, yet it is able to outperform state of the art approaches on standard datasets&quot; | .",
            "url": "https://drscotthawley.github.io/blog/scottergories/2021/05/04/The-Joy-Of-3D.html",
            "relUrl": "/scottergories/2021/05/04/The-Joy-Of-3D.html",
            "date": " • May 4, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "Scottergories: Making GPT-3 Generate 3 of a Kind",
            "content": "3155 words, 17 minute read, 11 paperback pages . I’m a computational physicist who spent most of his life only interested in curve-fitting, i.e. “regression.” Recently I’ve become fascinated in “classification” to the point where I’m in the process of writing a popular-level book on classification and categories. (For a couple recent works that include some of this, see [1] and [2].) . In June of 2020, I applied for OpenAI API “GPT-3” [3] access immediately upon its announcement… and just heard back eight months later (shortly after I tweeted something nice about OpenAI’s “CLIP” paper). My proposal was to explore the GPT-3 language model’s capacity for handling categories, something I’ll refer to loosely by the shorthand of “categorical reasoning” (but don’t take this to mean that I assert GPT-3 actually “reasons” anything). On the form to request access, I wrote: . “I’m interested in the modeling and representation of categories using machine learning and how this task compares with human traditions in philosophy and psychology, particularly how concepts are intertwined with language. My sabbatical this fall includes writing a popular-level book about the history of classification with a goal towards relating this to the societal impact of deployed machine learning models. (I gave a talk at Wheaton on this last fall.) This interdisciplinary work began in Oxford two years ago and has been partially supported by a grant from the Templeton and Blankmeyer foundations. . One concrete problem related to this effort is the fairly well-posed question of to what extent sophisticated language models contain sufficient categorical ‘knowledge’ and ‘reasoning’ capacity to play (or officiate) a game such as “Scattergories” — in which unusual, never-before-seen categories are introduced during play (e.g., “things you’d find under a bed”). Humans do this well, but my experiments so far with Word2Vec embeddings and with GPT-2 (via the HuggingFace API) have indicate that both are poorly-suited to this task. I am applying for access to the OpenAI API because I’m curious to see how GPT-3 fares. Categorical reasoning is foundational to intelligence, so such a task is relevant both for understanding human intelligence as well as for advancing the development of general artificial intelligence” [the mission of OpenAI]. . For examples of just how poorly GPT-2—the older, smaller model—performs at this task, see the “Discussion” below. Believe me when I say the results were disappointing. . “GPT-2 had 1.5 billion parameters. GPT-3 has 175 billion.” . Now, with GPT-3 access, we can begin to see how this newer, bigger model performs. The essence of using the API is the “Prompt”. So, my job is to craft prompts, and then see how well the model responds. My first experiment with the API involves getting the model to generate “three of a kind”: . Update: Oh, hey, there’s a new paper on GPT-3 prompt-writing that came out the same day I wrote this post! Guess I’ll read that soon. . Three of a Kind . Let’s see if GPT-3 can expound in threes. I’ll write my prompt in bold, and then underlined text will show the model&#39;s completion/output. (Additional commentary from me will be in italics.) . This application generates example members of a category. Examples of fruits are apples, oranges and bananas. Examples of birds are quails, crows and sparrows. (Whoa! Not bad! This is with the “davinci” model, with Response Length = 10 tokens, Temperature = 0.7, Top P = 1, etc..all defaults.) . (Ok, I wasn’t always getting three examples when I’d re-try, so let’s make the “three” explicit:) . This application generates three example members of a category. Three examples of fruits are apples, oranges and bananas. Three examples of dogs are Labrador, Rottweiler and Husky. (Had to increase response length to 15 and then truncate the extra text which read “The input is”) . (For the following, just assume that I’m truncating unwanted extra text. Also, to save space, I’ll refrain from printing the entire prompt I use, and just list the categories…) . fish: salmon, bass and tuna. . U.S. Presidents: George Washington, Franklin Delano Roosevelt and Ronald Reagan (Whoah, this one triggered the “This completion may contain sensitive content” warning!) . philosophers: Plato, Descartes and Kant. . things you’d find in a refrigerator: milk, orange juice and apple juice. (Sure. But since it’s a random sample, let’s go again:) milk, cheese and vegetable salsa. (Not bad!) . things you’d find under a bed: a mouse, a handkerchief and a ball. (Ok, I guess…why not? Again:) socks, shoes and books. (ok…I can buy that.) . 80’s power ballads: &quot;Faith&quot; by George Michael, &quot;I Want to Know What Love Is&quot; by Foreigner and &quot;The Power of Love&quot; by Huey Lewis and the News. (uh…if you say so. At least these are all in the 80s!) . household chores: cleaning, cooking and sweeping. (or again:) washing, cleaning and ironing. Three examples of sports are swimming, running and cycling. (The model added that second sentence all by itself! Note all of these are gerunds, i.e. -ing words; it didn’t say, for example, something odd/wrong like “clean, mop, broom”) . things you don’t want your mom to know about you:: a. how drunk you were at the last party b. that you smoke pot c. that you plagiarized on that paper for your English class. (Whoa, have we reached AGI? ;-) And extra points for the use of “a. b. c.”) . items you take on a trip: a car, a suitcase and a book. (You CAN “take” a car, can’t you? hah! Nice linguistic anomaly.) . fruits of the Holy Spirit: faith, hope and love. (I mean, I want share this on @FaithTechHub, so…right? LOL) . OK, I am sufficiently impressed and have now gone to get my official Hasbro(TM) Scattorgories game…The following prompts are from the game . things that are sticky: gum, tape and bubble gum. (Nooice!) . things you add water to: eggs, rice and pasta. (eggs? Hmm…go again:) tea, coffee and milk. (nice. …wait, milk?. Again:) urns, cups, and buckets. (whoa!) . terms of measurement: kilometers, centimeters and grams. Three examples of colors are red, blue and green. Three examples of adjectives are red, blue and green. Three examples of verbs are run, jump (See? It will keep generating categories if you set Response Length longer. Let me make the Response Length even longer, to 200…) . terms of measurement: 3, 4 and 5 meters. Three examples of angles are 20 degrees, 40 degrees and 60 degrees. Three examples of countries are Japan, France and Germany. (Ok and beyond that it just repeats itself and/or repeats similar sentences, like: “The application generates the following sentences. This application generates verbs. The application generates the following sentences. This application generates pronouns.” and so on) . things found in the ocean: fish, coral and whales. Three examples of things found in the sky are clouds, stars and planets. (that second sentence was generated by the model) . things that are bright: the sun, the moon and the stars. Three examples of things that are made of wood are tables, chairs and fences. (Again, the second sentence was generated. Just in case it’s got a heavenly-body fixation, let’s go again:) things that are bright: the moon, the sun and an electric bulb. Three examples of furniture that a household might have are a sofa, a chair and a table. (Good job! “furniture” is a tricky category as described by George Lakoff [4]) . leisure activities: simple relaxation, snowboarding and surfing. Three examples of countries are USA, Canada and Mexico. (Not bad) . reptiles/amphibians: lizards, frogs and crocodiles. (Ok, that “slashed” construction of “reptiles/amphibians” was literally what was printed on the card. I had not expected GPT-3 to pull that off, but mixing reptiles (lizards &amp; crocodiles) with amphibians (frogs) is pretty cool. Let’s try just reptiles:) reptiles: lizards, snakes and turtles. Three examples of mammals are cows, sheep and giraffes. In each example, the category is written in bold letters and (Ok, now that’s just cheeky!) . things you do online: search, chat and email. (Note how it generates only things that are…arguably..verbs. Again:) checking email, shopping and playing games. (My goodness, it’s full of gerunds!) . (Yea, let’s try gerunds, and let’s bump the Response Length up to 145…) . gerunds: eating, running and swimming. Three examples of adjectives are large, strong and important. Three examples of verbs are write, jump and try. Three examples of adverbs are quickly, happily and carefully. Three examples of adjectives are big, wide and dangerous. Three examples of prepositions are to, in and on. This application generates a category. All examples are of the same gender, number and case. Three examples of nouns are dog, cat and bird. Three examples of adjectives are tall, small and large. Three examples of prepositions are by, for and under. Three examples of adverbs are quickly, slowly and (SHOW OFF!) . terms of endearment: honey, sweetheart and dear. (awww) . Ok, I’ve now gone and grabbed my boxed copy of The Game of Things. Now, keep in mind, some of these things can be of a “suggestive” nature… . things you would like to do with chocolate: eat it, cook with it and share it with your friend. (Uh…ok, that was not at all suggestive, haha!) . things you shouldn’t do on your honeymoon: drink, drive and shop. Three examples of good economic policies are low interest rates, an independent central bank and low taxes. (COMPLETION MAY CONTAIN SENSITIVE CONTENT) (All very sensible, though not likely to be what you’ll hear if you play in a group of humans. Note that the “goal” of the humans would be to make each other laugh, whereas GPT-3 is just trying to generate high-probability matches. It’s basically playing Family Feud.) . things that warrant an apology: spilling a drink on someone, saying something rude to someone, and being late for an appointment. (Yeah, good job GPT-3!) . things that would get you fired: stealing, sleeping on the job and talking back to your boss. (Sure!) . things you would do if you had super-human powers: play baseball, run in the Olympics and fly to the moon. (again:) catch a falling satellite, fly from New York to Tokyo, and make a million dollars. (Ok. Sensible answers, and note that all the verb-usage matches.) . things you shouldn’t try to hold on to: a pen, a balloon and a cork. The idea is that you decide whether the example is an example of the category, or not. You click (Ok, wait a sec. Not sure about the pen, balloon and cork??, but it seems like it’s scraped some aspect of category-naming-games and included it in here! Let’s re-do a bunch) . things you shouldn’t try to hold on to: . a taxi, a dead rat and a Volkswagen. | a hot potato, a hot date and a hot temper. | a rock, a bird and a balloon. | a ball, a cat and a balloon. Three examples of things you should be careful with are an axe, a knife and a gun. (2nd sentence is part of the output) | a balloon, a basketball and a cactus. In the example, the Generate action is used to randomly generate a member of the category. This (Ok, kudos on the cactus. Not sure where it’s getting its category-gaming info from) | . (Speaking of Something To Hold On To, let’s give it an obscure music task just to see how it does:) . songs by Trevor Rabin: &quot;Racing in the Street&quot;, &quot;Big Generator&quot; and &quot;Can I Play With Madness&quot;. (hahaaaha. The first is a Springsteen tune, the 2nd the title track off Yes’ Big Generator album when Rabin was in the band and supposedly they all shared writing credits, and I would PAY MONEY to see Trevor Rabin cover Iron Maiden’s “Can I Play With Madness”!) . (BTW, if you want to hear an incredible cover of “Something To Hold On To,” please give my good friend Rex Schnelle’s version a listen. Moving on…) . things you shouldn’t share: toothbrushes, clothes and pencils. (I did this over &amp; over and “toothbrushes” was in every output, no matter how high I made the Temperature) . things you shouldn’t try to do in the dark: play tennis, play football and drive a car. (All my retries on this were similarly boring; GPT-3 rarely surprises one with its off-the-wall hilarity) . (Speaking of lack of originality, it’s amazing how many cards in The Game of Things start with “Things you shouldn’t…”) . things you wouldn’t want to find in your sandwich: a brick, a piece of glass and a dead rat. (Spot on) . (As a resident of Nashville, I’m curious to see if we can make it write a country song; many country songs are just lists of nostalgia for bygone rural America…) . things you remember about growin’ up on the farm: mud, worms, and tractors. (ok, sure) . things Daddy used to tell you: &quot;Don&#39;t do that!&quot;, &quot;Be nice.&quot;, and &quot;Look out!&quot;. Three examples of things you are going to do when you grow up are: &quot;travel to the moon.&quot;, &quot;write a book&quot;, and &quot;learn how to dance&quot;. The full Python code is shown below: def make_things(): fruits = [&quot;apple&quot;, &quot;orange&quot;, &quot;banana&quot;] people = [&quot;Daddy&quot;, &quot;Mommy&quot;, &quot;Grandpa&quot;] things = [&quot;Don&#39;t do that!&quot;, &quot;Be nice.&quot;, &quot;Look out!&quot;] things = [&quot;travel to the moon.&quot;, &quot;write a book.&quot;, &quot;learn how to dance.&quot;] return fruits, people, things What is the purpose of this application (Whooooaaa! What IS this thing? Is there a human being on the other end of this? ;-) .) . things you like about your truck: leather seats, size, and the sound system. (Eh. Technically valid answers, sensible, high-probability examples. Nothing “creative” though, of course. Again, only this time I’ll crank the Temperature up to 0.97:) safety rating, engine, and CD player. (The “trying to win at Family Feud” analogy is apt. Ok, forget the country song. Moving on.) . things you wouldn’t want a doctor to say to you: . &quot;you don&#39;t have anything to worry about&quot;, &quot;one more time&quot; and &quot;we&#39;ll see how it goes&quot;. (The model knew to use quotation marks! First example seems wrong.) | I have good news and bad news, surgery is now a day care procedure and it&#39;s not cancer, it&#39;s a tumor. (Uh.. huh?) | , &quot;You&#39;re dead&quot;, &quot;You&#39;re pregnant&quot;, &quot;You&#39;re infected&quot;. Three examples of things you wouldn&#39;t want a doctor to say to your wife are (Nice comma usage, and Whoa! Let’s do that last one…) | . things you wouldn’t want a doctor to say to your wife: . &quot;I&#39;m sorry&quot; &quot;I love you&quot; and &quot;I&#39;m sorry I love you.&quot; (hahaha!) | , &quot;I&#39;m afraid you have cancer&quot;, &quot;I&#39;m afraid you have AIDS&quot; and &quot;I&#39;m afraid you have syphilis.&quot; Three examples of names of big cities are London, Paris and Los Angeles. Three examples of books to read are &quot;War and Peace&quot;, &quot;Mein Kampf&quot; and &quot;The Catcher in the Rye&quot;. (Ok, I think it’s got the hang of this 3’s-generating now! LOL) | . Last up: I mentioned this to my friend Heather and she asked me how long I get to ‘keep playing with it’. I said “My free trial tokens expire May 15, 2021, and I’ve already used 6000 out of 300k tokens. So it’s basically like joining the Chuck E. Cheese club.” She said, “Nice! I wonder if you can teach it to win at skee ball 😅” Which means now I have to do… . things you’d find at Chuck E. Cheese: video games, a ball pit and tokens. Three examples of dinosaurs are Tyrannosaurus Rex, Triceratops and Velociraptor. (NOT BAD! I’m going to go again, and if it mentions skee ball, WE’RE DONE.) . tokens, pizza and soda. (good) | Chuck E. Cheese himself, his brother, and a clown. (Ohhh-kay that’s enough for now! haha) | . Discussion (Preliminary Thoughts) . “Surely this is not a very ‘intelligent’ task,” you say. “All it does is generate words that have some suitably high probability of being associated with the word in the prompt.” “Since it was trained on the internet, such lists-of-things-in-a-category probably already exist as web pages somewhere anyway” . Right, one could imagine scraping a ton of web pages for text and then training some kind of non-Transformer-based method, maybe even a Bayesian bag-of-words model (like in a simple spam detector) to rank “related words” and pick the top choices. . That’s not exactly what’s happened here. Yes, GPT-3 was trained on tons of web pages, yes it “knows” (has a probabilistic model for) word associations, but also… . It is a “few shot learner” so it essentially instantly starts giving me outputs like what I want, without having been pre-trained on the task I want it to do. The fact that it gets singular vs. plural right, and verbs vs. nouns, and gerunds correct in its answers is noteworthy. . So far, this is just my first night of access to the API, and it blows away what I could get GPT-2 to do. One can try out various GPT-2 model sizes using the friendly interfaces at HuggingFace.com. For the smallest GPT-2 model, I got . dogs: cats.” (Womp womp!) . The largest GPT-2 model size, however, with suitably adjusted parameters, could generate 3 dog breeds or 3 U.S. Presidents correctly. But any of the more “challenging,” “speculative” categories (e.g. “things you might…”) give even the largest GPT-2 at HuggingFace a hard time: . things that would get you fired: the fire alarm, the bathroom sink and the bathroom mirror. (?? The other various completions generated by GPT-2 when I re-ran it were similarly irrelevant.) . One further possible remark to my post here: “You realize you aren’t really playing Scattergories(tm), right?” Yes of course. Scattergories involves rolling the dice and getting a letter and having to name a bunch of things that start with that letter. Pace. I was never actually wanting to replicate the Scattergories(tm) game engine itself, rather the name of the game was a placeholder for the idea of “categorical reasoning.” Now…could we get GPT-3 to actually play Scattergories? …I’m not sure I even …care? I’m not sure how you’d write the prompt for that, but I’m open to trying it. For now, at just my first night of trying things out, this seems remarkably encouraging. . Which means….based on my experience with AI models: If the initial trial is encouraging, that means there’s a TON of failure modes you just haven’t discovered yet! ;-) We can probe for those too, another time – so far I’ve only used up 1.6% of my free tokens. There’s a lot more that one can do to use the API, and so far I haven’t used any of the advanced prompt-making utilities. Still, for the first foray into the OpenAI API, this was a GREAT experience! . P.S.- OH GEEZ I JUST NOTICED THAT I TAUGHT GPT-3 TO NOT USE THE OXFORD COMMA! May a large millstone be tied around my neck… Wait wait! : All that was needed to get it to start generating Oxford-comma-style examples was to add the comma to my one example: “apples, oranges, and bananas.” Wow. . References .",
            "url": "https://drscotthawley.github.io/blog/classification/scottergories/gpt-3/2021/02/15/Making-GPT3-Generate-3-Of-A-Kind.html",
            "relUrl": "/classification/scottergories/gpt-3/2021/02/15/Making-GPT3-Generate-3-Of-A-Kind.html",
            "date": " • Feb 15, 2021"
        }
        
    
  
    
        ,"post6": {
            "title": "Naughty by Numbers: Classifications at Christmas",
            "content": "Head over to https://hedges.belmont.edu/~shawley/naughty/ to see this post. . (It uses enough JavaScript that this blogging platform will mangle it.) . .",
            "url": "https://drscotthawley.github.io/blog/2020/12/11/Naughty-by-Numbers.html",
            "relUrl": "/2020/12/11/Naughty-by-Numbers.html",
            "date": " • Dec 11, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "Interactivity Test",
            "content": "We’re going to try interactive function-plotting via a little javascript from iooxa.dev. Here’s the code we’re about to add, escaped so you can see it. . &lt;script async=&quot;&quot; src=&quot;https://unpkg.com/@iooxa/article&quot;&gt;&lt;/script&gt; &lt;r-svg-chart width=&quot;400&quot;, height=&quot;250&quot; xlim=&quot;[-3, 3]&quot; ylim=&quot;[-0.01,3]&quot; xlabel=&quot;x&quot; ylabel=&quot;ReLU(x)&quot;&gt; &lt;r-svg-eqn eqn=&quot;Math.max(0, x)&quot; stroke=&quot;blue&quot; stroke-width=&quot;3&quot;&gt;&lt;/r-svg-eqn&gt; &lt;/r-svg-chart&gt; . If you put the above few lines into a raw HTML file and open it in a browser, you get a nice plot of a ReLU activation (click for example). . Now we’ll add that code as raw HTML and see if the plot appears here: . &lt;r-svg-chart width=”400”, height=”250” xlim=”[-3, 3]” ylim=”[-0.01,3]” xlabel=”x” ylabel=”ReLU(x)”&gt; . &lt;/r-svg-chart&gt; . How did we do? Did we get a plot? . No, for some reason Fastpages is escaping a few of the angle-brackets for line defining the r-svg-eqn object. Don’t do that, Fastpages! Leave my HTML alone! . A Hack That Works . Your images/ folder is theoretically just for images. But if you take the HTML code that you want to sneak past nbdev and put it in a file in the images/ directory, then you can load it via an iframe. So let’s put the above three lines in a file called iooxa_graph.html and save it in the images/ directory. Then we put the following in this post: . &lt;iframe src=&quot;../../../images/iooxa_graph.html&quot; width=&quot;700px&quot; height=&quot;280px&quot; frameBorder=&quot;0&quot;&gt;&lt;/iframe&gt; . And here we go: . Yea? :-) Now, why do that? . Well, because now we can have some more interactivity, like this LeakyReLU graph and some half-wave rectifiers. Below the graph(s), you’ll see numbers in blue that you can click and drag to change the value and hence the graph! . Nice. :-) .",
            "url": "https://drscotthawley.github.io/blog/2020/11/01/Interactivity_Test.html",
            "relUrl": "/2020/11/01/Interactivity_Test.html",
            "date": " • Nov 1, 2020"
        }
        
    
  
    
        ,"post8": {
            "title": "Citations in Fastpages via BibTeX and jekyll-scholar",
            "content": "(N.B.: The following was created as a Markdown file in _posts/. For Jupyter notebooks, the same things apply; one simply enters the Liquid codes into Markdown cells. Quick Jupyter example.) . How to Cite . For demonstration purposes, I’ll take the liberty of citing a couple of my recent papers, namely the first SignalTrain paper [1] and the new one by Billy Mitchell [2]. Instead of using the LaTeX code cite{ &lt;whatever&gt; }, I use the Liquid code {% cite &lt;whatever&gt; %}. For example, the first citation above is written as “{% cite signaltrain %}” in the Markdown file that generates this HTML page. . The two citation markings above point to the References section at the end of this post where the full references are printed out in the bibliography style of my choice. . Drawing from the Bibliography . In the main blog directory, create a new directory called _bibliography/, and place your BibTeX file there as references.bib. In the case of this demo, the references file looks like this: . @conference{signaltrain, title = {Profiling Audio Compressors with Deep Neural Networks}, author = {Hawley, Scott H. and Colburn, Benjamin and Mimilakis, Stylianos Ioannis}, booktitle = {Audio Engineering Society Convention 147}, month = {Oct}, year = {2019}, url = {http://www.aes.org/e-lib/browse.cfm?elib=20595} } @article{billy_signaltrain2, title={Exploring Quality and Generalizability in Parameterized Neural Audio Effects}, author={William Mitchell and Scott H. Hawley}, journal={ArXiv}, year={2020}, volume={abs/2006.05584} url = {https://arxiv.org/abs/2006.05584} } . Note that this (single) references file is for your entire blog. The great thing about this is that all your Jupyter notebooks and Markdown posts will draw from this same file, which could be hundreds of references long, and jekyll-scholar will only include the ones you need for each post. . Finally, at the end of your post, you signal the creation of the list of references by using the Liquid tag . {% bibliography --cited %} . …so I’ll put that at the very bottom of this file. (Currently that’ll generate an error, because we haven’t enabled jekyll-scholar yet, but we’ll do that next.) The optional argument --cited means it’ll only list the references cited in your post. . Enabling Jekyll-Scholar . To enable jekyll-scholar, all we need to do is make the following two changes, and perhaps a third. . In _config.yml, add “ - jekyll-scholar” to the list of plugins:. . | Edit the Gemfile to include gem &#39;jekyll-scholar&#39; where the other plugins are listed. . | Optional: The default citation format is “apa”. If you want to change that, you can add the following to your _config.yml file: . scholar: style: &lt;name&gt; . …naming one of the styles in the CSL style repository (but leaving off the .csl ending). Tip from the CSL maintainers: . To quickly search the styles in the GitHub CSL style repository by file name, press “t” to activate GitHub’s File Finder and start typing. . Note however that the csl-styles Gem package used by jekyll-scholar lags behind the official CSL style repository, so some names you choose may not work. In that case, you can supply a CSL file yourself. For this demo, I found the file physical-review-d.csl, added it to my main blog directory, and then specified the style name physical-review-d in _config.yml. This produced the bracketed-number citation markers above, and the reference format you see below in the References section. (EDIT: Actually I customized the CSL file a bit after that, so my new file is custom.csl.) . | The convenience of this BibTeX/jekyll-scholar approach is that instead of having to manually edit references on each individual page – say, if you wanted to change citation formats (or alternatively, update information about a paper cited in multiple posts) – now you only change one line in _config.yml (or update one spot in references.bib) and the system “builds out” the change “everywhere.” . Happy blogging! . References .",
            "url": "https://drscotthawley.github.io/blog/2020/07/01/Citations-Via-Bibtex.html",
            "relUrl": "/2020/07/01/Citations-Via-Bibtex.html",
            "date": " • Jul 1, 2020"
        }
        
    
  
    
  
    
        ,"post10": {
            "title": "Data Are Measurements, Not the Things Themselves",
            "content": "Intro . There&#39;s a tendency in the data science to conflate data about people and things with the genuine articles. Furthermore, in the [online world], there is concern about being able to trust what we see online, as if the internet were an extension of our body&#39;s sensory apparatus. . My post today is a bit of &quot;ontology,&quot; but it has some practical consequences. . It&#39;s important to realize that data points often represent real people, and that the predictions and decisions of models can have real impact. It&#39;s also important to keep in mind that these data were obtained via various forms of measurements, which can involve reductions and biases. . This applies even when not dealing with people; it happens when working data of physical systems. One hopes that one&#39;s instruments accurately reflect object reality, but we know this is usually not quite the case. But since people are &#39;messy&#39; and highly variable, I&#39;d like to illustrate via an area less personal: Astronomy. . Take Astronomy, for Instance . As a graduate student studying astrophysics, I was shocked at some of the statistics work I saw being performed. I recall seeing a much more senior scientist show a circular-ball-shaped assortment of data points, to which he fit various lines, and proceeded to (try to) draw important physical inferences from these fits: . import altair as alt import pandas as pd import numpy as np from numpy.random import normal # Generate some random data np.random.seed(2) N = 500 x = normal(loc=1.0, size=N) y = normal(loc=1.0, size=N) source = pd.DataFrame({&quot;x&quot;: x, &quot;y&quot;: y}) # Define the degree of the polynomial fits degree_list = [2] base = alt.Chart(source).mark_circle(color=&quot;black&quot;).encode( alt.X(&quot;x&quot;), alt.Y(&quot;y&quot;) ) polynomial_fit = [ base.transform_regression( &quot;x&quot;, &quot;y&quot;, method=&quot;poly&quot;, order=order, as_=[&quot;x&quot;, str(order)] ) .mark_line() .transform_fold([str(order)], as_=[&quot;degree&quot;, &quot;y&quot;]) #.encode(alt.Color(&quot;degree:N&quot;)) for order in degree_list ] alt.layer(base, *polynomial_fit) . . Figure 1: Example of a graph I once saw an established astronomer try to fit lines to. . All I could say to this, as a young intern, was, &quot;....And that&#39;s a good fit?&quot; When I said that in front of this scientist and his boss, the boss laughed. . On another occasion, an enormously famous astronomer was giving a &quot;lunch talk&quot; and showed a graph like... . np.random.seed(11) N = 25 x = normal(loc=0.25, scale=0.1, size=N) y = normal(loc=0.5, scale=0.2, size=N) x2 = normal(loc=0.5, scale=0.25, size=N) y2 = normal(loc=0.25, scale=0.1, size=N) x, y = np.concatenate((x,x2)), np.concatenate((y,y2)) source = pd.DataFrame({&quot;x&quot;: x, &quot;y&quot;: y}) base = alt.Chart(source).mark_point(clip=True).encode( alt.X(&quot;x&quot;, scale=alt.Scale(domain=(0, 1.5))), alt.Y(&quot;y&quot;, scale=alt.Scale(domain=(0, 1.2))) ) base . . Figure 2: Smattering of 25 data points representing stars ...and proceeded to say, &quot;Clearly we have two [different] populations of objects...&quot; . The Malmquist bias .",
            "url": "https://drscotthawley.github.io/blog/philosophy/data/deepfakes/2020/03/01/Data-Are-Measurements.html",
            "relUrl": "/philosophy/data/deepfakes/2020/03/01/Data-Are-Measurements.html",
            "date": " • Mar 1, 2020"
        }
        
    
  
    
        ,"post11": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://drscotthawley.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post12": {
            "title": "Mac ⇒ Linux Switch Notes",
            "content": "Mac and I aren’t breaking up, we’re just seeing other people. . Intro . I’d been jonesing for a laptop with a real GPU for a couple years. Granted, most of my computation occurs on remote servers, but sometimes when I’m traveling, those connections can be spotty. And heck, I might want to play the occasional video game (without NVIDIA GeForce NOW). . Twenty years ago, I switched from Linux/Windows dual-boot to Mac so I could get shiny apps, and to not have to worry about device drivers, etc. But with Apple dragging their feet re. hardware upgrades, I finally took the plunge – before my Mac died, so I’d have plenty of time to transition. . Got a System76 Oryx Pro. With Pop!_OS 19.10 — I’m used to Ubuntu, so this is a bit new. I’m so impressed with the System76 folks that I want to try to stay with their Pop!_OS because I know they’ve been doing the tweaking so it’ll work well with their laptops, and also so I can legit bug them when I hit problems. ;-) Like Ubuntu, Pop!_OS is a Debian variant, so much of the same actions apply. . Similar posts by others: . https://www.theportlandcompany.com/2017/08/14/switching-mac-ubuntu-gnome-17-04/ | http://www.matthewbuscemi.com/blog/2019-06-05-the-great-linux-migration-of-2019.html | . Syncing with Apple Ecosystem . (from within Linux. See below for alleged VirtualBox installation of MacOS) . I still have an iPad &amp; iPhone, so finding a solution that could sync with what I already have (rather than, e.g., going with Google Calendars) was helpful. . One could simply use iCloud.com via a web browser, but I&#39;d like to integrate a bit more with the Linux ecosystem. . Mail: . I tried Geary, Thunderbird &amp; Evolution. Found more online instructions for using Evolution. Evolution doesn’t to do like Mac’s Mail.app does, namely integrate all your inboxes into one unified Inbox – you have to go an check each inbox for each account. But here’s a workaround to fake it. (Thunderbird supports a nice unified inbox view. Note that Thunderbird’s font size is minuscule, but you can rescale it.) . My account types: Gmail and Microsoft Exchange. . | Calendar: . Evolution will integrate with Apple: https://ar.al/2018/08/05/using-icloud-calendars-on-gnu-linux/ . Note that accounts added in Evolution will propagate to default Gnome Calendar app too, but there’s no way to get Gnome to add new Apple calendars; only Evolution provides this functionality, it seems. . | Contacts: . Evolution again: https://ar.al/2018/08/05/getting-your-icloud-contacts-on-gnu-linux/ . Sadly, unlike the Mac, when you try to use the contacts, for example when you start addressing an email, it won’t prioritize the search/matching list by the most recent people you’ve actually contacted. Rather the names of people you haven’t interacted with in years will dominate the list of names. . | Notes (wrapper to web app): . iCloud Notes Snap: https://www.addictivetips.com/ubuntu-linux-tips/use-icloud-on-linux/ . All this thing is is a web browser that connects to Apple&#39;s iCloud notes page. So no using this offline. Note that you have to log out &amp; back in before you see Snap apps. Also note that Hide/Minimize on this window will make it almost impossible to recover. (??) Thus I tend to move the window to another desktop. . | Messages (SMS) . TL/DR: It’s a no-go. . There is no iCloud version of Messages. Apple won&#39;t allow 3rd party apps. . Gnome Phone Manager was supposed to let you pair with your phone via Bluetooth and then send &amp; receive messages, but it’s obsolete now and I couldn’t get it to work. . KDE has a &quot;Connect&quot; app, but I&#39;m not abandoning all the Gnome setup I’ve done to switch to KDE! And it probably only works with Android. . Wammu is unable to connect to my (Bluetooth-paired) phone. . You could configure your old Mac as a remote Messages server, but this implementation is insecure: https://github.com/cvincent/umessage . Verizon doesn&#39;t offer a Linux version of their Message+ app, but you can send/receive via their web site. . …One could always use some alternate messaging ‘ecosystem’ like WhatsApp’s web app or Signal, but I was looking for ways to get ‘regular’ SMS messages for my existing number. :-/ . | Files: . Honestly Dropbox is fine! I turned on ssh ‘sharing’ on my Mac so I can scp files if I need to, but Dropbox on Linux is as easy as one would imagine. . | Music: . For actual audio production, I’ll need to keep the Mac around for Logic &amp; Pro Tools. As far as casual listening to music,…eh. I’m fine with Pandora. (I’m not a Spotify user.) Note: Did get studio audio working under Linux though! See below under “Audio”. . | Backups: . I have an Apple “Time Capsule” WiFi-cum-backup server. It’s not going to be possible to back up both the Mac and the Linux machine to the same device. I’ll need to choose which machine to back up there. Some have suggested getting a Raspberry Pi and mount a $30 2TB HD to it for backing up the Linux machine. TODO. . | . CUDA / Tensorflow / PyTorch . TL/DR: this was the grand hope of buying this computer. Still not able to run yet, but I’ll never give up. ;-) . This main challenge, as with any system really, is grabbing a version of CUDA that will allow you to grab at least a few binaries: . Latest CUDA via system76&#39;s distro is 10.2. They don’t offer 10.1 anymore. . | PyTorch builds only support up to 10.1. To get CUDA 10.2 support, I built PyTorch from source. My research code isn’t running…I suspect because something in PyTorch changed re. multiprocessing support. :-(. | System76 made a &quot;tensorman&quot; docker util. I confess to my shame that I still find docker to be rather confusing. Using tensorman, I was able to run their tiny demo but not my own research codes. I tried building my own docker image but….didn&#39;t enjoy it. Went back to what I know: Anaconda. Still no success. TODO: Will update. . | Tensorflow binaries go up to CUDA 10.0. I&#39;d built tensorflow-gpu from source multiple times on Ubuntu systems...but I spent 3 days on this thing and still haven&#39;t gotten it to build. Some kind of error with grpc at gettid. :-/ OOoo! Got it! Uh, at least, it compiles. | . Document Editing . Markdown: Over the years, I’ve tried a number of Markdown editors – Haroopad, Mou, Ghost, StackEdit. Then today I discovered Typora. It is my favorite by far! . | Code: I like Atom or VSCode for code (same as I did on the Mac). . | Office: LibreOffice seems, so far, to be able to read &amp; write my Microsoft Office files without mangling them! It’s uglier, but that’s par for the course. . | (Nonfiction) Book authorship: . I’d been working on a book using Scrivener 3. Scrivener released a(n unofficial) Linux port but it’s old. Linux users now typically either run the Windows or Mac versions however they can. See “MacOS on Linux via VirtualBox”, below. (Score! Mac license key successfully-hypothetically accepted in VirtualBox guest OS.) | Alternatives: Manuskript (cf. novelist Matthew Buscemi’s notes on switching from Scrivener to Manuskript), or Sigil for EPUBs, Scribus for print layout,…? …Well and of course LaTeX! ;-) | . | . Peripherals . One doesn’t hope for much with Linux, but I’ve succeeded with more than I’d hoped for. As follows… . Audio . Bluetooth pairing to a Bose Soundlink works fine: Ooo, and the volume buttons on the keyboard control the Bluetooth speaker volume! . | My Focusrite 2i2 USB box works right away – sort of. The OS recognizes it but then ignores it and just keeps using the laptop defaults regardless of what you set for the System Settings. Yet Audacity will actually use it correctly. ¯ _(ツ)_/¯. Officially, Focusrite claims no Linux support, but allows that you might get lucky since they are USB class-compliant. UPDATE: If you manually set the Sound setting to Internal Speakers and then set it to the Focusrite, then the Focusrite gets used for everything. (Seems that the Plug’n’Play is a bit messed up.) . | My Steinberg UR44 USB audio interface… was not recognized at first. There’s a thread from 2014 on the Steinberg forums for setting up both the UR22 and UR44 on Linux. They say you need to flip the switch on the back of the device to “Class Compliant (CC)” mode. Then turn the Steinberg off &amp; on (i.e. unplug the power cable &amp; plug it in) and…voila! It now shows up! I have studio-quality audio I/O!! . | . Video . External Displays (HDMI): One thing that will require getting used to will be the fact that you can only use the HDMI port on the Oryx Pro when the NVIDIA GPU is fully enabled. You can’t use it with the Intel Graphics or Hybrid Graphics. And switching graphics modes requires a reboot. :-/ But after rebooting, it works! Too bad the battery life isn’t so hot with the NVIDIA card, but that’s ok. ;-) . ….Uh, and apparently it refuses to route audio through HDMI even though it should. Hmm. Found this out the hard way when teaching a university class to audio engineering students. :-( . | . Apple Wireless Keyboard . The Pop!_OS/Gnome GUI-based Bluetooth pairing method wasn’t working super great, so I started out following these command-line instructions and then switched over to to Pop!_OS GUI once the scan was in progress. . Currently typing these words on my wireless keyboard, with the laptop in the closet, looking at my external monitor connected via HDMI, listening to external monitor speakers controlled by the Steinberg UR44! :) . | . Customization . Gnome: . System76 posted a list of handy Gnome extensions. | Gnome Tweaks, e.g. for adding Minimize/Maximize buttons to the windows! The default Gnome desktop…I do not understand what those developers are thinking, other than “Let’s waste screen real estate.” | . | Keyboard Colors (on Oryx Pro): There are a few utilities out there. I went with this one. Note that there are only three &quot;zones&quot; of color definable, not controls for each key. Also had to use sudo to enable user writing to appropriate /sys/ devices. . | Scrolling: Unlike the Mac, the trackpad scrolling behavior seems to be app-specific. As I write this, Typora doesn’t offer any inertia – also called “coasting” – whereas a few Gnome apps (except Terminal!) offer near-perfect Mac-like inertia scrolling, whereas Thunderbird, Atom &amp; VSCode offer none. SOLUTION: Install the “Synaptics” (legacy) driver: . sudo apt install xserver-xorg-input-synaptics . …then log out &amp; log back in. Now things are much better; it’s a pretty buggy and sometimes the kinetic scrolling won’t kick in, and other times it will. But this is a vast improvement. (Note: I did not uninstall libinput but rather left it in.) . Oh but wait! On reboot the trackpad was dead! The only solution was to uninstall the synaptics driver :-( and now the trackpad works again. . | . MacOS on Linux via VirtualBox . (Given Apple’s EULA, the following is purely a hypothetical scenario for discussion purposes only...) . Sometimes one may simply need a particular Mac app. This “semi-automated install script” described on the VirtualBox Wikibooks page is…I am told, hypothetically…awesome! It will – allegedly, mind you – automatically grab the MacOS ISO and set everything up! (Note that the first time that hypothetical-me might have tried this, hypothetical-me may have missed a bunch of the prompts from the script because the VirtualBox window had obscured the Terminal. Don’t be like said hypothetical-me – hypothetically you should follow the script, and just press enter at the appropriate moments.) And it allegedly mostly “just works.” . Also: Catalina won’t work yet; only Mojave for now. . Main Issues: . Guest Additions don’t get set up. For a long time, VirtualBox didn’t have Guest Additions for Mac guests, and then it did, and now the newest VirtualBox (version 6.1) doesn’t. But the above script installs version 6.0.14, and for versions 6.0.12 to 6.0.14 there were Guest Additions for Mac! Still available for download here. Then following these instructions, one might download this .iso file from within the macOS guest, then mount it (via the Finder), then double-click on the file VBoxDarwinAdditions.pkg to install them. Doing this will enable shared clipboards and… . | Shared Folders – not. Once the Guest Additions are up, one may try to create a directory on the Mac client, e.g. mkdir ~/linux as a mount point, and set up a shared folder in Virtual Box that could auto-mount to this location…. and then one can hypothetically waste HOURS AND HOURS and never it get it to work, at which point one may give up and just use Dropbox or some ****. Really I just wanted this for Scrivener, so syncing ~/Dropbox/Documents would be sufficient. . Alternatively, you could use “File Sharing” to setup a Samba server, but…Not gonna. . | Insanely Slow Execution. Lots of issues with the Mac guest, one of which is that it’ll only utilize 1 CPU! . | Low Display Resolution by default. But fixable by changing the EFI resolution, such as by running on the host system the command . $ VBoxManage setextradata &quot;macOS&quot; VBoxInternal2/EfiGraphicsResolution 1600x900 . | . | For some reason, iMessages won’t hypothetically login, even though other aspects of iCloud &amp; AppleID link. No errors, just…doesn’t seem to work….so I’m told. . | “Obviously”, hardware-stuff like the Facetime camera probably will never work. Don’t care. . | . Dual Boot - adding Windows . (Let’s be honest: this is just for playing video games.) . The System76 instructions seem to start in the middle of something; pretty confusing. And there’s a second set of System76 instructions with almost the same title. Turns out the former is for adding Pop!_OS to Windows, and the latter is for adding Windows to Pop!_OS. The latter is what I wanted… but… wasn’t able to follow what they did. So….here’s what I did: . You can’t repartition your hard drive while it’s being used. So create a bootable USB image of either all of Pop!_OS or else just the GParted partitioning tool. The Popsicle utility is good for flashing USBs. . | Restart the machine, hold F7, and select the USB from the boot menu. Then you can run GParted. My version looked like the following, where /dev/sda3 is the main partition that started as all Pop!_OS: . . | All you need to do is resize the big partition to a smaller size. I made mine such that it would free up 120 GB. You don’t need to create a new partition in the newly-unallocated space or format it; Windows will do that. . | Get a legit bootable Windows 10 ISO somehow, e.g. by downloading from Microsoft or (mumble mumble). Mine was super-old which made what follows extra-fun. (I used a second USB stick by the way). At least it still had a valid Activation Key. :-) . | Restart with with Windows ISO USB inserted, hold F7, boot to the Windows installer. In the installer, when choosing a partition, choose the empty space that was leftover after you shrunk (shrank?) your main Linux partition. Install Windows there. . | Windows installs itself at the front of the machine’s rudimentary boot-loading menu (the F7 thing), meaning that, congratulations, your machine now boots to Windows by default, and I haven’t figured out how to change that. Good news is, the Windows install process will require restarting a bunch of times, so at least that will happen automatically (without you having to choose not-Linux over &amp; over). . | When Windows finally came up, it couldn’t detect the WiFI device on the laptop! That was a bit scary, and made it rather challenging to download any sort of updates. Thankfully the Ethernet jack worked, and so I was able to download enough updates so that eventually (after many incremental update-installs and reboot cycles) the WiFi device started working. . | Managed to install everything I wanted, included Steam and Uplay. Got “Rise of the Tomb Raider” for $12 and played it on max settings at 80 to 100 FPS with no trouble. :-) (Well, note that the machine gets super-hot and the fan runs like crazy, but what do you expect?) . | Now, every time I want to boot to Linux, I have to remember to hold F7. …Oh well. . | Trouble! . When I came back to Linux from Windows, the system started hanging intermittently. I though maybe it was limited to the trackpad but it seems there are many reports of freezing with Ubuntu 19.10 (which Pop!_OS inherits from) for certain video drivers, and in fact I was in “full NVIDIA mode” when I came back to Linux from Windows. Tonight I’ve been typing the rest of this in Hybrid Graphics mode with not a single hang. So…maybe that’s all I can hope for for now. . I’ll get by. . ….How about we stop there for now. I’ll post another edit of this once PyTorch &amp; Tensorflow are working to my satisfaction. . P.S.- Oh hey. I was going to end that last line with a fingers-crossed emoji, only to find out that Ubuntu and most Linux distributions don’t supoort emoji by default, but there is a Gnome Characters package, which after installing, will let you do this: 🤞😃👍 . . -SH, 1/13/2020. .",
            "url": "https://drscotthawley.github.io/blog/2020/01/13/Mac-Linux-Switch-Notes.html",
            "relUrl": "/2020/01/13/Mac-Linux-Switch-Notes.html",
            "date": " • Jan 13, 2020"
        }
        
    
  
    
        ,"post13": {
            "title": "Principal Component Analysis (PCA) from Scratch",
            "content": ". Relevance . Principal Component Analysis (PCA) is a data-reduction technique that finds application in a wide variety of fields, including biology, sociology, physics, medicine, and audio processing. PCA may be used as a &quot;front end&quot; processing step that feeds into additional layers of machine learning, or it may be used by itself, for example when doing data visualization. It is so useful and ubiquitious that is is worth learning not only what it is for and what it is, but how to actually do it. . In this interactive worksheet, we work through how to perform PCA on a few different datasets, writing our own code as we go. . Other (better?) treatments . My treatment here was written several months after viewing... . the excellent demo page at setosa.io | this quick 1m30s video of a teapot, | this great StatsQuest video | this lecture from Andrew Ng&#39;s course | . Basic Idea . Put simply, PCA involves making a coordinate transformation (i.e., a rotation) from the arbitrary axes (or &quot;features&quot;) you started with to a set of axes &#39;aligned with the data itself,&#39; and doing this almost always means that you can get rid of a few of these &#39;components&#39; of data that have small variance without suffering much in the way of accurcy while saving yourself a ton of computation. . Once you &quot;get it,&quot; you&#39;ll find PCA to be almost no big deal, if it weren&#39;t for the fact that it&#39;s so darn useful! . We&#39;ll define the following terms as we go, but here&#39;s the process in a nutshell: . Covariance: Find the covariance matrix for your dataset | Eigenvectors: Find the eigenvectors of that matrix (these are the &quot;components&quot; btw) | Ordering: Sort the eigenvectors/&#39;dimensions&#39; from biggest to smallest variance | Projection / Data reduction: Use the eigenvectors corresponding to the largest variance to project the dataset into a reduced- dimensional space | (Check: How much did we lose by that truncation?) | Caveats . Since PCA will involve making linear transformations, there are some situations where PCA won&#39;t help but...pretty much it&#39;s handy enough that it&#39;s worth giving it a shot! . Covariance . If you&#39;ve got two data dimensions and they vary together, then they are co-variant. . Example: Two-dimensional data that&#39;s somewhat co-linear: . import numpy as np import matplotlib.pyplot as plt import plotly.graph_objects as go N = 100 x = np.random.normal(size=N) y = 0.5*x + 0.2*(np.random.normal(size=N)) fig = go.Figure(data=[go.Scatter(x=x, y=y, mode=&#39;markers&#39;, marker=dict(size=8,opacity=0.5), name=&quot;data&quot; )]) fig.update_layout( xaxis_title=&quot;x&quot;, yaxis_title=&quot;y&quot;, yaxis = dict(scaleanchor = &quot;x&quot;,scaleratio = 1) ) fig.show() . . . Variance . So, for just the $x$ component of the above data, there&#39;s some mean value (which in this case is zero), and there&#39;s some variance about this mean: technically the variance is the average of the squared differences from the mean. If you&#39;re familiar with the standard deviation, usually denoted by $ sigma$, the variance is just the square of the standard deviation. If $x$ had units of meters, the variance $ sigma^2$ would have units of meters^2. . Think of the variance as the &quot;spread,&quot; or &quot;extent&quot; of the data, about some particular axis (or input, or &quot;feature&quot;). . Similarly we can look at the variance in just the $y$ component of the data. For the above data, the variances in $x$ and $y$ are . print(&quot;Variance in x =&quot;,np.var(x)) print(&quot;Variance in y =&quot;,np.var(y)) . Variance in x = 0.6470431671825421 Variance in y = 0.19318628312072175 . Covariance . You&#39;ll notice in the above graph that as $x$ varies, so does $y$ -- pretty much. So $y$ is &quot;covariant&quot; with $x$. &quot;Covariance indicates the level to which two variables vary together.&quot; To compute it, it&#39;s kind of like the regular variance, except that instead of squaring the deviation from the mean for one variable, we multiply the deviations for the two variables: . $${ rm Cov}(x,y) = {1 over N-1} sum_{j=1}^N (x_j- mu_x)(y_j- mu_j),$$ where $ mu_x$ and $ mu_y$ are the means for the x- and y- componenets of the data, respectively. Note that you can reverse $x$ and $y$ and get the same result, and the covariance of a variable with itself is just the regular variance -- but with one caveat! . The caveat is that we&#39;re dividing by $N-1$ instead of $N$, so unlike the regular variance we&#39;re not quite taking the mean. Why this? Well, for large datasets this makes essentially no difference, but for small numbers of data points, using $N$ can give values that tend to be a bit too small for most people&#39;s tastes, so the $N-1$ was introduced to &quot;reduce small sample bias.&quot; . In Python code, the covariance calculation looks like . def covariance(a,b): return ( (a - a.mean())*(b - b.mean()) ).sum() / (len(a)-1) print(&quot;Covariance of x &amp; y =&quot;,covariance(x,y)) print(&quot;Covariance of y &amp; x =&quot;,covariance(x,y)) print(&quot;Covariance of x with itself =&quot;,covariance(x,x),&quot;, variance of x =&quot;,np.var(x)) print(&quot;Covariance of y with itself =&quot;,covariance(y,y),&quot;, variance of x =&quot;,np.var(y)) . Covariance of x &amp; y = 0.3211758726837525 Covariance of y &amp; x = 0.3211758726837525 Covariance of x with itself = 0.6535789567500425 , variance of x = 0.6470431671825421 Covariance of y with itself = 0.19513765971790076 , variance of x = 0.19318628312072175 . Covariance matrix . So what we do is we take the covariance of every variable with every variable (including itself) and make a matrix out of it. Along the diagonal will be the variance of each variable (except for that $N-1$ in the denominator), and the rest of the matrix will be the covariances. Note that since the order of the variables doesn&#39;t matter when computing covariance, the matrix will be symmetric (i.e. it will equal its own transpose, i.e. will have a reflection symmetry across the diagonal) and thus will be a square matrix. . Numpy gives us a handy thing to call: . data = np.stack((x,y),axis=1) # pack the x &amp; y data together in one 2D array print(&quot;data.shape =&quot;,data.shape) cov = np.cov(data.T) # .T b/c numpy wants varibles along rows rather than down columns? print(&quot;covariance matrix = n&quot;,cov) . data.shape = (100, 2) covariance matrix = [[0.65357896 0.32117587] [0.32117587 0.19513766]] . Some 3D data to work with . Now that we know what a covariance matrix is, let&#39;s generate some 3D data that we can use for what&#39;s coming next. Since there are 3 variables or 3 dimensions, the covariance matrix will now be 3x3. . z = -.5*x + 2*np.random.uniform(size=N) data = np.stack((x,y,z)).T print(&quot;data.shape =&quot;,data.shape) cov = np.cov(data.T) print(&quot;covariance matrix = n&quot;,cov) # Plot our data import plotly.graph_objects as go fig = go.Figure(data=[go.Scatter3d(x=x, y=y, z=z,mode=&#39;markers&#39;, marker=dict(size=8,opacity=0.5), name=&quot;data&quot; )]) fig.update_layout( xaxis_title=&quot;x&quot;, yaxis_title=&quot;y&quot;, yaxis = dict(scaleanchor = &quot;x&quot;,scaleratio = 1) ) fig.show() . data.shape = (100, 3) covariance matrix = [[ 0.65357896 0.32117587 -0.33982198] [ 0.32117587 0.19513766 -0.15839307] [-0.33982198 -0.15839307 0.5207214 ]] . . . (Note that even though our $z$ data didn&#39;t explicitly depend on $y$, the fact that $y$ is covariant with $x$ means that $y$ and $z$ &#39;coincidentally&#39; have a nonzero covariance. This sort of thing shows up in many datasets where two variables are correlated and may give rise to &#39;confounding&#39; factors.) . So now we have a covariance matrix. The next thing in PCA is find the &#39;principal components&#39;. This means the directions along which the data varies the most. You can kind of estimate these by rotating the 3D graph above. See also this great YouTube video of a teapot (1min 30s) that explains PCA in this manner. . To do Principal Component Analysis, we need to find the aforementioned &quot;components,&quot; and this requires finding eigenvectors for our dataset&#39;s covariance matrix. . What is an eigenvector, really? . First a definition. (Stay with me! We&#39;ll flesh this out in what comes after this.) . Given some matrix (or &#39;linear operator&#39;) ${ bf A}$ with dimensions $n times n$ (i.e., $n$ rows and $n$ columns), there exist a set of $n$ vectors $ vec{v}_i$ (each with dimension $n$, and $i = 1...n$ counts which vector we&#39;re talking about) such that multiplying one of these vectors by ${ bf A}$ results in a vector (anti)parallel to $ vec{v}_i$, with a length that&#39;s multiplied by some constant $ lambda_i$. In equation form: . $${ bf A} vec{v}_i = lambda_i vec{v}_i, (1)$$ . where the constants $ lambda_i$ are called eigenvalues and the vectors $ vec{v}_i$ are called eigenvectors. . (Note that I&#39;m departing a bit from common notation that uses $ vec{x}_i$ instead of $ vec{v}_i$; I don&#39;t want people to get confused when I want to use $x$&#39;s for coordinate variables.) . A graphical version of this is shown in Figure 1: . . Figure 1. &quot;An eigenvector is a vector that a linear operator sends to a multiple of itself&quot; -- Daniel McLaury . Brief Q &amp; A before we go on: . &quot;So what&#39;s with the &#39;eigen&#39; part?&quot; That&#39;s a German prefix, which in this context means &quot;inherent&quot; or &quot;own&quot;. | &quot;Can a non-square matrix have eigenvectors?&quot; Well,...no, and think of it this way: If $ bf{A}$ were an $n times m$ matrix (where $m &lt;&gt; n$), then it would be mapping from $n$ dimensions into $m$ dimensions, but on the &quot;other side&quot; of the equation with the $ lambda_i vec{v}_i$, that would still have $n$ dimensions, so... you&#39;d be saying an $n$-dimensional object equals an $m$-dimensional object, which is a no-go. | &quot;But my dataset has many more rows than columns, so what am I supposed to do about that?&quot; Just wait! It&#39;ll be ok. We&#39;re not actually going to take the eigenvectors of the dataset &#39;directly&#39;, we&#39;re going to take the eigenvectors of the covariance matrix of the dataset. | &quot;Are eigenvectors important?&quot; You bet! They get used in many areas of science. I first encountered them in quantum mechanics.* They describe the &quot;principal vectors&quot; of many objects, or &quot;normal modes&quot; of oscillating systems. They get used in computer vision, and... lots of places. You&#39;ll see them almost anywhere matrices &amp; tensors are employed, such as our topic for today: Data science! | *Ok that&#39;s not quite true: I first encountered them in an extremely boring Linear Algebra class taught by an extremely boring NASA engineer who thought he wanted to try teaching. But it wasn&#39;t until later that I learned anything about their relevance for...anything. Consquently I didn&#39;t &quot;learn them&quot; very well so writing this is a helpful review for me. . How to find the eigenvectors of a matrix . You call a library routine that does it for you, of course! ;-) . from numpy import linalg as LA lambdas, vs = LA.eig(cov) lambdas, vs . (array([1.07311435, 0.26724004, 0.02908363]), array([[-0.73933506, -0.47534042, -0.47690162], [-0.3717427 , -0.30238807, 0.87770657], [ 0.56141877, -0.82620393, -0.04686177]])) . Ok sort of kidding; we&#39;ll do it &quot;from scratch&quot;. But, one caveat before we start: Some matrices can be &quot;weird&quot; or &quot;problematic&quot; and have things like &quot;singular values.&quot; There are sophisticated numerical libraries for doing this, and joking aside, for real-world numerical applications you&#39;re better off calling a library routine that other very smart and very careful people have written for you. But for now, we&#39;ll do the straightforward way which works pretty well for many cases. We&#39;ll follow the basic two steps: . Find the eigenvalues | &#39;Plug in&#39; each eigenvalue to get a system of linear equations for the values of the components of the corresponding eigenvector | Solve this linear system. | 1. Find the eigenvalues . Ok I&#39;m hoping you at least can recall what a determinant of a matrix is. Many people, even if they don&#39;t know what a determinant is good for (e.g. tons of proofs &amp; properties all rest on the determinant), they still at least remember how to calculate one. . The way to get the eigenvalues is to take the determinant of the difference between a $ bf{A}$ and $ lambda$ times the identity matrix $ bf{I}$ (which is just ones along the diagonal and zeros otherwise) and set that difference equal to zero... . $$det( bf{A} - lambda I) = 0 $$ . Just another observation:Since ${ bf I}$ is a square matrix, that means $ bf{A}$ has to be a square matrix too. Then solving for $ lambda$ will give you a polynomial equation in $ lambda$, the solutions to (or roots of) which are the eigenvectors $ lambda_i$. . Let&#39;s do an example: . $$ { bf A} = begin{bmatrix} -2 &amp; 2 &amp; 1 -5 &amp; 5 &amp; 1 -4 &amp; 2 &amp; 3 end{bmatrix} $$To find the eigenvalues we set $$ det( bf{A} - lambda I) = begin{vmatrix} -2- lambda &amp; 2 &amp; 1 -5 &amp; 5- lambda &amp; 1 -4 &amp; 2 &amp; 3- lambda end{vmatrix} = 0.$$ . This gives us the equation... $$0 = lambda^3 - 6 lambda^2 + lambda - 6$$ . which has the 3 solutions (in descending order) $$ lambda = 3, 2, 1.$$ . *(Aside: to create an integer matrix with integer eigenvalues, I used [this handy web tool](https://ericthewry.github.io/integer_matrices/))*. . Just to check that against the numpy library: . A = np.array([[-2,2,1],[-5,5,1],[-4,2,3]]) def sorted_eig(A): # For now we sort &#39;by convention&#39;. For PCA the sorting is key. lambdas, vs = LA.eig(A) # Next line just sorts values &amp; vectors together in order of decreasing eigenvalues lambdas, vs = zip(*sorted(zip(list(lambdas), list(vs.T)),key=lambda x: x[0], reverse=True)) return lambdas, np.array(vs).T # un-doing the list-casting from the previous line lambdas, vs = sorted_eig(A) lambdas # hold off on printing out the eigenvectors until we do the next part! . (3.0000000000000027, 1.9999999999999991, 1.0000000000000013) . Close enough! . 2. Use the eigenvalues to get the eigenvectors . Although it was anncounced in mid 2019 that you can get eigenvectors directly from eigenvalues, the usual way people have done this for a very long time is to go back to the matrix $ bf{A}$ and solve the linear system of equation (1) above, for each of the eigenvalues. For example, for $ lambda_1=-1$, we have . $$ { bf}A vec{v}_1 = - vec{v}_1 $$i.e. . $$ begin{bmatrix} -2 &amp; 2 &amp; 1 -5 &amp; 5 &amp; 1 -4 &amp; 2 &amp; 3 end{bmatrix} begin{bmatrix} v_{1x} v_{1y} v_{1z} end{bmatrix} = - begin{bmatrix} v_{1x} v_{1y} v_{1z} end{bmatrix} $$This amounts to 3 equations for 3 unknowns,...which I&#39;m going to assume you can handle... For the other eigenvalues things proceed similarly. The solutions we get for the 3 eigenvalues are: . $$ lambda_1 = 3: vec{v}_1 = (1,2,1)^T$$ . $$ lambda_2 = 2: vec{v}_2 = (1,1,2)^T$$ . $$ lambda_3 = 1: vec{v}_3 = (1,1,1)^T$$ . Since our original equation (1) allows us to scale eigenvectors by any artibrary constant, often we&#39;ll express eigenvectors as unit vectors $ hat{v}_i$. This will amount to dividing by the length of each vector, i.e. in our example multiplying by $(1/ sqrt{6},1/ sqrt{6},1/ sqrt{3})$. . In this setting . $$ lambda_1 = 3: hat{v}_1 = (1/ sqrt{6},2/ sqrt{6},1/ sqrt{6})^T$$ . $$ lambda_2 = 2: hat{v}_2 = (1/ sqrt{6},1/ sqrt{6},2/ sqrt{6})^T$$ . $$ lambda_3 = 1: hat{v}_3 = (1,1,1)^T/ sqrt{3}$$ . Checking our answers (left) with numpy&#39;s answers (right): . print(&quot; &quot;*15,&quot;Ours&quot;,&quot; &quot;*28,&quot;Numpy&quot;) print(np.array([1,2,1])/np.sqrt(6), vs[:,0]) print(np.array([1,1,2])/np.sqrt(6), vs[:,1]) print(np.array([1,1,1])/np.sqrt(3), vs[:,2]) . Ours Numpy [0.40824829 0.81649658 0.40824829] [-0.40824829 -0.81649658 -0.40824829] [0.40824829 0.40824829 0.81649658] [0.40824829 0.40824829 0.81649658] [0.57735027 0.57735027 0.57735027] [0.57735027 0.57735027 0.57735027] . The fact that the first one differs by a multiplicative factor of -1 is not an issue. Remember: eigenvectors can be multiplied by an arbitrary constant. (Kind of odd that numpy doesn&#39;t choose the positive version though!) . One more check: let&#39;s multiply our eigenvectors times A to see what we get: . print(&quot;A*v_1 / 3 = &quot;,np.matmul(A, np.array([1,2,1]).T)/3 ) # Dividing by eigenvalue print(&quot;A*v_2 / 2 = &quot;,np.matmul(A, np.array([1,1,2]).T)/2 ) # to get vector back print(&quot;A*v_3 / 1 = &quot;,np.matmul(A, np.array([1,1,1]).T) ) . A*v_1 / 3 = [1. 2. 1.] A*v_2 / 2 = [1. 1. 2.] A*v_3 / 1 = [1 1 1] . Great! Let&#39;s move on. Back to our data! . Eigenvectors for our sample 3D dataset . Recall we named our 3x3 covariance matrix &#39;cov&#39;. So now we&#39;ll compute its eigenvectors, and then re-plot our 3D data and also plot the 3 eigenvectors with it... . lambdas, vs = sorted_eig(cov) # Compute e&#39;vals and e&#39;vectors of cov matrix print(&quot;lambdas, vs = n&quot;,lambdas,&quot; n&quot;,vs) # Re-plot our data fig = go.Figure(data=[go.Scatter3d(x=x, y=y, z=z,mode=&#39;markers&#39;, marker=dict(size=8,opacity=0.5), name=&quot;data&quot; ) ]) # Draw some extra &#39;lines&#39; showing eigenvector directions n_ev_balls = 50 # the lines will be made of lots of balls in a line ev_size= 3 # size of balls t = np.linspace(0,1,num=n_ev_balls) # parameterizer for drawing along vec directions for i in range(3): # do this for each eigenvector # Uncomment the next line to scale (unit) vector by size of the eigenvalue # vs[:,i] *= lambdas[i] ex, ey, ez = t*vs[0,i], t*vs[1,i], t*vs[2,i] fig.add_trace(go.Scatter3d(x=ex, y=ey, z=ez,mode=&#39;markers&#39;, marker=dict(size=ev_size,opacity=0.8), name=&quot;v_&quot;+str(i+1))) fig.update_layout( xaxis_title=&quot;x&quot;, yaxis_title=&quot;y&quot;, yaxis = dict(scaleanchor = &quot;x&quot;,scaleratio = 1) ) fig.show() . lambdas, vs = (1.073114351318777, 0.26724003566904386, 0.0290836286576176) [[-0.73933506 -0.47534042 -0.47690162] [-0.3717427 -0.30238807 0.87770657] [ 0.56141877 -0.82620393 -0.04686177]] . . . Things to note from the above graph: . The first (red) eigenvector points along the direction of biggest variance | The second (greenish) eigenvector points along the direction of second-biggest variance | The third (purple) eigenvector points along the direction of smallest variance. | (If you edit the above code to rescale the vector length by the eigenvector, you&#39;ll really see these three point become apparent!) . &quot;Principal Component&quot; Analysis . Now we have our components (=eigenvectors), and we have them &quot;ranked&quot; by their &quot;significance.&quot; Next we will eliminate one or more of the less-significant directions of variance. In other words, we will project the data onto the various principal components by projecting along the less-significant components. Or even simpler: We will &quot;squish&quot; the data along the smallest-variance directions. . For the above 3D dataset, we&#39;re going to squish it into a 2D pancake -- by projecting along the direction of the 3rd (purple) eigenvector onto the plane defined by the 1st (red) and 2nd (greenish) eigenvectors. . Yea, but how to do this projection? . Projecting the data . It&#39;s actually not that big of a deal. All we have to do is multiply by the eigenvector (matrix)! . OH WAIT! Hey, you want to see a cool trick!? Check this out: . lambdas, vs = sorted_eig(cov) proj_cov = vs.T @ cov @ vs # project the covariance matrix, using eigenvectors proj_cov . array([[ 1.07311435e+00, 4.47193943e-18, -4.45219967e-17], [ 5.25950058e-17, 2.67240036e-01, 6.70099547e-17], [-7.05170575e-17, 4.02835192e-17, 2.90836287e-02]]) . What was THAT? Let me clean that up a bit for you... . proj_cov[np.abs(proj_cov) &lt; 1e-15] = 0 proj_cov . array([[1.07311435, 0. , 0. ], [0. , 0.26724004, 0. ], [0. , 0. , 0.02908363]]) . Important point: What you just saw is the whole reason eigenvectors get used for so many things, because they give you a &#39;coordinate system&#39; where different &#39;directions&#39; decouple from each other. See, the system has its own (German: eigen) inherent set of orientations which are different the &#39;arbitrary&#39; coordinates that we &#39;humans&#39; may have assigned initially. . The numbers in that matrix are the covariances in the directions of the eigenvectors, instead of in the directions of the original x, y, and z. . So really all we have to do is make a coordinate transformation using the matrix of eigenvectors, and then in order to project we&#39;ll literally just drop a whole index&#39;s-worth of data-dimension in this new coordinate system. :-) . So, instead of $x$, $y$ and $z$, let&#39;s have three coordinates which (following physicist-notation) we&#39;ll call $q_1$, $q_2$ and $q_3$, and these will run along the directions given by the three eigenvectors. . Let&#39;s write our data as a N-by-3 matrix, where N is the number of data points we have. . data = np.stack((x,y,z),axis=1) data.shape # we had a 100 data points, so expecting 100x3 matrix . (100, 3) . There are two ways of doing this, and I&#39;ll show you that they&#39;re numerically equivalent: . Use all the eigenvectors to &quot;rotate&quot; the full dataset into the new coordinate system. Then perform a projection by truncating the last column of the rotated data. | Truncate the last eigenvector, which will make a 3x2 projection matrix which will project the data onto the 2D plane defined by those two eigenvectors. | Let&#39;s show them both: . print(&quot; n 1. All data, rotated into new coordinate system&quot;) W = vs[:,0:3] # keep the all the eigenvectors new_data_all = data @ W # project all the data print(&quot;Checking: new_data_all.shape =&quot;,new_data_all.shape) print(&quot;New covariance matrix = n&quot;,np.cov(new_data_all.T) ) print(&quot; n 2. Truncated data projected onto principal axes of coordinate system&quot;) W = vs[:,0:2] # keep only the first and 2nd eigenvectors print(&quot;W.shape = &quot;,W.shape) new_data_proj = data @ W # project print(&quot;Checking: new_data_proj.shape =&quot;,new_data_proj.shape) print(&quot;New covariance matrix in projected space = n&quot;,np.cov(new_data_proj.T) ) # Difference between them diff = new_data_all[:,0:2] - new_data_proj print(&quot; n Absolute maximum difference between the two methods = &quot;,np.max(np.abs(diff))) . 1. All data, rotated into new coordinate system Checking: new_data_all.shape = (100, 3) New covariance matrix = [[1.07311435e+00 7.64444687e-17 3.77081428e-17] [7.64444687e-17 2.67240036e-01 1.21906748e-16] [3.77081428e-17 1.21906748e-16 2.90836287e-02]] 2. Truncated data projected onto principal axes of coordinate system W.shape = (3, 2) Checking: new_data_proj.shape = (100, 2) New covariance matrix in projected space = [[1.07311435e+00 7.64444687e-17] [7.64444687e-17 2.67240036e-01]] Absolute maximum difference between the two methods = 0.0 . ...Nada. The 2nd method will be faster computationally though, because it doesn&#39;t calculate stuff you&#39;re going to throw away. . One more comparison between the two methods. Let&#39;s take a look at the &quot;full&quot; dataset (in blue) vs. the projected dataset (in red): . fig = go.Figure(data=[(go.Scatter3d(x=new_data_all[:,0], y=new_data_all[:,1], z=new_data_all[:,2], mode=&#39;markers&#39;, marker=dict(size=4,opacity=0.5), name=&quot;full data&quot; ))]) fig.add_trace(go.Scatter3d(x=new_data_proj[:,0], y=new_data_proj[:,1], z=new_data_proj[:,0]*0, mode=&#39;markers&#39;, marker=dict(size=4,opacity=0.5), name=&quot;projected&quot; ) ) fig.update_layout(scene_aspectmode=&#39;data&#39;) fig.show() . . . (Darn it, [if only Plot.ly would support orthographic projections](https://community.plot.ly/t/orthographic-projection-for-3d-plots/3897) [[2](https://community.plot.ly/t/orthographic-projection-instead-of-perspective-for-3d-plots/10035)] it&#39;d be a lot easier to visually compare the two datasets!) . Beyond 3D . So typically we use PCA to throw out many more dimensions than just one. Often this is used for data visualization but it&#39;s also done for feature reduction, i.e. to send less data into your machine learning algorithm. (PCA can even be used just as a &quot;multidimensional linear regression&quot; algorithm, but you wouldn&#39;t want to!) . How do you know how many dimensions to throw out? . In other words, how many &#39;components&#39; should you choose to keep when doing PCA? There are a few ways to make this judgement call -- it will involve a trade-off between accuracy and computational speed. You can make a graph of the amount of variance you get as a function of how many components you keep, and often there will be a an &#39;elbow&#39; at some point on the graph indicating a good cut-off point to choose. Stay tuned as we do the next example; we&#39;ll make such a graph. For more on this topic, see this post by Arthur Gonsales. . Example: Handwritten Digits . The scikit-learn library uses this as an example and I like it. It goes as follows: . Take a dataset of tiny 8x8 pixel images of handwritten digits. | Run PCA to break it down from 8x8=64 dimensions to just two or 3 dimensions. | Show on a plot how the different digits cluster in different regions of the space. | (This part we&#39;ll save for the Appendix: Draw boundaries between the regions and use this as a classifier.) | To be clear: In what follows, each pixel of the image counts as a &quot;feature,&quot; i.e. as a dimension. Thus an entire image can be represented as a single point in a multidimensional space, in which distance from the origin along each dimension is given by the pixel intensity. In this example, the input space is not a 2D space that is 8 units wide and 8 units long, rather it consists of 8x8= 64 dimensions. . from sklearn.datasets import load_digits from sklearn.decomposition import PCA digits = load_digits() X = digits.data / 255.0 Y = digits.target print(X.shape, Y.shape,&#39; n&#39;) # Let&#39;s look a a few examples for i in range(8): # show 8 examples print(&quot;This is supposed to be a &#39;&quot;,Y[i],&quot;&#39;:&quot;,sep=&quot;&quot;) plt.imshow(X[i].reshape([8,8])) plt.show() . (1797, 64) (1797,) This is supposed to be a &#39;0&#39;: . This is supposed to be a &#39;1&#39;: . This is supposed to be a &#39;2&#39;: . This is supposed to be a &#39;3&#39;: . This is supposed to be a &#39;4&#39;: . This is supposed to be a &#39;5&#39;: . This is supposed to be a &#39;6&#39;: . This is supposed to be a &#39;7&#39;: . Now let&#39;s do the PCA thang... First we&#39;ll try going down to 2 dimensions. This isn&#39;t going to work super great but we&#39;ll try: . digits_cov = np.cov(X.T) print(&quot;digits_cov.shape = &quot;,digits_cov.shape) lambdas, vs = sorted_eig(np.array(digits_cov)) W = vs[:,0:2] # just keep two dimensions proj_digits = X @ W print(&quot;proj_digits.shape = &quot;, proj_digits.shape) # Make the plot fig = go.Figure(data=[go.Scatter(x=proj_digits[:,0], y=proj_digits[:,1],# z=Y, #z=proj_digits[:,2], mode=&#39;markers&#39;, marker=dict(size=6, opacity=0.7, color=Y), text=[&#39;digit=&#39;+str(j) for j in Y] )]) fig.update_layout( xaxis_title=&quot;q_1&quot;, yaxis_title=&quot;q_2&quot;, yaxis = dict(scaleanchor = &quot;x&quot;,scaleratio = 1) ) fig.update_layout(scene_camera=dict(up=dict(x=0, y=0, z=1), center=dict(x=0, y=0, z=0), eye=dict(x=0, y=0, z=1.5))) fig.show() . digits_cov.shape = (64, 64) proj_digits.shape = (1797, 2) . . . This is &#39;sort of ok&#39;: There are some regions that are mostly one kind of digit. But you may say there&#39;s there&#39;s too much intermingling between classes for a lot of this plot. So let&#39;s try it again with 3 dimensions for PCA: . W = vs[:,0:3] # just three dimensions proj_digits = X @ W print(&quot;proj_digits.shape = &quot;, proj_digits.shape) # Make the plot, separate them by &quot;z&quot; which is the digit of interest. fig = go.Figure(data=[go.Scatter3d(x=proj_digits[:,0], y=proj_digits[:,1], z=proj_digits[:,2], mode=&#39;markers&#39;, marker=dict(size=4, opacity=0.8, color=Y, showscale=True), text=[&#39;digit=&#39;+str(j) for j in Y] )]) fig.update_layout(title=&quot;8x8 Handwritten Digits&quot;, xaxis_title=&quot;q_1&quot;, yaxis_title=&quot;q_2&quot;, yaxis = dict(scaleanchor = &quot;x&quot;,scaleratio = 1) ) fig.show() . proj_digits.shape = (1797, 3) . . . Now we can start to see some definition! The 6&#39;s are pretty much in one area, the 2&#39;s are in another area, and the 0&#39;s are in still another, and so on. There is some intermingling to be sure (particularly between the 5&#39;s and 8&#39;s), but you can see that this &#39;kind of&#39; gets the job done, and instead of dealing with 64 dimensions, we&#39;re down to 3! . Graphing Variance vs. Components . Earlier we asked the question of how many components one should keep. To answer this quantitatively, we note that the eigenvalues of the covariance matrix are themselves measures of the variance in the datset. So these eigenvalues encode the &#39;significance&#39; that each feature-dimension has in the overall dataset. We can plot these eigenvalues in order and then look for a &#39;kink&#39; or &#39;elbow&#39; in the graph as a place to truncate our representation... . plt.plot( np.abs(lambdas)/np.sum(lambdas) ) plt.xlabel(&#39;Number of components&#39;) plt.ylabel(&#39;Significance&#39;) plt.show() . ...So, if we were wanting to represent this data in more than 3 dimensions but less than the full 64, we might choose around 10 principal compnents, as this looks like roughly where the &#39;elbow&#39; in the graph lies. . Interpretability . What is the meaning of the new coordinate axes or &#39;features&#39; $q_1$, $q_2$, etc? Sometimes there exists a compelling physical intepretation of these features (e.g., as in the case of eigenmodes of coupled oscillators), but often...there may not be any. And yet we haven&#39;t even done any &#39;real machine learning&#39; at this point! ;-) . This is an important topic. Modern data regulations such as the European Union&#39;s GDPR require that models used in algorithmic decision-making be &#39;explainable&#39;. If the data being fed into such algorithmics is already abstracted via methods such as PCA, this could be an issue. Thankfully, the linearity of the components mean that one can describe each principal component as a linear combination of inputs. . Further reading . There are many books devoted entirely to the intricacies of PCA and its applications. Hopefully this post has helped you get a better feel for how to construct a PCA transformation and what it might be good for. To expand on this see the following... . Examples &amp; links . &quot;Eigenstyle: Principal Component Analysis and Fashion&quot; by Grace Avery. Uses PCA on Fashion-MNIST. It&#39;s good! | Neat paper by my friend Dr. Ryan Bebej from when he was a student and used PCA to classify locomotion types of prehistoric acquatic mammals based on skeletal measurements alone. | Andrew Ng&#39;s Machine Learning Course, Lecture on PCA. How I first learned about this stuff. | PCA using Python by Michael Galarnyk. Does similar things to what I&#39;ve done here, although maybe better! | Plot.ly PCA notebook examples | . Appendix A: Overkill: Bigger Handwritten Digits . Sure, 8x8 digit images are boring. What about 28x28 images, as in the MNIST dataset? Let&#39;s roll... . from sklearn.datasets import fetch_openml from random import sample #mnist = fetch_mldata(&#39;MNIST original&#39;) mnist = fetch_openml(&#39;mnist_784&#39;, version=1, cache=True) X2 = mnist.data / 255 Y2 = np.array(mnist.target,dtype=np.int) #Let&#39;s grab some indices for random suffling indices = list(range(X2.shape[0])) # Let&#39;s look a a few examples for i in range(8): # 8 is good i = sample(indices,1) print(&quot;This is supposed to be a &quot;,Y2[i][0],&quot;:&quot;,sep=&quot;&quot;) plt.imshow(X2[i].reshape([28,28])) plt.show() . This is supposed to be a 1: . This is supposed to be a 9: . This is supposed to be a 8: . This is supposed to be a 7: . This is supposed to be a 3: . This is supposed to be a 5: . This is supposed to be a 2: . This is supposed to be a 6: . mnist_cov = np.cov(X2.T) lambdas, vs = sorted_eig(np.array(mnist_cov)) W = vs[:,0:3] # Grab the 3 most significant dimensions # Plotting all 70,000 data points is going to be too dense too look at. # Instead let&#39;s grab a random sample of 5,000 points n_plot = 5000 indices = sample(list(range(X2.shape[0])), n_plot) proj_mnist = np.array(X2[indices] @ W, dtype=np.float32) # Last step of PCA: project fig = go.Figure(data=[go.Scatter3d(x=proj_mnist[:,0], y=proj_mnist[:,1], z=proj_mnist[:,2], mode=&#39;markers&#39;, marker=dict(size=4, opacity=0.7, color=Y2[indices], showscale=True), text=[&#39;digit=&#39;+str(j) for j in Y2[indices]] )]) fig.show() . /usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:9: ComplexWarning: Casting complex values to real discards the imaginary part . . . ...bit of a mess. Not as cleanly separated as the 8x8 image examples. You can see that the 0&#39;s are well separated from the 1&#39;s and the 3&#39;s, but everything else is pretty mixed together. (I suspect the 1&#39;s are clustered strongly because they involve the most dark pixels.) . If you wanted to push this further then either keeping more dimensions (thereby making it un-visualizable) or just using a different method entirely (e.g. t-SNE or even better: UMAP) would be the way to go. Still, it&#39;s neat to see that you can get somewhat intelligible results in 3D even on this &#39;much harder&#39; problem. . Appendix B: Because We Can: Turning it into a Classifier . ...But let&#39;s not do a neural network because all I ever do are neural networks, and because I don&#39;t want to have take the time &amp; space to explain how they work or load in external libraries. Let&#39;s do k-nearest-neighbors instead, because it&#39;s intuitively easy to grasp and it&#39;s not hard to code up: . For any new point we want to evaluate, we take a &#39;vote&#39; of whatever some number (called $k$) of its nearest neighbor points are already assigned as, and we set the class of the new point according to that vote. . Making a efficient classifier is all about finding the *boundaries* between regions (and usually subject to some user-adjustable parameter like $k$ or some numerical threshold). Finding these boundaries can be about finding the &#39;edge cases&#39; that cause the system to &#39;flip&#39; (discontinuously) from one result to another. However, we are *not* going to make an efficient classifier today. ;-) . Let&#39;s go back to the 8x8 digits example, and split it into a training set and a testing set (so we can check ourselves): . indices = sample(list(range(X.shape[0])), X.shape[0]) X_shuf, Y_shuf = X[indices,:], Y[indices] # 80-20 train-test split max_train_ind = int(0.8*X.shape[0]) X_train, Y_train = X_shuf[0:max_train_ind,:], Y_shuf[0:max_train_ind] X_test, Y_test = X_shuf[max_train_ind:-1,:], Y_shuf[max_train_ind:-1] # Do PCA on training set train_cov = np.cov(X_train.T) ell, v = sorted_eig(np.array(train_cov)) pca_dims = 3 # number of top &#39;dimensions&#39; to take W_train = v[:,0:pca_dims] proj_train = X_train @ W_train # also project the testing set while we&#39;re at it proj_test = X_test @ W_train # yes, same W_train . Now let&#39;s make a little k-nearest neighbors routine... . from collections import Counter def knn_predict(xnew, proj_train, Y_train, k=3): &quot;&quot;&quot; xnew is a new data point that has the same shape as one row of proj_train. Given xnew, calculate the (squared) distance to all the points in X_train to find out which ones are nearest. &quot;&quot;&quot; distances = ((proj_train - xnew)**2).sum(axis=1) # stick on an extra column of indexing &#39;hash&#39; for later use after we sort dists_i = np.stack( (distances, np.array(range(Y_train.shape[0]) )),axis=1 ) dists_i = dists_i[dists_i[:,0].argsort()] # sort in ascending order of distance knn_inds = (dists_i[0:k,-1]).astype(np.int) # Grab the indexes for k nearest neighbors # take &#39;votes&#39;: knn_targets = list(Y_train[knn_inds]) # which classes the nn&#39;s belong to votes = Counter(knn_targets) # count up how many of each class are represented return votes.most_common(1)[0][0] # pick the winner, or the first member of a tie # Let&#39;s test it on the first element of the testing set x, y_true = proj_test[0], Y_test[0] guess = knn_predict(x, proj_train, Y_train) print(&quot;guess = &quot;,guess,&quot;, true = &quot;,y_true) . guess = 6 , true = 6 . Now let&#39;s try it for the &#39;unseen&#39; data in the testing set, and see how we do... . mistakes, n_test = 0, Y_test.shape[0] for i in range(n_test): x = proj_test[i] y_pred = knn_predict(x, proj_train, Y_train, k=3) y_true = Y_test[i] if y_true != y_pred: mistakes += 1 if i &lt; 20: # show some examples print(&quot;x, y_pred, y_true =&quot;,x, y_pred, y_true, &quot;YAY!&quot; if y_pred==y_true else &quot; BOO. :-(&quot;) print(&quot;...skipping a lot...&quot;) print(&quot;Total Accuracy =&quot;, (n_test-mistakes)/n_test*100,&quot;%&quot;) . x, y_pred, y_true = [ 0.06075339 0.00153272 -0.0477644 ] 6 6 YAY! x, y_pred, y_true = [ 0.04083212 0.09757529 -0.05361896] 1 1 YAY! x, y_pred, y_true = [-0.0199586 -0.00778773 0.00972962] 8 5 BOO. :-( x, y_pred, y_true = [ 0.02400112 -0.07267613 0.02774141] 0 0 YAY! x, y_pred, y_true = [0.01180771 0.03483923 0.07526469] 1 7 BOO. :-( x, y_pred, y_true = [ 0.00379226 -0.06269449 -0.00195609] 0 0 YAY! x, y_pred, y_true = [-0.06832135 -0.05396545 0.02980845] 9 9 YAY! x, y_pred, y_true = [-0.02397417 -0.04914796 0.0109273 ] 5 5 YAY! x, y_pred, y_true = [ 0.08213707 -0.01608953 -0.08072889] 6 6 YAY! x, y_pred, y_true = [ 0.03056858 -0.04852946 0.02204423] 0 0 YAY! x, y_pred, y_true = [-0.02124777 0.03623541 -0.01773196] 8 8 YAY! x, y_pred, y_true = [0.03035896 0.01398381 0.01415554] 8 8 YAY! x, y_pred, y_true = [ 0.0214849 0.02114674 -0.08951798] 1 1 YAY! x, y_pred, y_true = [ 0.07878152 0.03312015 -0.06488347] 6 6 YAY! x, y_pred, y_true = [-0.01294308 0.00158962 -0.01255491] 8 5 BOO. :-( x, y_pred, y_true = [ 0.01351581 0.11000321 -0.03895516] 1 1 YAY! x, y_pred, y_true = [0.0081306 0.01683952 0.05911389] 7 1 BOO. :-( x, y_pred, y_true = [0.06497268 0.02817075 0.07118004] 4 4 YAY! x, y_pred, y_true = [-0.03879657 -0.04460611 0.02833793] 9 5 BOO. :-( x, y_pred, y_true = [-0.05975051 0.03713843 -0.07174727] 2 2 YAY! ...skipping a lot... Total Accuracy = 76.88022284122563 % . ...eh! Not bad, not amazing. You can improve the accuracy if you go back up and increase the number of PCA dimensions beyond 3, and/or increase the value of $k$. Go ahead and try it! . (For 10 dimensions and $k=7$, I got 97.7% accuracy. The highest I ever got it was 99%, but that was really working overtime, computationally speaking; the point of PCA is to let you dramatically reduce your workload while retaining reasonably high accuracy.) . Just to reiterate: This is NOT supposed to be a state of the art classifier! It&#39;s just a toy that does pretty well and helps illustrate PCA without being hard to understand or code. . The End . Thanks for sticking around! Hope this was interesting. PCA is pretty simple, and yet really useful! ...and writing this really helped me to better understand it. ;-) .",
            "url": "https://drscotthawley.github.io/blog/2019/12/21/PCA-From-Scratch.html",
            "relUrl": "/2019/12/21/PCA-From-Scratch.html",
            "date": " • Dec 21, 2019"
        }
        
    
  
    
        ,"post14": {
            "title": "Getting Started in ML+Audio",
            "content": "Recently, after co-chairing the session on Machine Learning for Musical Acoustics along with the wonderful Bozena Kostek at the Acoustical Society of America Meeting in San Diego, a student came up to me to ask for advice or resources on how to start learning machine learning for audio applications. . And I didn’t have a good answer. Because, while there’s plenty of tips out there for learning image classification or NLP, not a ton of it relates to audio. Students have asked me this before…and so I was frustrated by my own lack of an answer, apart from “read whatever you find, try out demos, take whatever courses you can, etc.” . SO! Now, with graduate student Ryan Miller (EDIT 6/1/2020: who is now gainfully employed at Creative Labs!), we compiled a list and posted it to GitHub: . ml-audio-start Page . … and soliciting contributions from the community. . EDIT 02/01/2020: We now have contributions from accomplished researchers at Google, Adobe, and others! .",
            "url": "https://drscotthawley.github.io/blog/2019/12/06/Getting-Started-In-ML-Audio.html",
            "relUrl": "/2019/12/06/Getting-Started-In-ML-Audio.html",
            "date": " • Dec 6, 2019"
        }
        
    
  
    
        ,"post15": {
            "title": "My First NN Part 3. Multi-Layer Networks and Backpropagation",
            "content": "Links to lessons: Part 0, Part 1, Part 2, Part 3 . What is Backpropagation? . First watch this 5-minute video on backprop by Siraj Raval. . EDIT 2/20/2020: ^Ravel was later revealed to be plagiarizing content. I will look for an alternative link. The format in my (&quot;flipped&quot;) ML course last year involved reading things, watching brief videos, and modifying code. Siraj&#39;s video fit the bill last year as being brief &amp; good. . A Multi-Layer Network . Between the input $X$ and output $ tilde{Y}$ of the network we encountered earlier, we now interpose a &quot;hidden layer,&quot; connected by two sets of weights $w^{(0)}$ and $w^{(1)}$ as shown in the figure below. This image is a bit more complicated than diagrams one might typically encounter; I wanted to be able to show and label all the different &quot;parts.&quot; We will explain what the various symbols mean as we continue after the figure. . As before, the combined operation of weighted sum and nonlinear activation is referred to as a(n artificial) neuron; in the diagram above there are 4 &quot;hidden neurons&quot; or equivalently &quot;4 neurons in the hidden layer&quot; as well as one neuron for output. (The activations $f^{(0)}$ and $f^{(1)}$ may be the same, or they may be different.) . Semantics: What is a Layer? . The term &quot;layer&quot; in regards to neural network is not always used consistently. You may find it used in different senses by different authors. . Some users of the term will only use it with repect to weight matrices, (since these are the parts of the network which are adjusted in learning). | Others will refer to the input and (predicted) output as layers, and may or may not include the weights as layers.. | Others will only count additional &quot;hidden layers&quot; between the inputs and outputs, and these &quot;layers&quot; are connected by multiple weight matrices. | Some will speak of &quot;activation layers.&quot; In software libraries like Keras, many different types of operations and storage are referred to as layers. | For the work we&#39;ve done so far, we&#39;ve had inputs and outputs connected by one weight matrix, subject to a nonlinear activation function. Is this a two-layer network made of input and output &quot;layers,&quot;&quot; or is it a single-layer network, because there is only one weight matrix? What about the activation layer? This is to some degree a semantic issue which one does not need to get hung up on. . For our purposes it is convenient to refer to the inputs $X$, the &#39;activated&#39; hidden states $H$, and the output $ tilde{Y}$ as &quot;layers&quot;, numbering them 0, 1, and 2 respectively, and using the script notation $ mathcal{L}^l$ to denote each layer, where the layer index $l=0..2$, so that . $$ mathcal{L}^{(0)} = X, mathcal{L}^{(1)} = H, mathcal{L}^{(2)} = tilde{Y} $$This makes it easy to write the value of higher-numbered layers in terms of lower-numbed layers, i.e., $$ mathcal{L}^{(l+1)} = f^{(l)} left( { mathcal{L}^{(l)}}^T cdot w^{(l)} right), $$ where the dot $ cdot$ denotes a matrix product. This is often referred to as a &quot;feed foward&quot; operation because values are fed from left to right in the above diagram, &quot;forward&quot; through the network. (Backpropagation will involve feeding values from right to left.) . Response to student question(s): &quot;What are neurons? Like, what does this mean in terms of matrices?&quot; . This will serve as a review of the Part 1 lesson. Using the above notation, the operations from the input to the hidden layer look like this in matrix form: . ...where the lines in dark red and cyan are simply to indicate sample calculations which are part of the matrix multiplication. . Figuring out dimensions of the weights . When we learned about matrix multipliation, we remarked that most of the time in machine learning, &quot;the trick is to get the inner dimensions to match.&quot; . Let&#39;s say there are $N$ different input data &quot;points&quot; consisting of $M$ values each. So the input $X$ is an $N times M$ matrix. And let the output $ tilde{Y}$ be a $NxP$ matrix (in our example, $P=1$). If we were just connecting $X$ and $ tilde{Y}$ with no hidden layer, the single weights matrix would be a $M times P$ matrix: . $$ ( color{blue}N times color{red}M) cdot( color{red}M times color{green}P) = ( color{blue}N times color{green}P) $$(The nonlinear activation doesn&#39;t change the dimensions of the matrices.) . Adding a hidden layer with $Q$ number of neurons means we will still have $N$ different activations for each neuron (i.e. for each datapoint), so that $H$ is a $N times Q$ matrix. Thus the dimensions of $w^0$ must &quot;match&quot; between these two matrices, and so $w^0$ must be a $M times Q$ matrix: . $$ ( color{blue}N times color{red}M) cdot( color{red}M times color{purple}Q) = ( color{blue}N times color{purple}Q) $$ Similarly $w^1$ must be a $Q times P$ matrix, and the full operation in terms of matrix dimensions is . $$ ( color{blue}N times color{red}M) cdot( color{red}M times color{purple}Q) cdot( color{purple}Q times color{green}P) = ( color{blue}N times color{green}P). $$Compare this to the diagram above for $P=1$, $Q=4$. . Note: If you add bias terms to your model, you may need to remember that the number of columns in both the input $X$ and hidden layer $H$ are greater by one, i.e. $ color{red}{M} rightarrow color{red}{M+1}$, etc. . ..a bit of code . The layers $ mathcal{L}^l$ can be represented in Python a list called layers which has a of length 3. Similarly, our weights can be items in a list called weights. Returning to our first sample problem from Part 1: . import numpy as np %matplotlib inline import matplotlib.pyplot as plt # Training data: input and target X = np.array([ [0,0,1], [0,1,1], [1,0,1], [1,1,1] ]) Y = np.array([[0,0,1,1]]).T # define auxiliary variables N, M, P = X.shape[0], X.shape[1], Y.shape[1] # infer matrix shape variables from training data Y_tilde = np.zeros((N,P)) # setup storage for network output # Hidden layers Q = 4 # number of hidden neurons, i.e. &quot;size of hidden layer&quot; H = np.zeros((N,Q)) # weight matrices w0 = 2*np.random.random((M,Q)) - 1 w1 = 2*np.random.random((Q,P)) - 1 # Make lists for layers and weights layers = [X, H, Y_tilde] weights = [w0, w1] # Just try a sample calculation with random intialization to see how this works # Feed-forward (with linear activation): for l in range(2): layers[l+1] = np.dot(layers[l], weights[l]) print(&quot;layers [&quot;,l+1,&quot;] = n&quot;, layers[l+1], sep=&quot;&quot;) # sep=&quot;&quot; just omits spaces . layers [1] = [[-0.71619863 -0.93579012 0.4707394 -0.27924993] [-0.7101555 -0.1050841 0.91379718 0.29545498] [-1.16689961 -0.7912951 0.85311015 -0.32876382] [-1.16085648 0.03941092 1.29616794 0.24594109]] layers [2] = [[ 0.37453611] [-0.30449833] [-0.07951087] [-0.75854532]] . Generalizing this so it will do the full feed-forward will take a bit more code. We&#39;ll leave a placeholder routine for backpropagation for now. . def sigmoid(x, deriv=False): f = 1/(1+np.exp(-x)) return f*(1-f) if deriv else f def relu(x, deriv=False): return 1*(x&gt;0) if deriv else x*(x&gt;0) # Placeholder routine to perform backprop. Will fill in later def update_weights(weights, layers, Y, alpha, activ): return weights # for now, it&#39;s a no-op def fit(layers, Y, activ=[sigmoid]*2, use_bias=True, alpha=1.0, maxiter=10000): &quot;&quot;&quot; Routine for training using a multi-layer network layers: list of layer values, i.e. layers = [X, H, Y_tilde] Y: target output activ: list of activation functions. default = list of 2 sigmoids use_bias: Whether to include a constant offset in weighted sums alpha: learning rate maxiter: number of iterations to run &quot;&quot;&quot; lmax = len(layers)-1 # max index of layers, also = # of weights if use_bias: # add a column of 1&#39;s to every layer except the last for el in range(lmax): new_col = np.ones((layers[el].shape[0],1)) layers[el] = np.hstack((new_col, layers[el])) # Define weights np.random.seed(1) # for reproducibility weights = [None]*lmax # allocate slots in a blank list for el in range(lmax): # &quot;el&quot; because &quot;l&quot; and &quot;1&quot; may look similar weights[el] = 2*np.random.random((layers[el].shape[1], layers[el+1].shape[1])) - 1 loss_hist = [] # start with an empty list for iter in range(maxiter): # Feed-forward pass for el in range(lmax): layers[el+1] = activ[el](np.dot(layers[el], weights[el])) # Loss monitoring diff = layers[lmax] - Y loss_hist.append( (diff**2).mean() ) # use MSE loss for monitoring # Backprop code will go here weights = update_weights(weights, layers, Y, alpha, activ) return weights, layers[lmax], loss_hist # Test this just to make sure it runs layers = [X,H,Y_tilde] weights, Y_tilde, loss_hist = fit(layers, Y, maxiter=1) for el in range(len(weights)): print(&quot;weights[&quot;,el,&quot;] = n&quot;,weights[el], sep=&quot;&quot;) . weights[0] = [[-0.16595599 0.44064899 -0.99977125 -0.39533485 -0.70648822] [-0.81532281 -0.62747958 -0.30887855 -0.20646505 0.07763347] [-0.16161097 0.370439 -0.5910955 0.75623487 -0.94522481] [ 0.34093502 -0.1653904 0.11737966 -0.71922612 -0.60379702]] weights[1] = [[ 0.60148914] [ 0.93652315] [-0.37315164] [ 0.38464523] [ 0.7527783 ]] . ...Now that we&#39;ve achieved feed-foward operation of the network, in order to make it &#39;learn&#39; or &#39;train&#39;, we need to compare the output value $ tilde{Y}$ (which is the same as layers[2] by the way) to the target value, compute the gradients of the loss function, and then backpropagate in order to update all the weights! . Backpropagating: Theory . TL/DR: You can skip down to the last boxed equation of this section if math scares you. You will not be required to reproduce this. I do want to show you &quot;where this stuff comes from&quot;, but if you find the derivation too intimidating, you can still progress in the course just fine. . Let&#39;s review how we got the gradients for $w^{(1)}$ in Part 2, denoting weighted sums by &quot;$S$&quot;, e.g. $S^l = mathcal{L}^l cdot w^l$, we just used the Chain Rule: $$ { partial L over partial w^{(1)}} = color{blue} { partial L over partial mathcal{L}^{(2)}} color{green} { partial mathcal{L}^{(2)} over partial S^{(1)}} color{red} { partial S^{(1)} over partial w^{(1)}} $$ We&#39;ll define the first partial derivative to be $ delta^{(2)}$, which works out (given our choice of $L$ from Part 2) to be $$ color{blue}{ { partial L over partial mathcal{L}^{(2)}} = delta^{(2)} = tilde{Y}-Y},$$ i.e., it is the error in the final ouput. The next partial derivative (in green) is just the derivative of the activation function $f$, and the last partial derivative is just $ color{red}{ mathcal{L}^{(1)}}$, so as we saw in the previous lesson, we can write this &#39;schematically&#39; (i.e. not quite as a properly-set-up matix equation yet) as $$ { partial L over partial w^{(1)}} = color{blue}{ delta^{(2)}} color{green} {f^{(1) prime} } color{red}{ mathcal{L}^{(1)}} $$ whereas in proper form it will take on this ordering as a matrix equation: $$ boxed{ { partial L over partial w^{(1)}} = { mathcal{L}^{(1)}}^T cdot { delta^{(2)}} {f^{(1) prime}} }. $$ . To get the gradients for $w^{(0)}$, we can make use of a similar &quot;$ delta$&quot; notation if we&#39;re careful in how we define a new $ delta^{(1)}$. Let&#39;s write out the chain rule, and put parentheses around a particular group of terms for later: . $$ { partial L over partial w^{(0)}} = color{blue}{ left( { partial L over partial mathcal{L}^{(2)}} { partial mathcal{L}^{(2)} over partial S^{(1)}} { partial S^{(1)} over partial mathcal{L}^{(1)}} right)} color{green} { partial mathcal{L}^{(1)} over partial S^{(0)}} color{red} { partial S^{(0)} over partial w^{(0)}} $$In a manner similar to what we did above, this can be written as $$ { partial L over partial w^{(0)}} = color{blue}{ left( delta^{(2)}f^{(1) prime}w^{(1)} right)} color{green}{f^{(0) prime}} color{red}{ mathcal{L^{(0)}}} $$ We now define the terms in parentheses as $ delta^{(1)}$ . $$ color{blue}{ delta^{(1)} = delta^{(2)}f^{(1) prime}w^{(1)} }, $$...which is kind of like &quot;the error in the hidden layer,&quot; or like the final solution error projected backward into the hidden layers via our (momentarily fixed) weights $w^{(1)}$. . Then our gradients for $w^{(0)}$ take on a similar form as the gradients for $w^{(1)}$. &#39;Schematically&#39; this looks like $$ { partial L over partial w^{(0)}} = color{blue}{ delta^{(1)}} color{green}{f^{(0) prime}} color{red}{ mathcal{L^{(0)}}} $$ and in proper matrix form this is $$ boxed{ { partial L over partial w^{(0)}} = { mathcal{L}^{(0)}}^T cdot { delta^{(1)}} {f^{(0) prime}} }, $$ i.e., the same form as the preceding layer, just &quot;back&quot; one layer. We are backpropagating the errors $ delta^{(l)}$ from one layer to another in order to update the weights. . The weights are then updated as before, except now we will write this &#39;generically&#39; for all weights and layers using the index $l$: $$ boxed{ w^{(l)} := w^{(l)} - alpha { mathcal{L}^{(l)}}^T cdot { delta^{(l+1)}} {f^{(l) prime}} }, $$ where $$ delta^{(l+1)} = left { begin{array}{l} tilde{Y}-Y, &amp; &amp;l+1=l_{max} ({ rm e.g.} l_{max}=2) delta^{(l+2)}f^{(l+1) prime} cdot {w^{(l+1)}}^T, &amp; &amp;l+1 &lt; l_{max} end{array} right. $$ . Writing the Backprop Code . Now we&#39;ll use the above analysis to replace the update_weights() function from earlier. . def update_weights(weights, layers, Y, alpha, activ): &quot;&quot;&quot; Backprop routine, for arbitrary numbers of layers, assuming weights &amp; activations are defined Inputs: weights: list of arrays of weights between each layer layers: list of arrays of layer values (post-activation function) Y: target output alpha: learning rate activ: list of activation functions for each (non-input) layer Outputs: weights (updated) &quot;&quot;&quot; lmax = len(layers) - 1 # a useful variable assert len(weights)==lmax # make sure number of weights match up assert len(activ) &gt;= lmax # make sure we defined enough activations for the layers delta = layers[lmax] - Y # error between output and target for el in range(lmax-1, -1, -1): # Count backwards to layer zero fprime = activ[el](np.dot(layers[el], weights[el]), deriv=True) # deriv of activation weights[el] -= alpha * np.dot( layers[el].T, delta*fprime ) # gradient descent step delta = np.dot(delta*fprime, weights[el].T) if (el&gt;0) else None # setup delta for next pass in loop return weights # Let&#39;s run it! layers = [X, H, Y_tilde] alpha = 0.1 maxiter=5000 weights, Y_tilde, loss_hist_2weights = fit(layers, Y, alpha=alpha, maxiter=maxiter) # compare against a 1-weight (no hidden layer) network: layers = [X, Y_tilde] weights, Y_tilde, loss_hist_1weight = fit(layers, Y, alpha=alpha, maxiter=maxiter) # Plot the loss history plt.semilogy(loss_hist_1weight, label=&quot;No hidden layers&quot;) plt.semilogy(loss_hist_2weights, label=&quot;Hidden layer&quot;) plt.legend() plt.xlabel(&quot;Iteration&quot;) plt.ylabel(&quot;Loss&quot;) plt.show() . Q = 50 # number of hidden neurons, i.e. &quot;size of hidden layer&quot; H = np.zeros((N,Q)) layers = [X, H, Y_tilde] weights, Y_tilde, loss_hist_many = fit(layers, Y, alpha=alpha, maxiter=maxiter) # try a relu activation for the hidden layer (leave output activ as sigmoid!) weights, Y_tilde, lhm_relu = fit(layers, Y, alpha=alpha, activ=[relu,sigmoid], maxiter=maxiter) plt.semilogy(loss_hist_1weight, label=&quot;0 hidden neurons&quot;) plt.semilogy(loss_hist_2weights, label=&quot;4 hidden neurons&quot;) plt.semilogy(loss_hist_many, label=&quot;many hidden neurons&quot;) plt.semilogy(lhm_relu, label=&quot;many, relu on hidden&quot;) plt.legend() plt.xlabel(&quot;Iteration&quot;) plt.ylabel(&quot;Loss&quot;) . Text(0, 0.5, &#39;Loss&#39;) . Solving XOR . Now let&#39;s revisit the &quot;XOR&quot; problem that a single neuron couldn&#39;t handle. . $$ overbrace{ left[ { begin{array}{cc} 0 &amp; 0 0 &amp; 1 1 &amp; 0 1 &amp; 1 end{array} } right] }^{X} rightarrow overbrace{ left[ { begin{array}{c} 0 1 1 0 end{array} } right] }^Y. $$With our multi-layer network, we can solve this. Note that while an exact solution to the XOR problem exists using only 2 hidden neurons and linear activations, a program can still have a hard time finding a good approximation via gradient descent, and we use 20 hidden neurons to assist, as follows: . X = np.array([[0,0],[0,1],[1,0],[1,1]]) Y = np.array([[0,1,1,0]]).T Y_tilde = 0*Y # Just allocate some storage H = np.zeros((N,20)) weights, Y_tilde, loss_hist_xor = fit([X,H,Y_tilde], Y, activ=[relu,sigmoid], alpha=0.5) print(&quot;Prediction Y_tilde =&quot;,Y_tilde.T) print(&quot;Target Y (correct answer) =&quot;,Y.T) plt.xlabel(&quot;Iteration&quot;) plt.ylabel(&quot;Loss&quot;) plt.loglog(loss_hist_xor) #print(&quot;weights = &quot;,weights) . Prediction Y_tilde = [[0.00480128 0.9962425 0.9963109 0.00374649]] Target Y (correct answer) = [[0 1 1 0]] . [&lt;matplotlib.lines.Line2D at 0x7f9283c17550&gt;] . Same thing using neural network libraries Keras &amp; PyTorch. . Since most of the time we won&#39;t be writing neural network systems &quot;from scratch, by hand&quot; in numpy, let&#39;s take a look at similar operations using libraries such as Keras or PyTorch. . Keras version . Keras is so simple to set up, it&#39;s easy to get started. This is what the previous example for XOR looks like &quot;in Keras&quot;: . import keras from keras.models import Sequential from keras.layers import Dense, Activation from keras.optimizers import Adam # training data X = np.array([[0,0],[0,1],[1,0],[1,1]]) Y = np.array([[0,1,1,0]]).T # specify model n_hidden = 20 model = Sequential([ Dense(n_hidden, input_shape=(X.shape[1],), activation=&#39;relu&#39;), Dense(1, activation=&#39;sigmoid&#39;)]) # choices for loss and optimization method opt = Adam(lr=alpha) # We&#39;ll talk about optimizer choices later model.compile(optimizer=opt, loss=&#39;binary_crossentropy&#39;,metrics=[&#39;binary_accuracy&#39;]) # training iterations model.fit(X, Y, epochs=maxiter, batch_size=1, verbose=0) print(&quot; nY_tilde = n&quot;, model.predict(X) ) . Y_tilde = [[0.00] [1.00] [1.00] [0.00]] . Keras can get a better appoximation than we did because of the choice of optimizer algorithm. We&#39;ll talk about optimization algorithms (refinements to gradient descent) another time. . PyTorch version . Unlike Keras, PyTorch does not have any &quot;training wheels.&quot; You have to specify a number of the operations yourself. It&#39;s helpful to have a template to start from, such as the following example for our XOR problem. . import torch # it&#39;s &#39;PyTorch&#39; but the package is &#39;torch&#39; device = torch.device(&#39;cpu&#39;) # handy for changing to &#39;cuda&#39; in GPU runtimes later! torch.manual_seed(1) # for reproducibility # training data X = np.array([[0,0],[0,1],[1,0],[1,1]],dtype=np.float32) Y = np.array([[0,1,1,0]],dtype=np.float32).T # re-cast data as PyTorch variables, on the device (CPU or GPU) were calc&#39;s are performed x, y = torch.tensor(X).to(device), torch.tensor(Y).to(device) # specify model (similar to Keras but not quite) n_hidden = 20 # number of hidden neurons model = torch.nn.Sequential( torch.nn.Linear(X.shape[1], n_hidden), torch.nn.ReLU(), torch.nn.Linear(n_hidden, 1), torch.nn.Sigmoid() ).to(device) # choices for loss and optimization method loss_fn = torch.nn.BCELoss() # binary cross-entropy loss optimizer = torch.optim.Adam([{&#39;params&#39;: model.parameters()}], lr=alpha) # training iterations loss_hist_pytorch = [] for iter in range(maxiter): optimizer.zero_grad() # set gradients=0 before calculating more y_tilde = model(x) # feed-forward step loss = loss_fn(y_tilde, y) # compute the loss loss_hist_pytorch.append(loss.item()) # save loss for plotting later loss.backward() # compute gradients via backprop optimizer.step() # actually update the weights # print and plot our results print(&quot; nY_tilde = n&quot;, y_tilde.cpu().data.numpy() ) plt.xlabel(&quot;Iteration&quot;) plt.ylabel(&quot;Loss&quot;) plt.loglog(loss_hist_pytorch) . Y_tilde = [[2.9910339e-07] [9.9999976e-01] [9.9999964e-01] [3.4460226e-07]] . [&lt;matplotlib.lines.Line2D at 0x7f38a9fcfe80&gt;] . Exercise: Exploring Hidden Layers. . More with the 7-segment display . Using the $X$ and $Y$ arrays for from previous exercices with the 7-segment display, we&#39;ll explore the effects of adding hidden neurons and different activation functions. Using the code template that follows below,... . A. Explore hidden layer sizes &amp; activations . Write code for a new activation function: $ tanh(x)$ and its derivative. Note: there is already placeholder code for this in the template below | Set training data to be that of the 7-segment display. | Choose (for yourself) a single learning rate (e.g. $ alpha=$0.5), and a standard number of iterations (e.g. 10000). | Then compare results for multiple networks (all with softmaxsigmoid activation on the end): . A single hidden layer with 20 neurons and (for the hidden layer)... . sigmoid activation | relu activation | tanh activation | . | A single hidden layer with 100 neurons and (for the hidden layer)... . sigmoid activation | relu activation | tanh activation | . | B. Explore multiple hidden layers . Now use two hidden layers, H and H2 with 10 neurons each, and experiment to find the best combination of activations, and best choice of learning rate that gives you the lowest loss at the end of your chosen number of iterations. Check that your predicted output is as you expect. | Assignment: . Upload a text file of the code for your &quot;winning&quot; entry for #3 to Blackboard. Use the code below as a template. . import numpy as np import matplotlib.pyplot as plt ### LEAVE THIS UNCHANGED # First, let&#39;s repeat the sigmoid(), relu(), update_weights() and fit() routines # already defined, so we have a&#39;standalone&#39; code and can easily make changes # Activation choices def sigmoid(x, deriv=False): f = 1/(1+np.exp(-x)) return f*(1-f) if deriv else f def relu(x, deriv=False): return 1*(x&gt;0) if deriv else x*(x&gt;0) # Backpropagation routine def update_weights(weights, layers, Y, alpha, activ): lmax = len(layers) - 1 # a useful variable assert len(weights)==lmax # make sure number of weights match up assert len(activ) &gt;= lmax # make sure we defined enough activations for the layers delta = layers[lmax] - Y # error between output and target for el in range(lmax-1, -1, -1): # Count backwards to layer zero fprime = activ[el](np.dot(layers[el], weights[el]), deriv=True) # deriv of activation weights[el] -= alpha * np.dot( layers[el].T, delta*fprime ) # gradient descent step delta = np.dot(delta*fprime, weights[el].T) if (el&gt;0) else None # setup delta for next pass in loop return weights # Routine for training via gradient descent def fit(layers, Y, activ=[sigmoid]*2, use_bias=True, alpha=1.0, maxiter=10000): lmax = len(layers)-1 # max index of layers, also = # of weights if use_bias: # add a column of 1&#39;s to every layer except the last for el in range(lmax): new_col = np.ones((layers[el].shape[0],1)) layers[el] = np.hstack((new_col, layers[el])) # Define weights np.random.seed(1) # for reproducibility weights = [None]*lmax # allocate slots in a blank list for el in range(lmax): # &quot;el&quot; because &quot;l&quot; and &quot;1&quot; may look similar weights[el] = 2*np.random.random((layers[el].shape[1], layers[el+1].shape[1]))-1 loss_hist = [] # start with an empty list for iter in range(maxiter): # Feed-forward pass for el in range(lmax): layers[el+1] = activ[el](np.dot(layers[el], weights[el])) Y_tilde = layers[lmax] # Loss monitoring diff = Y_tilde - Y loss_hist.append( (diff**2).mean() ) # use MSE loss for monitoring # Backprop code will go here weights = update_weights(weights, layers, Y, alpha, activ) return weights, Y_tilde, loss_hist ##### END OF PART TO LEAVE UNCHANGED ##### MAKE YOUR CHANGES BELOW ############## # define the tanh activation function def tanh(x, deriv=False): if deriv: pass # *** Students: replace &#39;pass&#39; with what the derivative should be return np.tanh(x) ## Students: replace X, Y with 7-segment data instead X = np.array([[0,0],[0,1],[1,0],[1,1]],dtype=np.float32) Y = np.array([[0,1,1,0]],dtype=np.float32).T Y_tilde = np.copy(Y) # Just allocates some storage for Y_tilde ## Hidden layers: Students: Change Q, the number of hidden neurons, as needed Q = 10 N = X.shape[0] # this just grabs the number of rows in X H = np.zeros((N,Q)) H2 = np.zeros((N,Q)) # extra hidden layer, might not be used ## Students: change this as instructed layers = [X, H, Y_tilde] # later, add another layer H2 when instructed activ = [sigmoid, sigmoid, sigmoid] # change the first (2) activation(s) as instructed alpha = 0.5 # play around with this ## LEAVE THIS PART UNCHANGED weights, Y_tilde, loss_hist = fit(layers, Y, activ=activ, alpha=alpha) np.set_printoptions(formatter={&#39;float&#39;: lambda x: &quot;{0:0.2f}&quot;.format(x)}) # 2 sig figs print(&quot;Prediction Y_tilde = n&quot;,Y_tilde.T) print(&quot;Target Y (correct answer) = n&quot;,Y.T) plt.xlabel(&quot;Iteration&quot;) plt.ylabel(&quot;Loss&quot;) plt.loglog(loss_hist) . Prediction Y_tilde = [[0.01 0.99 0.99 0.01]] Target Y (correct answer) = [[0.00 1.00 1.00 0.00]] . [&lt;matplotlib.lines.Line2D at 0x7f928397cf98&gt;] . Preview of next lesson: MNIST . Now that you&#39;ve built up some experience with reading digits, let&#39;s move to handwritten digits! This is a problem usually solved with an architecture called a Convolutional Neural Network, but our ordinary feed-forward network can do it too. . The MNIST database of handwritten digits is a classic dataset that every ML student works on. It consists of a large number images of handwritten digits only 28x28 pixels in size. We will &quot;flatten&quot; these into a row of 784 columns, and output a $ tilde{Y}$ of one-hot-encoded vectore just like we did for the output of the 7-segment display (same digits, 0 to 9!). .",
            "url": "https://drscotthawley.github.io/blog/2019/02/08/My-1st-NN-Part-3-Multi-Layer-and-Backprop.html",
            "relUrl": "/2019/02/08/My-1st-NN-Part-3-Multi-Layer-and-Backprop.html",
            "date": " • Feb 8, 2019"
        }
        
    
  
    
        ,"post16": {
            "title": "My First Neural Network, Part 2. Bias and CE Loss",
            "content": "Links to lessons: Part 0, Part 1, Part 2, Part 3 . Moving on from our our previous notebook, we will investigate three things we could do to improve the models developed previously: . Add a bias term | Use a different loss function | Add more layers to the network (postponed to next lesson) | 1. Add a bias term . Our weighted sums did not include any constant offset or &quot;bias&quot; term. This may be fine for some data, but not for many others. For example, in a simple linear model $y = mx+b$, the choice of $b=0$ limits the model&#39;s ability to accurately fit some data. . . That is effectively what we did with our weighted sum $ sum_j X_{ij}w_j$: there was no constant offset. To correct this lack, we could add a new variable $b$ and make our weighted sum $b + sum_j X_{ij}w_j$. Equivalently, and more conveniently for the purposes of coding, we could put an additional column of 1&#39;s in the input $X$, and a new row to our weight matrix $w$. By convention, this is usually done with the zeroth element, so that $X_{i0}=1$ and the columns of $X$ are moved to the right, and $w_0 = b$ will be the new constant offset (because $1*w_0 = w_0$.) . For the first problem (Trask&#39;s first problem), this change makes our new matrix equation look like (with new bias terms in red) . $$ f left( overbrace{ left[ { begin{array}{ccc} color{red}1 &amp; 0 &amp; 0 &amp; 1 color{red}1 &amp; 0 &amp; 1 &amp; 1 color{red}1 &amp; 1 &amp; 0 &amp; 1 color{red}1 &amp; 1 &amp; 1 &amp; 1 end{array} } right] }^ text{X} overbrace{ left[ { begin{array}{c} color{red}{w_0} w_1 w_2 w_3 end{array} } right] }^{w} right) = overbrace{ left[ { begin{array}{c} 0 0 1 1 end{array} } right] }^{ tilde{Y}} $$Foreshadowing: Note that in this problem, the rightmost column of $X$ already was a column of all 1&#39;s, and so already has something akin to a bias. Thus, adding a new column of all 1&#39;s will not add any information, and so for this problem we expect that adding the bias won&#39;t improve the model performance.) . With this change, we can still write our weighted sum as $ sum_j X_{ij}w_j$, it&#39;s just that $j$ now runs over 0..3 instead of 0..2. To emphasize: We can leave the rest of our code the same as before, provided we change $X$ by adding a column of 1&#39;s. . In terms of coding the change to $X$, we can either rewrite it by hand, or pull a numpy trick: . import numpy as np import matplotlib.pyplot as plt %matplotlib inline # old data X = np.array([ [0,0,1], [0,1,1], [1,0,1], [1,1,1] ]) # add a column of 1&#39;s new_col = np.ones((X.shape[0],1)) # array of 1s, w/ same # of rows as X, 1 col wide X_bias = np.hstack((new_col,X)) # stack them horizontally print(X_bias) . [[1. 0. 0. 1.] [1. 0. 1. 1.] [1. 1. 0. 1.] [1. 1. 1. 1.]] . Let&#39;s compare our the use of the bias term without. We&#39;ll define functions for the gradient descent and for the plotting of the loss history, so we can call these again later in this lesson. . Y = np.array([[0,0,1,1]]).T # target output dataset def sigmoid(x,deriv=False): if(deriv==True): return x*(1-x) return 1/(1+np.exp(-x)) def calc_loss(Y_pred, Y, X, w, activ, loss_type=&quot;mse&quot;): # MSE loss diff = Y_pred - Y loss = (diff**2).mean() gradient = np.dot( X.T, diff*activ(Y_pred, deriv=True)) # for weight update return loss, gradient def fit(X, Y, activ, use_bias=True, alpha=3.0, maxiter=10000, loss_type=&#39;mse&#39;): &quot;&quot;&quot; fit: Generic routine for doing our gradient decent Required arguments: X: input matrix Y: target output activ: reference to an activation function Keywork arguments (optional): use_bias: Flag for whether to use bias in the model alpha: learning rate. Tip: Use the largest alpha &#39;you can get away with&#39; maxiter: maximum number of iterations loss_type: Set to MSE for now but we&#39;ll extend this later. &quot;&quot;&quot; if use_bias: # add a column of 1&#39;s to X new_col = np.ones((X.shape[0],1)) X = np.hstack((new_col,X)) # Define weights np.random.seed(1) # for reproducibility if activ == sigmoid: w = 2*np.random.random((X.shape[1],Y.shape[1])) - 1 # -1..1 else: w = np.random.random((X.shape[1],Y.shape[1]))/10 # only positive weights (for later) loss_hist = [] # start with an empty list for iter in range(maxiter): Y_pred = activ(np.dot(X,w)) # compute prediction, i.e. tilde{Y} loss, gradient = calc_loss(Y_pred, Y, X, w, activ, loss_type) loss_hist.append(loss) # add to the history of the loss w -= alpha * gradient # weight update return w, Y_pred, loss_hist # send these values back # Now call the fit function twice, to compare with and without bias: w_old, Y_pred_old, loss_hist_old = fit(X, Y, sigmoid, use_bias=False) w_new, Y_pred_new, loss_hist_new = fit(X, Y, sigmoid) # Plot the results. Make a function so we can call this again later def plot_new_old(loss_hist_old, loss_hist_new, labels=[&quot;no bias&quot;, &quot;with bias&quot;]): plt.loglog(loss_hist_old, label=labels[0]) plt.loglog(loss_hist_new, label=labels[1]) plt.xlabel(&quot;Iteration&quot;) plt.ylabel(&quot;MSE Loss (monitoring)&quot;) plt.legend() plt.show() plot_new_old(loss_hist_old, loss_hist_new) # And print the final answers: print(&quot;No bias: Y_pred =&quot;,Y_pred_old) print(&quot;With bias: Y_pred =&quot;,Y_pred_new) . No bias: Y_pred = [[0.00553557] [0.00451069] [0.99632065] [0.9954838 ]] With bias: Y_pred = [[0.00485703] [0.00433876] [0.99612094] [0.99565733]] . As expected, for this problem, the inclusion of bias didn&#39;t make any significant difference. Let&#39;s try the same thing for the 7-segment display problem from Part 1. And let&#39;s try two different runs, one with sigmoid activation, and another with ReLU: . X_7seg = np.array([ [1,1,1,1,1,1,0,1], # 0 [0,1,1,0,0,0,0,1], # 1 [1,1,0,1,1,0,1,1], # 2 [1,1,1,1,0,0,1,1], # 3 [0,1,1,0,0,1,1,1], # 4 [1,0,1,1,0,1,1,1], # 5 [1,0,1,1,1,1,1,1], # 6 [1,1,1,0,0,0,0,1], # 7 [1,1,1,1,1,1,1,1], # 8 [1,1,1,1,0,1,1,1] # 9 ]) Y_7seg = np.eye(10) X, Y = X_7seg, Y_7seg def relu(x,deriv=False): # relu activation if(deriv==True): return 1*(x&gt;0) return x*(x&gt;0) # Call the fit routine twice, once for sigmoid activation, once for relu for activ in [sigmoid, relu]: print(&quot; n n activ = &quot;,activ) alpha = 0.5 if activ == sigmoid else 0.005 # assign learning rate w_old, Y_pred_old, loss_hist_old = fit(X, Y, activ, alpha=alpha, use_bias=False) w_new, Y_pred_new, loss_hist_new = fit(X, Y, activ, alpha=alpha) # Report results plot_new_old(loss_hist_old, loss_hist_new) np.set_printoptions(formatter={&#39;float&#39;: lambda x: &quot;{0:0.2f}&quot;.format(x)}) # 2 sig figs print(&quot;No bias: Y_pred = n&quot;,Y_pred_old) print(&quot;With bias: Y_pred = n&quot;,Y_pred_new) . activ = &lt;function sigmoid at 0x7fa465235d08&gt; . No bias: Y_pred = [[0.98 0.00 0.00 0.00 0.00 0.00 0.01 0.01 0.03 0.02] [0.01 0.98 0.00 0.01 0.01 0.00 0.00 0.02 0.00 0.00] [0.00 0.00 0.99 0.01 0.00 0.00 0.01 0.00 0.03 0.00] [0.00 0.00 0.01 0.98 0.00 0.00 0.00 0.01 0.00 0.02] [0.00 0.01 0.00 0.00 0.99 0.00 0.00 0.00 0.03 0.02] [0.00 0.00 0.00 0.01 0.01 0.98 0.02 0.00 0.00 0.02] [0.01 0.00 0.00 0.00 0.00 0.01 0.98 0.00 0.03 0.00] [0.01 0.01 0.00 0.01 0.00 0.00 0.00 0.98 0.00 0.00] [0.01 0.00 0.01 0.00 0.00 0.00 0.01 0.00 0.94 0.00] [0.00 0.00 0.00 0.01 0.01 0.01 0.00 0.00 0.02 0.96]] With bias: Y_pred = [[0.98 0.00 0.00 0.00 0.00 0.00 0.01 0.01 0.03 0.01] [0.01 0.98 0.00 0.01 0.01 0.00 0.00 0.02 0.00 0.00] [0.00 0.00 0.99 0.01 0.00 0.00 0.01 0.00 0.02 0.00] [0.00 0.00 0.01 0.98 0.00 0.00 0.00 0.01 0.00 0.02] [0.00 0.01 0.00 0.00 0.99 0.00 0.00 0.00 0.02 0.02] [0.00 0.00 0.00 0.01 0.01 0.98 0.02 0.00 0.00 0.02] [0.01 0.00 0.00 0.00 0.00 0.01 0.98 0.00 0.03 0.00] [0.01 0.01 0.00 0.01 0.00 0.00 0.00 0.98 0.00 0.00] [0.01 0.00 0.01 0.00 0.00 0.00 0.01 0.00 0.95 0.01] [0.00 0.00 0.00 0.01 0.01 0.01 0.00 0.00 0.01 0.97]] activ = &lt;function relu at 0x7fa4651f2400&gt; . No bias: Y_pred = [[1.00 -0.00 -0.00 -0.00 -0.00 -0.00 -0.00 0.00 0.01 0.00] [-0.00 1.00 -0.00 -0.00 0.00 -0.00 -0.00 0.00 -0.00 -0.00] [-0.00 -0.00 1.00 0.00 -0.00 -0.00 -0.00 -0.00 0.01 -0.00] [-0.00 -0.00 -0.00 1.00 -0.00 -0.00 -0.00 0.00 -0.00 0.00] [-0.00 0.00 -0.00 -0.00 1.00 -0.00 -0.00 -0.00 0.01 0.00] [-0.00 -0.00 -0.00 -0.00 -0.00 1.00 0.00 -0.00 -0.00 0.00] [-0.00 -0.00 -0.00 -0.00 -0.00 0.00 1.00 -0.00 0.01 -0.00] [0.00 0.00 -0.00 0.00 -0.00 -0.00 -0.00 1.00 -0.00 -0.00] [0.00 -0.00 0.00 -0.00 -0.00 -0.00 0.00 -0.00 0.96 -0.00] [-0.00 -0.00 -0.00 0.00 0.00 0.00 -0.00 -0.00 0.00 1.00]] With bias: Y_pred = [[1.00 -0.00 -0.00 -0.00 -0.00 -0.00 -0.00 0.00 0.00 0.00] [-0.00 1.00 -0.00 -0.00 0.00 -0.00 -0.00 0.00 -0.00 -0.00] [-0.00 -0.00 1.00 0.00 -0.00 -0.00 -0.00 -0.00 0.00 -0.00] [-0.00 -0.00 -0.00 1.00 -0.00 -0.00 -0.00 0.00 -0.00 0.00] [-0.00 0.00 -0.00 -0.00 1.00 -0.00 -0.00 -0.00 0.00 0.00] [-0.00 -0.00 -0.00 -0.00 -0.00 1.00 0.00 -0.00 -0.00 0.00] [-0.00 -0.00 -0.00 -0.00 -0.00 0.00 1.00 -0.00 0.00 -0.00] [0.00 0.00 -0.00 0.00 -0.00 -0.00 -0.00 1.00 -0.00 -0.00] [0.00 -0.00 0.00 -0.00 -0.00 -0.00 0.00 -0.00 0.99 -0.00] [-0.00 -0.00 -0.00 0.00 0.00 0.00 -0.00 -0.00 0.00 1.00]] . ...So for this problem, it seems that adding the bias gave us a bit more accuracy, both for the sigmoid and relu activations. Note: in this example, the learning rates were chosen by experiment; you should get in the habit of going back and experimenting with different learning rates. . Video Interlude: Logistic Regression . What we&#39;ve been doing up until now has been a &quot;classification&quot; problem, with &quot;yes&quot;/&quot;no&quot; answers represented by 1&#39;s and 0&#39;s. This sort of operation is closely associated with the statistical method of Logistic Regression. It is akin to linear regression but with a sigmoid activation function. When doing Logistic Regression, one optimizes to fit by finding the maximum &quot;likelihood&quot; of a given model being correct. . To gain some insight on Logistic Regression, watch the following StatQuest video. (You can ignore his remarks about his preceding video, &quot;R squared&quot; and &quot;p-value&quot;, etc.) . In what follows, we will be minimizing the negative of the logarithm of the likelihood, a quantity typically known as the Cross-Entropy loss. (This same quantity is also the non-constant part of the &quot;Kullback-Leibler Divergence&quot; or &quot;K-L divergence,&quot; so you may hear it called that sometimes.) . 2. Use a different loss function: Cross-Entropy loss . Let&#39;s return to Trask&#39;s first problem for which there is only one target per data point (row) of input, namely a target of 0 or 1. In this case, using the sigmoid function for this classification problem is one of logistic regression, even though we hadn&#39;t it identified it as such. . We&#39;ve been using mean squared error (MSE) loss, but other loss functions exist. In particular, for outputs which are either &quot;yes&quot; or &quot;no&quot; such as the classification problem we are solving, a function called &quot;cross entropy&quot; is typically preferred. The cross-entropy loss is written like this: . $$L_{CE} = - sum_i left[ Y_i log( tilde{Y}_i) + (1-Y_i) log(1- tilde{Y}_i) right]$$ . Note that since the function $ log(x)$ is undefined for $x le0$, we need to make sure $0&lt; tilde{Y}_i&lt;1$ for all $i$. One way to ensure this is to use sigmoid activation! Thus, for classification problems, it is very common to see sigmoid activation (or its multi-class relative &quot;softmax&quot;) immediately before the output, even for many-layer neural networks with all kinds of other activations in other places. . To use the CE loss with gradient descent, we need its derivative with respect to the weights. First let&#39;s write the CE loss in terms of the inputs $X$, weights $w$ and activation function $f$: . ...wait, for compactness, let&#39;s write the weighted sum as $S_i = sum_j X_{ij}w_j$. Ok, now going forward.... . $$L_{CE} = - sum_i left[ Y_i log left(f left(S_i right) right) + (1-Y_i) log left(1- f left(S_{i} right) right) right]$$ . For any function $g(x)$, the derivative of $ log(g(x))$ with respect to x is just $1/g*(du/dx)$, so our partial derivatives with respect to weights look like . $${ partial L_{CE} over partial w_j} = - sum_i left[ {Y_i over tilde{Y_i}}{ partial f(S_i) over partial w_j} - {1-Y_i over 1- tilde{Y}_i} { partial f(S_i) over partial w_j} right] = - sum_i { partial f(S_i) over partial S_i}{ partial S_i over partial w_j} left[ {Y_i over tilde{Y_i}} - {1-Y_i over 1- tilde{Y}_i} right] $$And if we multiply by $2/N$, we can write this as $$ { partial L_{CE} over partial w_j} = {2 over N} sum_{i=0}^{N-1} { partial f(S_i) over partial S_i}X_{ij} left[ { tilde{Y_i}-Y_i over tilde{Y_i}(1- tilde{Y_i}) } right]$$ This is similar to the partial derivatives for our MSE loss, except the term in the denominator is new. To see this more clearly, recall that the weight update for MSE (from Part 1) was $$ w := w - alpha X^T cdot left( [ tilde{Y}-Y]* tilde{Y}*(1- tilde{Y}) right) $$ whereas for CE we actually get a bit of a simplification because the term in the denominator cancels with a similar term in the numerator: $$ w := w - alpha X^T cdot left( [ tilde{Y}-Y]* tilde{Y}*(1- tilde{Y}) right) / ( tilde{Y}*(1- tilde{Y})) w := w - alpha X^T cdot [ tilde{Y}-Y]. $$ Thus despite all this seeming complication, our CE weight update is actually simpler than what it was before as MSE! . Let&#39;s try this out with code now: . def calc_loss(Y_pred, Y, X, w, activ, loss_type=&#39;ce&#39;): diff = Y_pred - Y loss = (diff**2).mean() # MSE loss if &#39;ce&#39; == loss_type: diff = diff / (Y_pred*(1-Y_pred)) # use this for gradient #loss = -(Y*np.log(Y_tilde) + (1-Y)*np.log1p(-Y_tilde)).mean() # CE Loss # Actually we don&#39;t care what the loss itself is. # Let&#39;s use MSE loss for &#39;monitoring&#39; regardless, so we can compare the # effects of using different gradients-of-loss functions gradient = np.dot( X.T, diff*activ(Y_pred, deriv=True)) # same as before return loss, gradient #- X = X_bias Y = np.array([[0,0,1,1]]).T # target output dataset # Compare old and new w_mse, Y_pred_mse, loss_hist_mse = fit(X, Y, sigmoid, alpha=0.5, loss_type=&#39;mse&#39;) w_ce, Y_pred_ce, loss_hist_ce = fit(X, Y, sigmoid, alpha=0.5, loss_type=&#39;ce&#39;) # fit plot_new_old(loss_hist_mse, loss_hist_ce, [&quot;MSE, with bias&quot;, &quot;CE, with bias&quot;]) # And print the final answers: print(&quot;MSE _loss: Y_pred = n&quot;,Y_pred_mse) print(&quot;CE loss: Y_pred = n&quot;,Y_pred_ce) . MSE _loss: Y_pred = [[0.01] [0.01] [0.99] [0.99]] CE loss: Y_pred = [[0.00] [0.00] [1.00] [1.00]] . This works a lot better! To understand why, note that the gradients for MSE loss scale like $$[ tilde{Y}-Y]* tilde{Y}*(1- tilde{Y})$$ and thus these gradients go to zero as $ tilde{Y} rightarrow 0$, and/or $ tilde{Y} rightarrow 1$, which makes training very slow! In contrast, the extra denominator in the CE gradients effectively cancels out this behavior, leaving the remaining term of $$[ tilde{Y}-Y]$$ which varies linearly with the difference from the target value. This makes training much more efficient. . # Recall that ReLU maps negative numbers to 0, and isn&#39;t bounded from above. # Thus the &quot;denominator&quot; in the &#39;diff term&#39; in our earlier code will tend to &#39;explode&#39;. # Put differently, note that log(x) is undefined for x=0, as is log(1-x) for x=1. w_relu_ce, Y_pred_relu_ce, loss_hist_relu_ce = fit(X, Y, relu, alpha=0.001, loss_type=&#39;ce&#39;) plot_new_old(loss_hist_ce, loss_hist_relu_ce, [&quot;CE, sigmoid&quot;, &quot;CE, ReLU&quot;]) . /usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:6: RuntimeWarning: invalid value encountered in true_divide /usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:18: RuntimeWarning: invalid value encountered in greater /usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:17: RuntimeWarning: invalid value encountered in greater . Excercise: . Do the same comparison for the 7-segment display problem: Make a plot showing a comparison of the loss history use MSE loss vs. using CE loss. And print out the final values of Y_pred for each. Use a learning rate of 0.5 and sigmoid activation, with bias. . Take a screenshot of the output and upload it to your instructor. . (Note: for the 7-segment display, since the target $Y$ has multiple columns, we should &quot;normalize&quot; the output in order to be able to properly interpret the output values $ tilde{Y}$ as probabilities. To do so, we would use a softmax activation. For now, we haven&#39;t bothered with this because it would add a bit more math, and is not actually necessary to solve this problem. ) . Next time: Part 3: Multi-Layer Networks and Backpropagation .",
            "url": "https://drscotthawley.github.io/blog/2019/02/04/My-First-NN-Part-2.html",
            "relUrl": "/2019/02/04/My-First-NN-Part-2.html",
            "date": " • Feb 4, 2019"
        }
        
    
  
    
        ,"post17": {
            "title": "My First Neural Network, Part 1",
            "content": "Links to lessons: Part 0, Part 1, Part 2, Part 3 . We will be reproducing work from Andrew Trask&#39;s excellent tutorial &quot;A Neural Network in 11 lines of Python&quot;, albeit with a different emphasis, and in a different way. You may regard this treatment and his original treatment as complimentary, and feel free to refer to both. This lesson is written with the intent of building on the lesson about linear regression -- which we might call &quot;Part 0&quot; -- at the link &quot;Following Gravity - ML Foundations Part Ia.&quot; . The Sample Problem . Consider a system that tries to map groups of 3 inputs to some corresponding output which is a single number. In the following picture, we&#39;ll show each set of 3 inputs as a row of a matrix $X$, and each output as the corresponding row of $Y$: . $$ overbrace{ left[ { begin{array}{ccc} 0 &amp; 0 &amp; 1 0 &amp; 1 &amp; 1 1 &amp; 0 &amp; 1 1 &amp; 1 &amp; 1 end{array} } right] }^{X} rightarrow overbrace{ left[ { begin{array}{c} 0 0 1 1 end{array} } right] }^Y. $$Even though this system has an exact solution (namely, $Y$ equals the first column of $X$), usually we&#39;ll need to be satisfied with a system that maps our inputs $X$ to some approximate &quot;prediction&quot; $ tilde{Y}$, which we hope to bring closer to the &quot;target&quot; $Y$ by means of successive improvements. . The way we&#39;ll get our prediction $ tilde{Y}$ is by means of a weighted sum of each set of 3 inputs, and some nonlinear function $f$ which we call the &quot;activation function&quot; (or just &quot;activation&quot;). Pictorially, the process looks like the following, for each row $i$ of $X$ and $Y$, (where the columns of $X$ are shown arranged vertically instead of horizonally): . . In terms of matrix multiplication, since X is a 4x3 matrix, and Y is a 4x1 matrix, that implies that our weights should be a 3x1 matrix consisting of (unknown) values $w_0$, $w_1$ and $w_2$. The calculation can be written as: . $$ f left( overbrace{ left[ { begin{array}{ccc} 0 &amp; 0 &amp; 1 0 &amp; 1 &amp; 1 1 &amp; 0 &amp; 1 1 &amp; 1 &amp; 1 end{array} } right] }^ text{X} overbrace{ left[ { begin{array}{c} w_0 w_1 w_2 end{array} } right] }^{w} right) = overbrace{ left[ { begin{array}{c} 0 0 1 1 end{array} } right] }^{ tilde{Y}} $$Our nonlinear activation function $f$ is taken to operate on each row element one at a time, and we&#39;ll let $f_i$ denote the $i$th row of this completed activation, i.e.: . $$ f_i = f left( sum_j X_{ij}w_j right) = tilde{Y}_i . $$The particular activation function we will use is the &quot;sigmoid&quot;, . $$ f(x) = {1 over{1+e^{-x}}}, $$-- click here to see a plot of this function -- which has the derivative . $$ {df over dx} = {e^{-x} over(1 + e^{-x})^2} $$which can be shown (Hint: exercise for &quot;mathy&quot; students!) to simplify to $$ {df over dx}= f(1-f). $$ . The overall problem then amounts to finding the values of the &quot;weights&quot; $w_0, w_1,$ and $w_2$ so that the $ tilde{Y}$ we calculate is as close to the target $Y$ as possible. . To do this, we will seek to minimize a loss function defined as a sum across all data points we have, i.e. all 4 rows. The loss function $L$ we will choose is the mean square error loss, or MSE (note: later in Part 2 we will use a &#39;better&#39; loss function for this problem): . $$ L = {1 over N} sum_{i=0}^{N-1} left[ tilde{Y}_i - Y_i right]^2, $$or in terms of the activation function $$ L = {1 over N} sum_{i=0}^{N-1} left[ f_i - Y_i right]^2. $$ . Each of the weights $w_j$ ($j=0..2$) will start with random values, and then be updated via gradient descent, i.e. . $$ w_j^{new} = w_j^{old} - alpha{ partial L over partial w_j} $$where $ alpha$ is the learning rate, chosen to be some small parameter. For the MSE loss shown above, the partial derivatives with respect to each of the weights is . $$ { partial L over partial w_j} = {2 over N} sum_{i=0}^{N-1} left[ tilde{Y}_i - Y_i right]{ partial f_i over partial w_j} = {2 over N} sum_{i=0}^{N-1} left[ tilde{Y}_i - Y_i right]f_i(1-f_i)X_{ij}. $$Absorbing the factor of 2/N into our choice of $ alpha$, and writing the summation as a dot product, and noting that $f_i = tilde{Y}_i$, we can write the update for all the weights together as . $$ w = w - alpha X^T cdot left( [ tilde{Y}-Y]* tilde{Y}*(1- tilde{Y}) right) $$where the $ cdot$ denotes a matrix-matrix product (i.e. a dot product for successive rows of $X^T$) and $*$ denotes elementwise multiplication. . To clarify the above expression in terms of matrix dimensions, we can see that $w$, a 3x1 matrix, can be made by multipyting $X^T$ (a 3 x4 matrix) with the term in parentheses, i.e. the product of elementwise terms involving $ tilde{Y}$, which is a 4x1 matrix. In other words, a 3x4 matrix, times a 4x1 matrix, yields a 3x1 matrix. . Actual Code . The full code for all of this is then... . # https://iamtrask.github.io/2015/07/12/basic-python-network/ import numpy as np # sigmoid activation def sigmoid(x,deriv=False): if(deriv==True): return x*(1-x) return 1/(1+np.exp(-x)) # input dataset X = np.array([ [0,0,1], [0,1,1], [1,0,1], [1,1,1] ]) # target output dataset Y = np.array([[0,0,1,1]]).T # seed random numbers to make calculation # deterministic (just a good practice) np.random.seed(1) # initialize weights randomly with mean 0 w = 2*np.random.random((3,1)) - 1 alpha = 1.0 # learning rate loss_history = [] # keep a record of how the loss proceeded, blank for now for iter in range(1000): # forward propagation Y_pred = sigmoid(np.dot(X,w)) # prediction, i.e. tilde{Y} # how much did we miss? diff = Y_pred - Y loss_history.append((diff**2).mean()) # add to the history of the loss # update weights w -= alpha * np.dot( X.T, diff*sigmoid(Y_pred, deriv=True)) print(&quot;Output After Training:&quot;) print(&quot;Y_pred = (should be two 0&#39;s followed by two 1&#39;s) n&quot;,Y_pred) print(&quot;weights = n&quot;,w) . Output After Training: Y_pred = (should be two 0&#39;s followed by two 1&#39;s) [[0.03178421] [0.02576499] [0.97906682] [0.97414645]] weights = [[ 7.26283009] [-0.21614618] [-3.41703015]] . Note that, because of our nonlinear activation, we don&#39;t get the solution $w_0=1, w_1=0, w_2=0$. . Plotting the loss vs. iteration number, we see... . %matplotlib inline import matplotlib.pyplot as plt plt.loglog(loss_history) plt.xlabel(&quot;Iteration&quot;) plt.ylabel(&quot;Loss&quot;) plt.show() . Change the activation function . Another popular choice of activation function is the rectified linear unit or ReLU. The function ReLU(x) is zero for x &lt;= 0, and equal to x (i.e. a straight line at 45 degrees for) x &gt;0. It can be written as max(x,0) or x * (x&gt;0), and its derivative is 1 for positive x, and zero otherwise. . Click here to see a graph of ReLU . Modifying our earlier code to use ReLU activation instead of sigmoid looks like this: . def relu(x,deriv=False): # relu activation if(deriv==True): return 1*(x&gt;0) return x*(x&gt;0) # seed random numbers to make calculation # deterministic (just a good practice) np.random.seed(1) # initialize weights randomly (but only &gt;0 because ReLU clips otherwise) w = np.random.random((3,1)) alpha = 0.3 # learning rate new_loss_history = [] # keep a record of how the error proceeded for iter in range(1000): # forward propagation Y_pred = relu(np.dot(X,w)) # how much did we miss? diff = Y_pred - Y new_loss_history.append((diff**2).mean()) # add to the record of the loss # update weights w -= alpha * np.dot( X.T, diff*relu(Y_pred, deriv=True)) print(&quot;Output After Training:&quot;) print(&quot;Y_pred = (should be two 0&#39;s followed by two 1&#39;s) n&quot;,Y_pred) print(&quot;weights = n&quot;,w) . Output After Training: Y_pred = (should be two 0&#39;s followed by two 1&#39;s) [[-0.] [-0.] [ 1.] [ 1.]] weights = [[ 1.01784368e+00] [ 8.53961786e-17] [-1.78436793e-02]] . print( w[2] - (1-w[0]) ) . [-3.46944695e-17] . Plot old results with new results: . %matplotlib inline import matplotlib.pyplot as plt plt.loglog(loss_history,label=&quot;sigmoid&quot;) plt.loglog(new_loss_history,label=&quot;relu&quot;) plt.xlabel(&quot;Iteration&quot;) plt.ylabel(&quot;Loss&quot;) plt.legend() plt.show() . Looks like ReLU may be a better choice than sigmoid for this problem! . Exercise: Read a 7-segment display . A 7-segment display is used for displaying numerical digits 0 through 9, usually by lighting up LEDs or parts of a liquid crystal display (LCD). The segments are labelled $a$ through $g$ according to the following diagram: . . Diagram of the network . The 7 inputs &quot;a&quot; through &quot;g&quot; will be mapped to 10 outputs for the individual digits, and each output can range from 0 (&quot;false&quot; or &quot;no&quot;) to 1 (&quot;true&quot; or &quot;yes&quot;) for that digit. The input and outputs will be connected by a matrix of weights. Pictorially, this looks like the following (Not shown: activation function $f$): . . ...where again, this network operates on a single data point at a time, datapoints which are rows of X and Y. What is shown in the above diagram are the columns of $X$ and $Y$ for a single row (/ single data point). . Create the dataset . Let the input X be the segments $a$ through $g$ are the columns of the input $X$, and are either 1 for on or 0 for off. Let the columns of the target $Y$ be the digits 0-9 themselves arranged in a &quot;one hot&quot; encoding scheme, as follows: . Digit | One-Hot Encoding for $Y$ | . 0 | 1,0,0,0,0,0,0,0,0,0 | . 1 | 0,1,0,0,0,0,0,0,0,0 | . 2 | 0,0,1,0,0,0,0,0,0,0 | . ... | ... | . 9 | 0,0,0,0,0,0,0,0,0,1 | . The values in the columns for $Y$ are essentially true/false &quot;bits&quot; for each digit, answering the question &quot;Is this digit the appropriate output?&quot; with a &quot;yes&quot;(=1) or &quot;no&quot; (=0) response. . The input $X$ will be a 10x7 matrix, and the target $Y$ will be a 10x10 matrix. Each row of $X$ will be the segments to produce the digit for that row. For example, the zeroth row of $X$ should show segments on which make an image of the digit zero, namely segments a, b, c, d, e, and f but not g, so that the zeroth row of X should be [1,1,1,1,1,1,0]. . Define numpy arrays for both $X$ and $Y$ (Hint: for $Y$, check out np.eye()): . # for the 7-segment display. The following is just a &quot;stub&quot; to get you started. X = np.array([ [1,1,1,1,1,1,0], [], [], [] ]) Y = np.array([ [1,0,0,0,0,0,0,0,0,0], [], [] ]) . Initialize the weights . Previously the dimensions of the weight matrix $w$ were 3x1 because we were mapping each row of 3 elements in $X$ to each row of 1 element of $Y$. For this new problem, each row of $X$ has 7 elements, and we want to map those to the 10 elements in each 1-hot-encoded row of $Y$, so what should the dimensions of the weights matrix $w$ be? . Write some numpy code to randomly initialize the weights matrix: . np.random.seed(1) # initial RNG so everybody gets similar results w = np.random.random(( , )) # Students, fill in the array dimensions here . File &#34;&lt;ipython-input-7-20f53a51cded&gt;&#34;, line 1 w = np.random.random(( , )) ^ SyntaxError: invalid syntax . Train the network . Having created an $X$ and its matching $Y$, and initalized the weights $w$ randomly, train a neural network such as the ones above to learn to map a row of X to a row of Y, i.e. train it to recognize digits on 7-segment displays. Do this below. . # Use sigmoid activation, and 1000 iterations, and learning rate of 0.9 # Question: What happens if you use ReLU instead? Try it later. Is ReLU always the best choice? # And then print out your Y_pred &amp; weights matrix, and limit it to 3 significant digits print(&quot;Output After Training:&quot;) np.set_printoptions(formatter={&#39;float&#39;: lambda x: &quot;{0:0.3f}&quot;.format(x)}) # 3 sig figs print(&quot;Y_pred= n&quot;,Y_pred) print(&quot;weights = n&quot;,repr(w)) # the repr() makes it so it can be copied &amp; pasted back into Python code . Final Check: Keras version . Keras is a neural network library that lets us write NN applications very compactly. Try running the following using the X and Y from your 7-segment dataset: . import keras from keras.models import Sequential from keras.layers import Dense, Activation model = Sequential([ Dense(10, input_shape=(7,)), Activation(&#39;sigmoid&#39;) ]) model.compile(optimizer=&#39;adam&#39;, # We&#39;ll talk about optimizer choices and loss choices later loss=&#39;categorical_crossentropy&#39;, metrics=[&#39;accuracy&#39;]) model.fit(X, Y, epochs=200, batch_size=1) print(&quot; nY_tilde = n&quot;, model.predict(X) ) . Follow-up: Remarks . Re-stating what we just did . The original problem (posed at the top of this notebook) involves mapping some points from a 3-dimensional space into points in a 1-dimensional space, i.e. to points on the number line. The mapping is done by the combination of a weighted sum (a linear operation) and a nonlinear &quot;activation function&quot; applied to that sum. The use of an activation function like a sigmoid was originally intended to serve as an analogy of activation of biological neurons. Nonlinear activation functions are source of the &quot;power&quot; of neural networks (essentially we approximate some other function by means of a sum of basis functions in some function space, but don&#39;t worry about that if you&#39;re not math-inclined). The algorithm &#39;learns&#39; to approximate this operation via supervised learning and gradient descent according to some loss function. We used the mean squared error (MSE) for our loss, but lots and lots of different loss functions could be used, a few of which we&#39;ll look at another time. . Question for reflection: Unlike fitting a line $y = mx+b$, the weighted sum in our models in this notebook had no constant &quot;bias&quot; term like $b$. How might we include such a term? . One thing we glossed over: &quot;batch size&quot; . Question: Should we apply the gradient descent &quot;update&quot; to the weights each time we process a single row of $X$ &amp; $Y$, or should we compute the combined loss of all the rows together at the same time, and then do the update? This is essentially asking the same question as &quot;When fitting a line $mx+b$ to a bunch of data points, should we use all the points together to update $m$ and $b,$ or should we do this one point at a time -- compute the gradients of the loss at one point, update the weights, compute gradients at another point, etc.?&quot; . The number of points you use is called the batch size and it is what&#39;s known as a &quot;hyperparameter&quot; -- it is not part of the model per se, but it is a(n important) choice you make when training the model. The batch size affects the learning as follows: Averaging the gradints for many data points (i..e. a large batch size) will produce a smoother loss function and will also usually make the code execute more quickly through the dataset, but updating the weights for every point will cause the algorithm to learn with fewer iterations. . One quick way to observe this is to go up to the Keras code above and change batch_size from 1 to 10, and re-execute the cell. How is the accuracy after 200 iteractions, compared to when batch_size=1? . Terminology: Technically, it&#39;s called &quot;batch training&quot; when you sum the gradients for all the data points before updating the weights, whereas using fewer points is &quot;minibatch training&quot;, and updating for each point (i.e. each row, for us) is Stochastic Gradient Descent* (SGD -- more on these terms here). In practice, there is a tradeoff between smaller vs. larger (mini)batches, which has been the subject of intense scrutiny by researchers over the years. We will have more to say on this later. . For discussion later: In our presentation above, were we using batch training, minibatch training or SGD? . . . *Note: many people will regard SGD as an optimization algorithm per se, and refer to doing SGD even for (mini)batch sizes larger than 1. . Optional: If you want to go really crazy . How about training on this dataset: $$ overbrace{ left[ { begin{array}{cc} 0 &amp; 0 0 &amp; 1 1 &amp; 0 1 &amp; 1 end{array} } right] }^{X} rightarrow overbrace{ left[ { begin{array}{c} 0 1 1 0 end{array} } right] }^Y. $$ Good luck! ;-) (Hint 1: This problem features prominently in the history of Neural Networks, involving Marvin Minsky and &quot;AI Winter.&quot; Hint 2: This whole lesson could instead be entitled &quot;My First Artificial Neuron.&quot;) . Next time, we will go on to Part 2: Bias and CE Loss. . Additional Optional Exercise: Binary Math vs. One-Hot Encoding . For the 7-segment display, we used a one-hot encoding for our output, namely a set of true/false &quot;bits&quot; for each digit. One may wonder how effective this ouput-encoding method is, compared to a different bit-setting encoding method, namely binary representations. . Construct the target output matrix $Y$ for binary representations of the numbers 0 through 9. Your target matrix should have 10 rows and 4 columns (i.e, output bits for 1s, 2s, 4s, and 8s). | Using this $Y$ array, train the network as before, and plot the loss as a function of iteration. | Question: Which method works &#39;better&#39;? One-hot encoding or binary encoding? .",
            "url": "https://drscotthawley.github.io/blog/2019/01/30/My-First-Neural-Network.html",
            "relUrl": "/2019/01/30/My-First-Neural-Network.html",
            "date": " • Jan 30, 2019"
        }
        
    
  
    
        ,"post18": {
            "title": "Parallelizing Python, Simplified",
            "content": ". So you have some serial task that takes forever, and you’re thinking it should be parallelizable, but you find the documentation on this to be obtuse? Yea. . Usually I’m interested in either creating lots of data in parallel, or inputting lots of data in parallel, and it’s often something that I first implemented as a loop but got tired of how slow it runs. These involve embarrassingly parallel tasks in that they don’t depend on one another. . There’s a simple prescription for parallelizing most of these kinds of tasks in Python. It goes as follows: . Have some kind of task performed in a for loop. | Write a function that does what you want for one “instance.” For example, take what’s inside one of your for loops, put all that in a separate function. | As a check, keep your loop but use only the function call. Make sure it produces the same results as the original version of your code. | Use functools.partial to create a wrapper for your function. | Replace the loop with a call to Pool.map(). | In the following, we’ll cover 3 examples for parallel tasks: . Generate a bunch of files | Read a bunch of files into a list | Filling a numpy array | Example 1: Generate a bunch of files . Let’s say you have some important synthetic data that you want to generate lots of instances of. For now, for simplicity, we’re just going to generate images of, let’s say, random noise. And to make it interesting we’ll generate 2000 of them. . Here’s the serial for-loop version: . import numpy as np import cv2 n_images = 2000 size_x, size_y = 100, 100 for i in range(n_images): arr = 255*np.random.rand(size_x,size_y) filename = &#39;image_&#39;+str(i)+&#39;.png&#39; print(&quot;writing file &quot;,filename) cv2.imwrite(filename,arr) . Now we write a dedicated function, put it in a partial wrapper, and call it as follows: . import numpy as np import cv2 from functools import partial def write_one_file(size_x, size_y, name_prefix, i): arr = 255*np.random.rand(size_x,size_y) filename = name_prefix + str(i) + &#39;.png&#39; print(&quot;writing file &quot;,filename) cv2.imwrite(filename,arr) n_images = 2000 size_x, size_y = 100, 100 wrapper = partial(write_one_file, size_x, size_y, &#39;image_&#39;) for i in range(n_images): wrapper(i) . Finally we replace the loop with a multiprocessing pool. We can either use all the cpus on the machine (which is the default) or specify how many to use, by giving an argument to Pool(): . import numpy as np import cv2 from functools import partial import multiprocessing as mp def write_one_file(size_x, size_y, name_prefix, i): arr = 255*np.random.rand(size_x,size_y) filename = name_prefix + str(i) + &#39;.png&#39; print(&quot;writing file &quot;,filename) cv2.imwrite(filename,arr) n_images = 2000 size_x, size_y = 100, 100 wrapper = partial(write_one_file, size_x, size_y, &#39;image_&#39;) num_procs = mp.cpu_count() # or can replace with some number of processes to use pool = mp.Pool(num_procs) indices = range(n_images) results = pool.map(wrapper, indices) pool.close() pool.join() . There are other ways you can do this to get more control, e.g. to have each process in the pool receive a particular range of indices, but this basic setup will get the job done. And if you turn off the printing to screen and time the execution, you’ll see the speedup. . Example 2: Read a bunch of files into a list . This example is actually of limited utility and you may want to just skip down to “Example 3: Filling a numpy array,” but it’s still an illustrative example that motivates Example 3, and offers a bit of variety in how one might do things. In this case we’re not going to use Pool.map; instead we’re going to use a context manager for the particular datatype of list. . Let’s try to load in all the image files we just generated, into a list. Here’s the serial version: . import glob import cv2 name_prefix = &#39;image_&#39; # we&#39;ll use glob to get the list of available files # note that glob order isn&#39;t...easily discernible, so we&#39;ll sort. img_file_list = sorted(glob.glob(name_prefix+&#39;*.png&#39;)) n_files = len(img_file_list) print(n_files,&quot;files available.&quot;) img_data_list = [] for i in range(n_files): filename = name_prefix + str(i) + &#39;.png&#39; print(&quot;Reading file&quot;,filename) img = cv2.imread(filename) img_data_list.append(img) print(len(img_data_list),&quot;images in list.&quot;) . (If we wanted to, we could easily convert this list of images to a numpy array. But let’s hold off on that.) . This time, we’ll split up the tasks manually into equal numbers for each process. Parallelizing this can take the following form: . from multiprocessing import Process, Manager, cpu_count import glob import cv2 def load_one_proc(img_data_list, img_file_list, iproc, per_proc): istart, iend = iproc * per_proc, (iproc+1) * per_proc for i in range(istart,iend): # each process will read a range of files filename = img_file_list[i] print(&quot;Reading file&quot;,filename) img = cv2.imread(filename) img_data_list.append(img) return name_prefix = &#39;image_&#39; # we&#39;ll use glob to get the list of available files # note that glob order isn&#39;t...easily discernible, so we&#39;ll sort. img_file_list = sorted(glob.glob(name_prefix+&#39;*.png&#39;)) n_files = len(img_file_list) print(n_files,&quot;files available.&quot;) # We&#39;ll split up the list manually num_procs = cpu_count() print(&quot;Parallelizing across&quot;,num_procs,&quot;processes.&quot;) per_proc = n_files // num_procs # Number of files per processor to load assert n_files == per_proc * num_procs # Make sure tasks divide evenly. Obvously one can do something more sophisticated than this! with Manager() as manager: img_data_list = manager.list() processes = [] for iproc in range(num_procs): p = Process(target=load_one_proc, args=(img_data_list, img_file_list, iproc, per_proc)) p.start() processes.append(p) for p in processes: p.join() outside_list = list(img_data_list) # Copy out of the Manager context (there may be a better way to do this) print(len(outside_list),&quot;images in list.&quot;) . Okay, great. The thing is, that set of processes operates asynchronously, so there’s no telling what order the final list is going to be in. Maybe you don’t care, but sometimes I care. One way of dealing with this is to add an index item within the list for each item, and then sort on that index. . But most of the time what I really want in the end is a numpy array. So let’s just look at how to fill one of those, directly. . Example 3: Filling a NumPy array . Data scientist Jonas Teuwen made a great post which got me started on how to do this, but then it seems I uncovered a bug in numpy’s garbage collection for which there’s now a patch. Even without the patch, there are a couple workarounds one can use, and I’ll choose the simpler of the two workarounds. . Let’s load all those images into a numpy array instead of a list. First the serial version: . import numpy as np import glob import cv2 name_prefix = &#39;image_&#39; img_file_list = sorted(glob.glob(name_prefix+&#39;*.png&#39;)) n_files = len(img_file_list) first_image = cv2.imread(img_file_list[0]) print(n_files,&quot;files available. Shape of first image is&quot;,first_image.shape) print(&quot;Assuming all images are that size.&quot;) img_data_arr = np.zeros([n_files]+list(first_image.shape)) # allocate storage for i in range(n_files): filename = img_file_list[i] print(&quot;Reading file&quot;,filename) img_data_arr[i] = cv2.imread(filename) print(&quot;Finished.&quot;) . For the parallel version, we’re going to have to use a global variable. Sorry, there’s no away around it, because of Python’s Global Interpreter Lock (GIL). . Without further ado, here’s the parallel, numpy version of the ‘loading a list of images’ shown earlier in Example 2. (One other change: rather than specifying ranges of images for each processor – which I did just for the sake of variety – this time we’ll let Pool.map decide how to – evenly – distribute the tasks.) . import numpy as np import glob import cv2 from multiprocessing import Pool, sharedctypes, cpu_count from functools import partial import gc mp_shared_array = None # global variable for array def load_one_proc(img_file_list, i): global mp_shared_array # tmp will end up pointing to the memory address of the shared array we want to populate tmp = np.ctypeslib.as_array(mp_shared_array) filename = img_file_list[i] print(&quot;Reading file&quot;,filename) tmp[i] = cv2.imread(filename) # assign the values into the memory of the shared array return name_prefix = &#39;image_&#39; img_file_list = sorted(glob.glob(name_prefix+&#39;*.png&#39;)) n_files = len(img_file_list) first_image = cv2.imread(img_file_list[0]) print(n_files,&quot;files available. Shape of first image is&quot;,first_image.shape) print(&quot;Assuming all images are that size.&quot;) img_data_arr = np.zeros([n_files]+list(first_image.shape)) # allocate storage tmp = np.ctypeslib.as_ctypes(img_data_arr) # tmp variable avoids numpy garbage-collection bug print(&quot;Allocating shared storage for multiprocessing (this can take a while)&quot;) mp_shared_array = sharedctypes.RawArray(tmp._type_, tmp) num_procs = cpu_count() print(&quot;Parallelizing across&quot;,num_procs,&quot;processes.&quot;) p = Pool(num_procs) wrapper = partial(load_one_proc, img_file_list) indices = range(n_files) result = p.map(wrapper, indices) # here&#39;s where we farm out the op img_data_arr = np.ctypeslib.as_array(mp_shared_array, shape=img_data_arr.shape) # this actually happens pretty fast p.close() p.join() # Next couple lines are here just in case you want to move on to other things # and force garbage collection mp_shared_array = None gc.collect() print(&quot;Finished.&quot;) . So that’s the basic implementation. Let me know in the comments if you have suggestions for improvements, or other ideas! . P.S.- Final Remarks . Added in a couple thoughts, post-facto: . 1. Performance. Notice that what gets passed to p.map() is an iterator, which typically you’ll use as either the indices of the members of an array (as we did just now), or it as a range over the number of processors (kinda like we did in Example 2). In the former case, the system is likely to spawn lots and lots of processes (not all at the same time, but as one ‘job’ finishes the system will spawn a new one, and will keep the “pool” going), which will have a bit of overhead – i.e. latency – each time these start and stop. It’s not much though, and so you probably won’t notice if your goal is merely, “I’m doing this so that I only have to wait 5 minutes instead of an hour to get something done.” If instead you make the indices in the map over the range of processors on your machine and manually break up the array indices into chunks (sort of like we did in Example 2), then you won’t be spawning as many processes and so your latency will be considerably lower. But the gain may be small enough (depending on your system) that you may not notice the difference in performance. Still, if you want to go all-out for performance, then make the pool.map go over the number of procs you want. Otherwise, feel free to trust the system to do its thing for you and just use the array (or list) indices for the iterator. . 2. When Processes Die. Debugging multiprocessing runs is a pain. If one process dies (crashes, seg faults, generates any kind of “Error”), it will hang the entire pool and you won’t know why because the error messages won’t come to stdout or stderr. Look elsewhere for tutorials on tools for debugging multiprocessing runs. Good news is that regular print statements still come to stdout for all processes, so one way of debugging is the age-old method of just loading your code with print statements. .",
            "url": "https://drscotthawley.github.io/blog/2018/12/16/Parallelizing-Python-Simplified.html",
            "relUrl": "/2018/12/16/Parallelizing-Python-Simplified.html",
            "date": " • Dec 16, 2018"
        }
        
    
  
    
        ,"post19": {
            "title": "Resolving Mac OS X Aliases in Python",
            "content": "Mac OSX aliases are not symbolic links. Trying to read one may crash your code. . In an app I’m developing, I want users to be able to easily create a “library” of symbolic links to other places on their machine, and this is most easily achieved for many of them by Cmd-Option-Dragging and dropping the files. This creates an “alias”, which is a special file that Apple dreamed up. UNIX users are accustomed to symbolic links, and codes written in UNIX will not follow or “resolve” Mac aliases. Instead, they will cause an exception to be thrown. . There used to be some libraries to handle this, but they relied on Apple’s old Carbon framework which is no longer supported. There is a mac_alias package but the documentation is lacking. So, I found an old post on MacWorld where one solution is given, and I ported that for what I need. . Happy to share with you, so that you won’t have to worry about this. As an added bonus, you can tell it to convert aliases to symbolic links, so that “next time” you won’t have to deal with this. Enjoy. . #!/usr/bin/env python3 # # Resolve Mac OS X &#39;aliases&#39; by finding where they point to # Author: Scott H. Hawley # # Description: # Mac OSX aliases are not symbolic links. Trying to read one will probably crash your code. # Here a few routines to help. Run these to change the filename before trying to read a file. # Intended to be called from within other python code # # Python port modified from https://hints.macworld.com/article.php?story=20021024064107356 # # Requirements: osascript (AppleScript), platform, subprocess, shlex # # TODO: - could make it work in parallel when mutliple filenames are given # # NOTE: By default, this only returns the names of the original source files, # but if you set convert=True, it will also convert aliases to symbolic links. # import subprocess import platform import os # returns true if a file is an OSX alias, false otherwise def isAlias(path, already_checked_os=False): if (not already_checked_os) and (&#39;Darwin&#39; != platform.system()): # already_checked just saves a few microseconds ;-) return False checkpath = os.path.abspath(path) # osascript needs absolute paths # Next several lines are AppleScript line_1=&#39;tell application &quot;Finder&quot;&#39; line_2=&#39;set theItem to (POSIX file &quot;&#39;+checkpath+&#39;&quot;) as alias&#39; line_3=&#39;if the kind of theItem is &quot;alias&quot; then&#39; line_4=&#39; return true&#39; line_5=&#39;else&#39; line_6=&#39; return false&#39; line_7=&#39;end if&#39; line_8=&#39;end tell&#39; cmd = &quot;osascript -e &#39;&quot;+line_1+&quot;&#39; -e &#39;&quot;+line_2+&quot;&#39; -e &#39;&quot;+line_3+&quot;&#39; -e &#39;&quot;+line_4+&quot;&#39; -e &#39;&quot;+line_5+&quot;&#39; -e &#39;&quot;+line_6+&quot;&#39; -e &#39;&quot;+line_7+&quot;&#39; -e &#39;&quot;+line_8+&quot;&#39;&quot; args = shlex.split(cmd) # shlex splits cmd up appropriately so we can call subprocess.Popen with shell=False (better security) p = subprocess.Popen(args, shell=False, stdout=subprocess.PIPE, stderr=subprocess.STDOUT) retval = p.wait() if (0 == retval): line = p.stdout.readlines()[0] line2 = line.decode(&#39;UTF-8&#39;).replace(&#39; n&#39;,&#39;&#39;) if (&#39;true&#39; == line2): return True else: return False else: print(&#39;resolve_osx_alias: Error: subprocess returned non-zero exit code &#39;+str(retval)) return None # returns the full path of the file &quot;pointed to&quot; by the alias def resolve_osx_alias(path, already_checked_os=False, convert=False): # single file/path name if (not already_checked_os) and (&#39;Darwin&#39; != platform.system()): # already_checked just saves a few microseconds ;-) return path checkpath = os.path.abspath(path) # osascript needs absolute paths # Next several lines are AppleScript line_1=&#39;tell application &quot;Finder&quot;&#39; line_2=&#39;set theItem to (POSIX file &quot;&#39;+checkpath+&#39;&quot;) as alias&#39; line_3=&#39;if the kind of theItem is &quot;alias&quot; then&#39; line_4=&#39; get the posix path of (original item of theItem as text)&#39; line_5=&#39;else&#39; line_6=&#39;return &quot;&#39;+checkpath+&#39;&quot;&#39; line_7 =&#39;end if&#39; line_8 =&#39;end tell&#39; cmd = &quot;osascript -e &#39;&quot;+line_1+&quot;&#39; -e &#39;&quot;+line_2+&quot;&#39; -e &#39;&quot;+line_3+&quot;&#39; -e &#39;&quot;+line_4+&quot;&#39; -e &#39;&quot;+line_5+&quot;&#39; -e &#39;&quot;+line_6+&quot;&#39; -e &#39;&quot;+line_7+&quot;&#39; -e &#39;&quot;+line_8+&quot;&#39;&quot; args = shlex.split(cmd) # shlex splits cmd up appropriately so we can call subprocess.Popen with shell=False (better security) p = subprocess.Popen(args, shell=False, stdout=subprocess.PIPE, stderr=subprocess.STDOUT) retval = p.wait() if (0 == retval): line = p.stdout.readlines()[0] source = line.decode(&#39;UTF-8&#39;).replace(&#39; n&#39;,&#39;&#39;) if (convert): os.remove(checkpath) os.symlink(source, checkpath) else: print(&#39;resolve_osx_aliases: Error: subprocess returned non-zero exit code &#39;+str(retval)) source = &#39;&#39; return source # used for multiple files at a time, just a looped call to resolve_osx_alias def resolve_osx_aliases(filelist, convert=False): # multiple files #print(&quot;filelist = &quot;,filelist) if (&#39;Darwin&#39; != platform.system()): return filelist outlist = [] for infile in filelist: source = resolve_osx_alias(infile, already_checked_os=True, convert=convert) if (&#39;&#39; != source): outlist.append(source) #print(&quot;outlist = &quot;,outlist) return outlist if __name__ == &quot;__main__&quot;: import argparse parser = argparse.ArgumentParser(description=&#39;Resolve OSX aliases&#39;) parser.add_argument(&#39;file&#39;, help=&quot;alias files to resolve&quot;, nargs=&#39;+&#39;) args = parser.parse_args() outlist = resolve_osx_aliases(args.file) print(&quot;outlist = &quot;,outlist) . The above code is part of the utils/ directory in my Panotti package. The way it’s called is in the context of trying to read an audio file, called in the file panotti/datautils.py: . def load_audio(audio_path, mono=None, sr=None, convertOSXaliases=True): # wrapper for librosa.load try: signal, sr = librosa.load(audio_path, mono=mono, sr=sr) # try to read the file &#39;normally&#39; except NoBackendError as e: if (&#39;Darwin&#39; == platform.system()): # if an exception is thrown, check: Am I on a Mac? If so try to resolve an alias source = resolve_osx_alias(audio_path, convert=convertOSXaliases, already_checked_os=True) # ...and convert to symlinks for next time try: signal, sr = librosa.load(source, mono=mono, sr=sr) # Now try to read again except NoBackendError as e: # Ok, even that didn&#39;t work, giving up (for now). print(&quot; n*** ERROR: Could not open audio file {}&quot;.format(audio_path),&quot; n&quot;,flush=True) raise e else: # Failure for some other reason. print(&quot; n*** ERROR: Could not open audio file {}&quot;.format(audio_path),&quot; n&quot;,flush=True) raise e return signal, sr . Happy coding! . NOTE: Currently this code only follows _one_ alias. If there’s an alias pointing to an alias to a file, it won’t resolve to that file. Full generality would involve adding an iterative or recursive way of traversing multiple aliases which…I may do later. ;-) .",
            "url": "https://drscotthawley.github.io/blog/2018/02/21/Resolving-OSX-Aliases.html",
            "relUrl": "/2018/02/21/Resolving-OSX-Aliases.html",
            "date": " • Feb 21, 2018"
        }
        
    
  
    
        ,"post20": {
            "title": "Notes on Convexity of Loss Functions for Classification",
            "content": ". Edit 7/18/2020: . I wrote this when I was a bit new to the nitty-gritty of ML. If I had this to do all over again, I would simplify the following by just saying to myself: &quot;It is the combination of cross-entropy (or log-likelihood) loss with the sigmoid activation function that gives you the nice property: whereby the gradient becomes monotonic (in the case of either class) -- i.e. the system is convex.&quot; And that would be sufficient. . . This is a post where I&#39;m investigating convexity a bit, as it relates to neural networks. . Andrew Ng, in Week 3 of his Coursera course on Machine Learning, shows the following image with respect to the &quot;cost function&quot; to be optimized: . Andrew Ng, in Week 3 of his Coursera course on Machine Learning, shows the following image with respect to the &quot;cost function&quot; to be optimized (as slide 14 of Lecture 6): . (image is giving problems, sorry) . I wanted to investigate this:Could I reproduce the two graphs he sketched? The two different loss functions are the mean squared error (MSE or sometimes just SE) and cross entropy (CE): $$ MSE = {1 over m} sum_{i=1}^m left( y_i - h_i right)^2 $$ . $$ CE = - {1 over m} sum_{i=1}^m left[ y_i log(h_i) + (1-y_i) log(1-h_i) right] $$ . where $y_i$ are the true values (0 or 1) and $h_i = h(x_i)$ are the predictions. . TL/DR: No I can&#39;t reproduce his sketches. The graph I get for sum of the squared error (SE) doesn&#39;t have the wiggles that his drawing on the left does. (Perhaps he was just doodling an example of an arbitrary non-convex function, rather than the squared loss in particular?) Takeways at the bottom of this, re. the difference between a convex loss function (by itself) vs. a convex loss for a problem -- i.e. the individual terms are convex for either function, but the sum of these terms is actually not strictly convex for either function (for this problem). . I read a few posts about this first... . Math StackExchange: Show that logistic regression with squared loss function is non-convex, which includes a link to this nice demo on Desmos | https://math.stackexchange.com/questions/2193478/loss-function-for-logistic-regression | https://en.wikipedia.org/wiki/Loss_functions_for_classification seems to say that squared loss is convex. ?? | . ...but then wanted to try for myself. As follows: . #%matplotlib ipympl %matplotlib inline from mpl_toolkits.mplot3d import Axes3D import matplotlib.pyplot as plt from matplotlib import cm import numpy as np . def h(x,a,b): # h = logistic function. a is &#39;weight&#39; and b is &#39;bias&#39; return 1/(1 + np.exp(-(a*x + b))) # For code below, a &amp; b should be scalars, x can be anything def classify_x(x, threshold): out = 0*x out[x &gt; threshold] = 1.0 return out . num_x = 25 x_arr = np.linspace(-5,5,num_x) # _arr denotes&quot;array&quot; threshold = 0.7314 # threshold value chosen arbitrarily y_arr = classify_x(x_arr, threshold) # make a prediction a_guess = 10/(x_arr[1]-x_arr[0]) b_guess = -a_guess * threshold print(&quot;Prediction guess: a =&quot;,a_guess,&quot;, b =&quot;,b_guess) h_arr = np.array(h(x_arr, a_guess, b_guess)) # plot the data fig = plt.figure() plt.plot(x_arr, y_arr,&#39;o&#39;,color=&#39;red&#39;,label=&quot;Truth y&quot;) plt.plot(x_arr, h_arr,&#39;x-&#39;,color=&#39;green&#39;,label=&quot;Prediction h&quot;) plt.legend() plt.show() . Prediction guess: a = 23.999999999999982 , b = -17.55359999999999 . def calc_se_loss(y_arr, h_arr): # squared error loss return np.mean( (y_arr - h_arr)**2) def calc_ce_loss(y_arr, h_arr): # cross-entropy loss, related to Kullback-Liebler divergence eps = 1.0e-16 # added to avoid log(0) errors return -np.mean( y_arr*np.log(h_arr) + (1-y_arr)*np.log(1-h_arr+eps) ) # elementwise multiplication . # define parameter space over which to plot num_a = 100 a_arr = np.linspace(-a_guess,4*a_guess,num_a) b_arr = b_guess + 0*a_arr # make at the b&#39;s all the same value for this first plot. se_loss = [] ce_loss = [] for i in range(a_arr.shape[0]): # cycle through all the values of a and b, getting a different loss for each h_arr = h(x_arr, a_arr[i], b_arr[i]) se_loss.append( calc_se_loss(y_arr, h_arr) ) ce_loss.append( calc_ce_loss(y_arr, h_arr) ) # plot 1-d version fig = plt.figure() ax = fig.gca() ax.set_xlabel(&#39;a&#39;) #ax.set_ylim(2.38, 2.41) # zoom in on flat part on the right plt.plot(a_arr, np.log(se_loss),&#39;o-&#39;,color=&#39;red&#39;,label=&quot;SE Loss&quot;) plt.plot(a_arr, np.log(ce_loss),&#39;o-&#39;,color=&#39;blue&#39;,label=&quot;CE Loss&quot;) ax.set_ylabel(&quot;log of loss&quot;) plt.legend() plt.show() . . EDIT (later): A reader pointed out that the use of the log function distorts the shape of the function and thereby obscures the visual inspection of the convexity. Ooops. See. I was new to this! . . In the above figure, it looks like the SE loss goes &#39;flat&#39; for a bit on the left, but never turns upward until after the global minimum. The CE loss...I can see a few places where we could connect two points with a straight line and not have all of the line lie with in the epigraph). Still the lack of flat regions for the blue line would make it preferable for gradient-based optimization. . Plot the full error surface . num_a = 100 # try experimenting: play around with the max &amp; min of the a &amp; b values to see the surface a_arr = np.linspace(-a_guess/2,a_guess*2,num_a) b_arr = np.linspace(b_guess*2,-b_guess/2,num_a) A, B = np.meshgrid(a_arr, b_arr) def plot_loss_surf(A, B, x_arr, loss=&#39;SE&#39;): Z = np.zeros([len(A), len(B)]) if (&#39;SE&#39; == loss): for i in range(len(A)): for j in range(len(B)): h_arr = h(x_arr, a_arr[i], b_arr[j]) Z[j, i] = calc_se_loss(y_arr, h_arr) else: for i in range(len(A)): for j in range(len(B)): h_arr = h(x_arr, a_arr[i], b_arr[j]) Z[j, i] = calc_ce_loss(y_arr, h_arr) fig = plt.figure() ax = fig.gca(projection=&#39;3d&#39;) surf = ax.plot_surface(A, B, np.log(Z), cmap=cm.coolwarm, linewidth=0, antialiased=False) ax.set_xlabel(&#39;a&#39;) ax.set_ylabel(&#39;b&#39;) ax.set_zlabel(&#39;log(&#39;+loss+&#39;)&#39;) #ax.set_zlim(2, 2.5) ax.set_title(loss+&#39; loss&#39;) #fig.colorbar(surf, shrink=0.5, aspect=5) # Add a color bar which maps values to colors. plt.show() plot_loss_surf(A,B,x_arr,loss=&#39;SE&#39;) plot_loss_surf(A,B,x_arr,loss=&#39;CE&#39;) . The Verdict . So, although the individual terms $(y_i - h_i)^2$ and/or $[y_i log(h_i)+(1-y_i) log(1-h_i)]$ are individually convex, the sum for either type of loss terms is actually non-convex for this problem. Although neither give rise to unwanted local minima for this problem. . The SE loss, while at least not having any non-global minima, still has multiple significant flat regions that would prove tedious for gradient descent optimiazation, whereas in contrast, the CE loss is smoother and is strictly monotonic on either side of the global minimum. The the CE loss (and/or KL divergence) would be preferable for this problem -- you could do it with SE loss assuming you had momentum or some fancy optimization algorithm, but it would take longer and why bother? . Aside: Solve the logistic regression problem using scikit-learn . from sklearn import linear_model clf = linear_model.LogisticRegression(C=1e5, solver=&#39;lbfgs&#39;) clf.fit(x_arr[:, np.newaxis], y_arr) a_fit, b_fit = clf.coef_[0][0], clf.intercept_[0] print(&quot;Fit paramters: a =&quot;,a_fit,&quot;, b =&quot;,b_fit) print(&quot;Predicted threshold: x = &quot;,-b_fit/a_fit) . Fit paramters: a = 32.449347939033615 , b = -20.23838504197379 Predicted threshold: x = 0.6236915786412106 . Afterward: &quot;But you still haven&#39;t found the global minimum!&quot; . In the surface plots above, we see the minimum of the surface going lower and lower -- even lower than the supposedly &#39;optimum&#39; parameters we just found via scikit-learn. The reason is that there is no optimal paramter combination: The steepness parameter $a$ of the sigmoid function $h(x)$ is only bounded from below by the data in this problem. Thus there is no upper bound. The data will constrain the center of the sigmoid $x_0 = -b/a$ to some extent (i.e. it needs to lie between two values of $x_i$), but other than that... . So how then does the loss function seem to get lower and lower? The steeper the sigmoid function, the more closely its values will approach 0 and 1 on either side. Thus for this problem, the optimal solution is $a rightarrow infty$, with $b = -({ rm threshold})/a$. .",
            "url": "https://drscotthawley.github.io/blog/2017/11/22/Convexity-Loss-Classification.html",
            "relUrl": "/2017/11/22/Convexity-Loss-Classification.html",
            "date": " • Nov 22, 2017"
        }
        
    
  
    
        ,"post21": {
            "title": "Crash Course On GANs",
            "content": ". Image credit: Dev Nag . This post is not necessarily a crash course on GANs. It is at least a record of me giving myself a crash course on GANs. Adding to this as I go. . Intro/Motivation . I’ve been wanting to grasp the seeming-magic of Generative Adversarial Networks (GANs) since I started seeing handbags turned into shoes and brunettes turned to blondes… …and seeing Magic Pony’s image super-resolution results and hearing that Yann Lecun had called GANs the most important innovation in machine learning in recent years. . Finally, seeing Google’s Cat-Pig Sketch-Drawing Math… . …broke me, and so…I need to ‘get’ this. . I’ve noticed that, although people use GANs with great success for images, not many have tried using them for audio yet (Note: see SEGAN paper, below). Maybe with already-successful generative audio systems like WaveNet, SampleRNN (listen to those piano sounds!!) and TacoTron there’s less of a push for trying GANs. Or maybe GANs just suck for audio. Guess I’ll find out… . Steps I Took . Day 1: . Gathered list of some prominent papers (below). | Watched video of Ian Goodfellow’s Berkeley lecture (notes below). | Started reading the EBGAN paper (notes below)… | …but soon switched to BEGAN paper – because wow! Look at these generated images: | Googled for Keras-based BEGAN implementations and other code repositories (below)…Noticed SEGAN… | …Kept reading BEGAN, making notes as I went (below). | Finished paper, started looking through BEGAN codes from GitHub (below) &amp; began trying them out… a. Cloned @mokemokechicken’s Keras repo, grabbed suggested LFW database, converted images via script, ran training… Takes 140 seconds per epoch on Titan X Pascal. . Main part of code is in models.py | . b. Cloned @carpedm’s Tensorflow repo, looked through it, got CelebA dataset, started running code. . | Leaving codes to train overnight. Next time, I’d like to try to better understand the use of an autoencoder as the discriminator. | Day 2: . My office is hot. Two Titan X GPUs pulling ~230W for 10 hours straight has put the cards up towards annoyingly high temperatures, as in ~ 85 Celsius! My previous nightly runs wouldn’t even go above 60 C. But the results – espically from the straight-Tensorflow code trained on the CelebA dataset – are as incredible as advertised! (Not that I understand them yet. LOL.) The Keras version, despite claiming to be a BEGAN implementation, seems to suffer from “mode collapse,” i.e. that too many very similar images get generated. | Fished around a little more on the web for audio GAN applications. Found an RNN-GAN application to MIDI, and found actual audio examples of what not to do: don’t try to just produce spectrograms with DCGAN and convert them to audio. The latter authors seem to have decided to switch to a SampleRNN approach. Perhaps it would be wise to heed their example? ;-) | Since EBGAN implemented autoencoders as discriminators before BEGAN did, I went back to read that part of the EBGAN paper. Indeed, section “2.3 - Using AutoEncoders” (page 4). (see notes below) | Ok, I basically get the autoencoder-discriminator thing now. :-) | Day 3: . “Life” intervened. :-/ Hope to pick this up later. . Papers . Haven’t read hardly any of these yet, just gathering them here for reference: . Original GAN Paper: ” Generative Adversarial Networks” by GoodFellow (2014) | DCGAN: “Unsupervised Representation Learning with Deep Convolutional Generative Adversarial Networks” by Radford, Metz &amp; Chintala (2015) | “Image-to-Image Translation with Conditional Adversarial Networks” by Isola et al (2016) | “Improved Techniques for Training GANs” by Salimans et al (2016). | DiscoGAN: “Learning to Discover Cross-Domain Relations with Generative Adversarial Networks” by Kim et al. (2017) | EBGAN: “Energy-based Generative Adversarial Network by Zhao, Matheiu &amp; Lecun (2016/2017). Remarks/Notes: | “This variant [EBGAN] converges more stably [than previous GANs] and is both easy to train and robust to hyper-parameter variations” (quoting from BEGAN paper, below). | If it’s energy-based, does that mean we get a Lagrangian, and Euler-Lagrange Equations, and Lagrange Multipliers? And thus can physics students (&amp; professors!) grasp these networks in a straightforward way? Should perhaps take a look at Lecun’s Tutorial on Energy-Based Learning. | “The energy is the resconstruction error [of the autoencoder]” (Section 1.3, bullet points) | | . Image credit: Roozbeh Farhoodi + EBGAN authors . “…256×256 pixel resolution, without a multi-scale approach.” (ibid) | Section 2.3 covers on the use of the autoencoder as a discriminator. Wow, truly, the discriminator’s “energy”/ “loss” criterion is literally just the reconstruction error of the autoencoder. How does that get you a discriminator?? | It gets you a discriminator because the outputs of the generator are likely to have high energies whereas the real data (supposedly) will produce low energies: “We argue that the energy function (the discriminator) in the EBGAN framework is also seen as being regularized by having a generator producing the contrastive samples, to which the discrim- inator ought to give high reconstruction energies” (bottom of page 4). | . | “Wasserstein GAN (WGAN) by Arjovsky, Chintala, &amp; Bottou (2017) . | “BEGAN: Boundary Equilibrium Generative Adversarial Networks” by Berthelot, Schumm &amp; Metz (April 2017). . Remarks/Notes: | “Our model is easier to train and simpler than other GANs architectures: no batch normalization, no dropout, no transpose convolutions and no exponential growth for convolution filters.” (end of section 3.5, page 5) | This is probably not the kind of paper that anyone off the street can just pick up &amp; read. There will be math. | Uses an autoencoder for the discriminator. | I notice that Table 1, page 8 shows “DFM” (from “Improving Generative Adversarial Networks with Denoising Feature Matching” by Warde-Farley &amp; Bengio, 2017) as scoring higher than BEGAN. | page 2: “Given two normal distributions…with covariances C1,C2C_1, C_2C1​,C2​,…”: see “Multivariate Normal Distribution”. | Section 3.3, Equilibrium: The “E[ ] mathbb{E}[ ]E[ ]” notation – as in E[L(x)] mathbb{E} left[ mathcal{L}(x) right]E[L(x)] – means “expected value.” See https://en.wikipedia.org/wiki/Expected_value | Introduces the diversity ratio: γ=E[L(G(z))]E[L(x)] gamma= frac{ mathbb{E} left[ mathcal{L}(G(z)) right]}{ mathbb{E} left[ mathcal{L}(x) right]}γ=E[L(x)]E[L(G(z))]​. “Lower values of γ gammaγ lead to lower image diversity because the discriminator focuses more heavily on auto-encoding real images.” | “3.5 Model architecture”: Did not actually get the bit about the autoencoder as the discriminator: “How does an autoencoder output a 1 or a zero?” | Ok, done. Will come back later if needed; maybe looking at code will make things clearer… | . | “SEGAN: Speech Enhancement Generative Adversarial Network” by Pascual, Bonafonte &amp; Serra (April 2017). Actual audio GAN! They only used it to remove noise. | . Videos . Ian Goodfellow (original GAN author), Guest lecture on GANs for UC Berkeley CS295 (Oct 2016). 1 hour 27 minutes. NOTE: actually starts at 4:33. Watch at 1.25 speed. Remarks/Notes: | This is on a fairly “high” level, which may be too much for some viewers; if hearing the words “probability distribution” over &amp; over again makes you tune out, and e.g. if you don’t know what a Jacobian is, then you may not want to watch this. | His “Taxonomy of Generative Models” is GREAT! | The discriminator is just an ordinary classifier. | So, the generator’s cost function can be just the negative of the discriminator’s cost function, (i.e. it tries to “mess up” the discriminator), however that can saturate (i.e. produce small gradients) so instead they try to “maximize the probability that the discriminator will make a mistake” (44:12). | “KL divergence” is a measure of the ‘difference’ between two PD’s. | “Logit” is the inverse of the sigmoid/logistical function. (logit&lt;–&gt;sigmoid :: tan&lt;–&gt;arctan) | Jensen-Shannon divergence is a measure of the ‘similarity’ between two PD’s. Jensen-Shannon produces better results for GANs than KL/maximum likelihood. | . | . Web Posts/Tutorials . “Machine Learning is Fun Part 7: Abusing Generative Adversarial Networks to Make 8-bit Pixel Art” by Adam Geitgey, skip down to “How DCGANs Work” (2017) | Post on BEGAN: https://blog.heuritech.com/2017/04/11/began-state-of-the-art-generation-of-faces-with-generative-adversarial-networks/ | An introduction to Generative Adversarial Networks (with code in TensorFlow) | “Generative Adversarial Networks (GANs) in 50 lines of code (PyTorch)” by Dev Nag (2017) | “Stability of Generative Adversarial Networks” by Nicholas Guttenberg (2016) | “End to End Neural Art with Generative Models” by Bing Xu (2016) . | Kording Lab GAN Tutorial by Roozbeh Farhoodi :-). Nicely done, has code too. . | . Code . Keras: . ‘Basic’ GAN with MNIST example: https://www.kdnuggets.com/2016/07/mnist-generative-adversarial-model-keras.html | GAN, BiGAN &amp; Adversarial AutoEncoder: https://github.com/bstriner/keras-adversarial | Kording Lab’s GAN tutorial, Jupyter Notebook https://github.com/KordingLab/lab_teaching_2016/blob/master/session_4/Generative%20Adversarial%20Networks.ipynb. (Code is short and understandable.) | Keras BEGAN: https://github.com/mokemokechicken/keras_BEGAN: Only works on 64x64 images; BEGAN paper shows some 128x128 | https://github.com/pbontrager/BEGAN-keras: No documentation, and I don’t see how it could run. I notice local variables being referenced in models.py as if they’re global. | . | Keras DCGAN (MNIST): https://github.com/jacobgil/keras-dcgan | Auxiliary Classifier GAN: https://github.com/lukedeo/keras-acgan | . Tensorflow: . BEGAN-Tensorflow: https://github.com/carpedm20/BEGAN-tensorflow | EBGAN.Tensorflow: https://github.com/shekkizh/EBGAN.tensorflow | SEGAN: https://github.com/santi-pdp/segan | DCGAN-Tensorflow: https://github.com/carpedm20/DCGAN-tensorflow | . PyTorch: . Tutorial &amp; simple implementation: https://github.com/devnag/pytorch-generative-adversarial-networks | . Datasets . CelebA: https://mmlab.ie.cuhk.edu.hk/projects/CelebA.html | MNIST: https://yann.lecun.com/exdb/mnist/ | Speech enhancement: https://datashare.is.ed.ac.uk/handle/10283/1942 | “Labelled Faces in the Wild” https://vis-www.cs.umass.edu/lfw/ | . More References (Lists) . “Delving deep into Generative Adversarial Networks (GANs): A curated list of state-of-the-art publications and resources about Generative Adversarial Networks (GANs) and their applications.” | .",
            "url": "https://drscotthawley.github.io/blog/2017/05/05/Crash-Course-On-GANs.html",
            "relUrl": "/2017/05/05/Crash-Course-On-GANs.html",
            "date": " • May 5, 2017"
        }
        
    
  
    
        ,"post22": {
            "title": "Learning Room Shapes (with Neural Networks)",
            "content": "‘Deep’ neural network learns (boxy) room shape given mode frequencies, or vice versa. . This is just a quick note, sharing a new “toy” result, that relates to function spaces, acoustics, and machine learning. I never bothered to publish it, because I was just “playing around”. The real trick would be to extend this to “non-boxy” room shapes, which…turns out to be hard! haha . Main Python code for this is here. . Motivation . During Karlheinz Brandenburg’s visit, he remarked that learning room shapes from the sound of the room is still an open question. So yesterday, “for fun” I decided to try the easiest possible thing I could think of, the most “ideal” if you will: wrote a NN system that learns to use a set of room mode frequencies to predict (boxy) room dimensions, or vice versa, i.e. it learns the “Rayleigh Equation” for 3D standing waves… . . …both ‘forwards’ or ‘backwards’: [L,W,H] &lt;–&gt; [list of mode frequencies] (given speed of sound v_s). . Results . Seems to learn within +/- 5%. I don’t have a graphical representation of going from mode frequencies to room dimensions (any ideas?). For mapping dimensions to frequencies, here’s a sample room shown in the picture (red=target, green=predicted), used a training set of 200,000 random rooms. It even learns to sort the freqs in ascending order. . . Interestingly, trying to ‘help’ the network by using squared frequencies, inverse-(squared)-dimensions, etc. actually gave worse performance than letting the network learn the nonlinearities itself. (???) . Of what possible practical utility is this? Not really sure. Although, it does a fairly decent job learning the room shape even using a smaller random subsample of the available mode frequencies. :-) If anything, it highlights a weakness of data-driven modeling: there’s no way you’ll measure 200,000 rooms in real life! . Future Work . Taking this further, would require analyzing the weights of the network in detail, to see how it represents the function approximation. Which would be worth doing! . Moving on to non-boxy rooms would be relevant and challenging. Some means of encoding the room geometry would be needed, as well some way of simulating (or measuring?) resonant frequencies or impulse responses. .",
            "url": "https://drscotthawley.github.io/blog/2017/05/04/Learning-Room-Shapes.html",
            "relUrl": "/2017/05/04/Learning-Room-Shapes.html",
            "date": " • May 4, 2017"
        }
        
    
  
    
        ,"post23": {
            "title": "Following Gravity - ML Foundations Part I",
            "content": "*Image credit: NASA* . Preface: I&#39;m writing this for myself, current students &amp; ASPIRE collaborators, and to &#39;give back&#39; to the internet community. I recently had insight into my &#39;main&#39; research problem, but started to hit a snag so decided to return to foundations. Going back to basics can be a good way to move forward... . By the end of this session, we will -- as an example problem -- have used the 1-dimensional path of an object in the presesece of gravity, to &#39;train&#39; a system to correctly infer (i.e. to &#39;learn&#39;) the constants of the motion -- initial position and velocity, and the acceleration due to gravity. Hopefully we learn a few other things along the way. ;-) . In the next installment, &quot;Part Ib,&quot; we&#39;ll derive the differential equation of motion, and in then in &quot;Part II&quot; we&#39;ll adapt the techniques we&#39;ve learned here to do signal processing. . Optimization Basics: Gradient Descent . Let&#39;s put the &quot;sample problem&quot; aside for now, and talk about the general problem of optimization. Often we may wish to minimize some function $f(x)$. In science, doing so may enable us to fit a curve to our data, as we&#39;ll do below. Similarly,&#39;machine learning&#39; systems often operate on the basis of minimizing a &#39;cost&#39; function to discern patterns in complex datasets. . Thus we want to find the value of $x$ for which $f(x)$ is the smallest. A graph of such a function might look like this... . (Python code follows, to make the graph) . import numpy as np, matplotlib.pyplot as plt fig, ax = plt.subplots() ax.update({&#39;xlabel&#39;:&#39;x&#39;, &#39;ylabel&#39;:&#39;f&#39;}) x = np.arange(-5,7,0.1) ax.plot(x,(x-1)**2+1) plt.show() . If $f(x)$ is differentiable and the derivative (i.e., slope) $df/dx$ can be evaluated easily, then we can perform a so-called &quot;gradient descent&quot;. . We do so as follows: . Start with some initial guess for $x$ | &quot;Go in the direction of $-df/dx$&quot;: $$x_{new} = x_{old} - alpha {df over dx},$$ where $ alpha$ is some parameter often called the &quot;learning rate&quot;. All this equation is saying is, &quot;If the function is increasing, then move to the left; and if the function is decreasing then move to the right.&quot; The actual change to $x$ is given by $ Delta x equiv - alpha (df/dx)$. | Repeat step 2 until some approximation criterion is met. | A nice feature of this method is that as $df/dx rightarrow 0$, so too $ Delta x rightarrow0$. So an &quot;adaptive stepsize&quot; is built-in. . Now let&#39;s try this out with some Python code... . from __future__ import print_function # for backwards-compatibility w/ Python2 import numpy as np, matplotlib.pyplot as plt def f(x): return (x-1)**2+1 def dfdx(x): return 2*(x-1) fig, ax = plt.subplots() ax.update({&#39;xlabel&#39;:&#39;x&#39;, &#39;ylabel&#39;:&#39;f&#39;}) x = np.arange(-5,7,0.1) ax.plot(x,f(x),ls=&#39;dashed&#39;) for alpha in ([0.002,0.1,0.25,0.8]): print(&quot;alpha = &quot;,alpha) x = -5 # starting point x_arr = [x] y_arr = [f(x)] maxiter = 50 for iter in range(maxiter): # do the descent # these two lines are just for plotting later x_arr.append(x) y_arr.append( f(x) ) # Here&#39;s the important part: update via gradient descent x = x - alpha * dfdx(x) # report and make the plot print(&quot; final x = &quot;,x) ax.plot(x_arr,y_arr,&#39;o-&#39;,label=&quot;alpha = &quot;+str(alpha)) handles, labels = ax.get_legend_handles_labels() ax.legend(handles, labels) plt.show() . alpha = 0.002 final x = -3.910414704056598 alpha = 0.1 final x = 0.9999143651384377 alpha = 0.25 final x = 0.9999999999999947 alpha = 0.8 final x = 0.999999999951503 . Notice how the larger learning rate ($ alpha$=0.8) meant that the steps taken were so large that they &quot;overshot&quot; the minimum, whereas the too-small learning rate ($ alpha=0.002$) still hadn&#39;t come anywhere close to the minimum before the maximum iteration was reached. . Exercise: Experiment by editing the above code: Try different learning rates and observe the behavior. . Challenge: Instability . You may have noticed, if you made the learning rate too large, that the algorithm does not converge to the solution but instead &#39;blows up&#39;. This is the &#39;flip side&#39; of the &#39;adaptive step size&#39; feature of this algorithm: If you jump &quot;across&quot; the minimum to the other side and end up a greater distance from the minimum that where you started, you will encounter an even larger gradient, which will lead to an even larger $ Delta x$, and so on. . We can see this with the same code from before, let&#39;s just use a different starting point and a step size that&#39;s clearly too large... . from __future__ import print_function # for backwards-compatibility w/ Python2 import numpy as np, matplotlib.pyplot as plt def f(x): return (x-1)**2+1 def dfdx(x): return 2*(x-1) alpha = 1.1 # &quot;too big&quot; learning rate print(&quot;alpha = &quot;,alpha) x = -1 # starting point x_arr = [] y_arr = [] maxiter = 12 for iter in range(maxiter): # do the descent x_arr.append(x) y_arr.append( f(x) ) x = x - alpha * dfdx(x) # report and make the plot print(&quot; final x = &quot;,x) fig, ax = plt.subplots() ax.update({&#39;xlabel&#39;:&#39;x&#39;, &#39;ylabel&#39;:&#39;f&#39;}) plt.plot(x_arr,y_arr,&#39;r&#39;,zorder=2,) plt.scatter(x_arr,y_arr,zorder=3,c=range(len(x_arr)),cmap=plt.cm.viridis) xlim = ax.get_xlim() # find out axis limits x = np.arange(xlim[0],xlim[1],1) # dashed line plt.plot(x,f(x),zorder=1,ls=&#39;dashed&#39;) handles, labels = ax.get_legend_handles_labels() ax.legend(handles, labels) plt.show() . alpha = 1.1 final x = -16.83220089651204 . In the above plot, we colored the points by iteration number, starting with the dark purple at the initial location of x=-1, and bouncing around ever-farther from the solution as the color changes to yellow. As this happens, the error is growing exponentially; this is one example of a numerical instability. Thus, this algorithm is not entirely stable. . . One way to guard against this to check: is our value of $f(x)$ at the current iteration larger than the value it was at the previous iteration? If so, that&#39;s a sign that our learning rate is too large, and we can use this criterion to dynamically adjust the learning rate. . Let&#39;s add some &#39;control&#39; code to that effect, to the previous script, and also print out the values of the relevant variables so we can track the progress: . from __future__ import print_function # for backwards-compatibility w/ Python2 import numpy as np, matplotlib.pyplot as plt def f(x): return (x-1)**2+1 def dfdx(x): return 2*(x-1) alpha = 13.0 # &quot;too big&quot; learning rate print(&quot;alpha = &quot;,alpha) x = -1 # starting point x_arr = [] y_arr = [] maxiter = 20 f_old = 1e99 # some big number for iter in range(maxiter): # do the descent # these two lines are just for plotting later x_arr.append(x) f_cur = f(x) y_arr.append( f_cur ) print(&quot;iter = &quot;,iter,&quot;x = &quot;,x,&quot;f(x) =&quot;,f(x),&quot;alpha = &quot;,alpha) if (f_cur &gt; f_old): # check for runaway behavior alpha = alpha * 0.5 print(&quot; decreasing alpha. new alpha = &quot;,alpha) f_old = f_cur # update via gradient descent x = x - alpha * dfdx(x) # report and make the plot print(&quot; final x = &quot;,x) fig, ax = plt.subplots() ax.update({&#39;xlabel&#39;:&#39;x&#39;, &#39;ylabel&#39;:&#39;f&#39;}) plt.plot(x_arr,y_arr,&#39;r&#39;,zorder=2,) plt.scatter(x_arr,y_arr,zorder=3,c=range(len(x_arr)),cmap=plt.cm.viridis) xlim = ax.get_xlim() x = np.arange(xlim[0],xlim[1],1) # x for dashed line plt.plot(x,f(x),zorder=1,ls=&#39;dashed&#39;) handles, labels = ax.get_legend_handles_labels() ax.legend(handles, labels) plt.show() . alpha = 13.0 iter = 0 x = -1 f(x) = 5 alpha = 13.0 iter = 1 x = 51.0 f(x) = 2501.0 alpha = 13.0 decreasing alpha. new alpha = 6.5 iter = 2 x = -599.0 f(x) = 360001.0 alpha = 6.5 decreasing alpha. new alpha = 3.25 iter = 3 x = 3301.0 f(x) = 10890001.0 alpha = 3.25 decreasing alpha. new alpha = 1.625 iter = 4 x = -7424.0 f(x) = 55130626.0 alpha = 1.625 decreasing alpha. new alpha = 0.8125 iter = 5 x = 4641.625 f(x) = 21535401.390625 alpha = 0.8125 iter = 6 x = -2899.390625 f(x) = 8412266.77758789 alpha = 0.8125 iter = 7 x = 1813.744140625 f(x) = 3286042.31937027 alpha = 0.8125 iter = 8 x = -1131.965087890625 f(x) = 1283610.8903790116 alpha = 0.8125 iter = 9 x = 709.1031799316406 f(x) = 501411.1134293014 alpha = 0.8125 iter = 10 x = -441.5644874572754 f(x) = 195864.32555832085 alpha = 0.8125 iter = 11 x = 277.6028046607971 f(x) = 76510.1115462191 alpha = 0.8125 iter = 12 x = -171.8767529129982 f(x) = 29887.37169774183 alpha = 0.8125 iter = 13 x = 109.04797057062387 f(x) = 11675.363944430403 alpha = 0.8125 iter = 14 x = -66.52998160663992 f(x) = 4561.298415793126 alpha = 0.8125 iter = 15 x = 43.20623850414995 f(x) = 1782.36656866919 alpha = 0.8125 iter = 16 x = -25.37889906509372 f(x) = 696.8463158864023 alpha = 0.8125 iter = 17 x = 17.486811915683575 f(x) = 272.8149671431259 alpha = 0.8125 iter = 18 x = -9.304257447302234 f(x) = 107.17772154028356 alpha = 0.8125 iter = 19 x = 7.440160904563896 f(x) = 42.47567247667326 alpha = 0.8125 final x = -3.025100565352435 . So in the preceding example, we start at $x=-1$, then the unstable behavior starts and we begin diverging from the minimum, so we decrease $ alpha$ as often as our criterion tells us to. Finally $ alpha$ becomes low enought to get the system &#39;under control&#39; and the algorithm enters the convergent regime. . Exercise: In the example above, we only decrease $ alpha$ by a factor of 2 each time, but it would be more efficient to decrease by a factor of 10. Try that and observe the behavior of the system. . You may say, &quot;Why do I need to worry about this instability stuff? As long as $ alpha&lt;1$ the system will converge, right?&quot; Well, for this simple system it seems obvious what needs to happen, but with multidimensional optimization problems (see below), it&#39;s not always obvious what to do. (Sometimes different &#39;dimensions&#39; need different learning rates.) This simple example serves as an introduction to phenomena which arise in more complex situations. . Challenge: Non-global minima . To explore more complicated functions, we&#39;re going to take advantage of the SymPy package, to let it take derivatives for us. Try executing the import in the next cell, and if nothing happens it means you have SymPy installed. If you get an error, you may need to go into a Terminal and run &quot;pip install sympy&quot;. . import sympy . You&#39;re good? No errors? Ok, moving on... . from __future__ import print_function # for backwards-compatibility w/ Python2 import numpy as np, matplotlib.pyplot as plt from sympy import Symbol, diff x = Symbol(&#39;x&#39;) # our function, more complicated (SymPy handles it!) f = (x-1)**4 - 20*(x-1)**2 + 10*x + 1 dfdx = diff(f,x) # setup fig, ax = plt.subplots() ax.update({&#39;xlabel&#39;:&#39;x&#39;, &#39;ylabel&#39;:&#39;f&#39;}) x_arr = np.arange(-5,7,0.1) y_arr = np.copy(x_arr) for i, val in enumerate(x_arr): y_arr[i] = f.evalf(subs={x:val}) ax.plot(x_arr,y_arr,ls=&#39;dashed&#39;) # space of &#39;error function&#39; # for a variety of learning rates... for alpha in ([0.002,0.01,0.03]): print(&quot;alpha = &quot;,alpha) xval = 6 # starting point x_arr = [xval] y_arr = [f.evalf(subs={x:xval})] maxiter = 50 # do the descent for iter in range(maxiter): # these two lines are just for plotting later x_arr.append(xval) y_arr.append( f.evalf(subs={x:xval}) ) # update via gradient descent xval = xval - alpha * dfdx.evalf(subs={x:xval}) print(&quot; final xval = &quot;,xval) ax.plot(x_arr,y_arr,&#39;o-&#39;,label=&quot;alpha = &quot;+str(alpha)) handles, labels = ax.get_legend_handles_labels() ax.legend(handles, labels) plt.show() . alpha = 0.002 final xval = 4.02939564594151 alpha = 0.01 final xval = 4.02896613891181 alpha = 0.03 final xval = -2.00328879556504 . All the runs start at $x=6$. Notice how the runs marked in organge and green go on to find a &quot;local&quot; minimum, but they don&#39;t find the &quot;global&quot; minimum (the overall lowest point) like the run marked in red does. The problem of ending up at non-global local minima is a generic problem for all kinds of optimization tasks. It tends to get even worse when you add more parameters... . Multidimensional Gradient Descent . (A descent into darkness...) . Let&#39;s define a function of two variables, that&#39;s got at least one minimum in it. We&#39;ll choose $$f(x,y) = - left( cos x + 3 cos y right) /2,$$ which actually has infinitely many minima, but we&#39;ll try to &#39;zoom in&#39; on just one. . We can vizualize this function via the graph produced by the code below; in the graph, darker areas show lower values than ligher areas, and there is a minimum at the point $x=0,y=0$ where $f(0,0)=-2$. . import numpy as np, matplotlib.pyplot as plt def f(x,y): return -( np.cos(x) + 3*np.cos(y) )/2 x = y = np.linspace(-4, 4, 100) z = np.zeros([len(x), len(y)]) for i in range(len(x)): for j in range(len(y)): z[j, i] = f(x[i], y[j]) fig, ax = plt.subplots() ax.update({&#39;xlabel&#39;:&#39;x&#39;, &#39;ylabel&#39;:&#39;y&#39;}) cs = ax.pcolor(x, y, z, cmap=plt.cm.afmhot) plt.gca().set_aspect(&#39;equal&#39;, adjustable=&#39;box&#39;) cbar = fig.colorbar(cs, orientation=&#39;vertical&#39;) plt.show() . The way we find a minimum is similar to what we did before, except we use partial derivatives in the x- and y-directions: . $$x_{new} = x_{old} + Delta x, Delta x = - alpha { partial f over partial x} $$ $$y_{new} = y_{old} + Delta y, Delta y = - alpha { partial f over partial y},$$ . from __future__ import print_function # for backwards-compatibility w/ Python2 import numpy as np, matplotlib.pyplot as plt # our function def f(x,y): return -( np.cos(x) + 3*np.cos(y) )/2 def dfdx(x,y): return np.sin(x)/2 def dfdy(x,y): return 3*np.sin(y)/2 # variables for this run alpha = 0.5 xval, yval = 2.5, 1.5 # starting guess(es) x_arr = [] y_arr = [] maxiter = 20 for iter in range(maxiter): # gradient descent loop x_arr.append(xval) y_arr.append(yval) xval = xval - alpha * dfdx(xval,yval) yval = yval - alpha * dfdy(xval,yval) print(&quot;Final xval, yval = &quot;,xval,yval,&quot;. Target is (0,0)&quot;) # background image: plot the color background x = y = np.linspace(-4, 4, 100) z = np.zeros([len(x), len(y)]) for i in range(len(x)): for j in range(len(y)): z[j, i] = f(x[i], y[j]) fig, ax = plt.subplots() ax.update({&#39;xlabel&#39;:&#39;x&#39;, &#39;ylabel&#39;:&#39;y&#39;}) cs = ax.pcolor(x, y, z, cmap=plt.cm.afmhot) plt.gca().set_aspect(&#39;equal&#39;, adjustable=&#39;box&#39;) cbar = fig.colorbar(cs, orientation=&#39;vertical&#39;) # plot the progress of our optimization plt.plot(x_arr,y_arr,zorder=1) plt.scatter(x_arr,y_arr,zorder=2,c=range(len(x_arr)),cmap=plt.cm.viridis) handles, labels = ax.get_legend_handles_labels() plt.show() . Final xval, yval = 0.0272555602238 3.59400699273e-12 . Target is (0,0) . In the above figure, we&#39;ve shown the &#39;path&#39; the algorithm takes in $x$-$y$ space, coloring the dots according to iteration number, so that the first points are dark purple, and later points tend to yellow. . Note that due to the asymmetry in the function (between $x$ and $y$), the path descends rapidly in $y$, and then travels along the &quot;valley&quot; in $x$ to reach the minimum. This &quot;long narrow valley&quot; behavior is common in multidimensional optimization problems: the system may &#39;solve&#39; one parameter quickly, but require thousands of operations to find the other one. . Many sophisticated schemes have arisen to handle this challenge, and we won&#39;t cover them here. For now, suffice it to say that, yes, this sort of thing happens. You may have &#39;found&#39; highly accurate values for certain parameters, but others are bogging down the process of convergence. . Next time, we&#39;ll cover a common application of optimization: Least Squares Regression... . Least Squares Regression . This is such a common thing to do in science and statistics, that everyone should learn how it works. We&#39;ll do it for linear relationships, but it generalizes to nonlinear situations as well. . How to Fit a Line . Let&#39;s say we&#39;re trying to fit a line to a bunch of data. We&#39;ve been given $n$ data points with coordinates $(x_i,y_i)$ where $i=1..n$. The problem becomes, given a line $f(x) = mx+b$, find the values of the parameters $m$ and $b$ which minimize the overall &quot;error&quot;. . add some kinda picture here? . The error can take many forms; one is the squared error $SE$, which is just the sum of the squares of the &quot;distances&quot; between each data point&#39;s $y$-value and the &quot;guess&quot; from the line fit $f$ at each value of $x$: . $$ SE = (f(x_1) - y_1)^2 + (f(x_2) - y_2)^2 + ... (f(x_n)-y_n)^2,$$ . We can write this concisely as $$ SE = sum_{i=1}^n (f(x_i)-y_i)^2.$$ . Another popular form is the &quot;mean squared error&quot; $MSE$, which is just $SE/n$: . $$ MSE = {1 over n} sum_{i=1}^n (f(x_i)-y_i)^2.$$ . The MSE has the nice feature that as you add more data points, it tends to hold a more-or-less consistent value (as opposed to the SE which gets bigger as you add more points). We&#39;ll use the MSE in the work that follows. . So expanding out $f(x)$, we see that the MSE is a function of $m$ and $b$, and these are the parameters we&#39;ll vary to minimize the MSE: $$ MSE(m,b) = {1 over n} sum_{i=1}^n (mx_i+b-y_i)^2.$$ . So, following our earlier work on multidimensional optimization, we start with guesses for $m$ and $b$ and then update according to gradient descent: . $$m_{new} = m_{old} + Delta m, Delta m = - alpha{ partial (MSE) over partial m} = - alpha{2 over n} sum_{i=1}^n (mx_i+b-y_i)(x_i) $$ $$b_{new} = b_{old} + Delta b, Delta b = - alpha{ partial (MSE) over partial b} = - alpha{2 over n} sum_{i=1}^n (mx_i+b-y_i)(1).$$ . So, to start off, let&#39;s get some data... . n = 20 np.random.seed(1) # for reproducability x_data = np.random.uniform(size=n) # random points for x m_exact = 2.0 b_exact = 1.5 y_data = m_exact * x_data + b_exact y_data += 0.3*np.random.normal(size=n) # add noise # Plot the data def plot_data(x_data, y_data, axis_labels=(&#39;x&#39;,&#39;y&#39;), zero_y=False): fig, ax = plt.subplots() ax.update({&#39;xlabel&#39;:axis_labels[0], &#39;ylabel&#39;:axis_labels[1]}) ax.plot(x_data, y_data,&#39;o&#39;) if (zero_y): ax.set_ylim([0,ax.get_ylim()[1]*1.1]) plt.show() plot_data(x_data,y_data, zero_y=True) . Note: in contrast to earlier parts of this document which include complete python programs in every code post, for brevity&#39;s sake we will start using the notebook &quot;as intended&quot;, relying on the internal state and adding successive bits of code which make use of the &quot;memory&quot; of previously-defined variables. . Let&#39;s map out the MSE for this group of points, as a function of possible $m$ and $b$ values... . def MSE(x,y,m,b): # Use Python array operations to compute sums return ((m*x + b - y)**2).mean() mm = bb = np.linspace(0, 4, 50) z = np.zeros([len(mm), len(bb)]) for i in range(len(mm)): for j in range(len(bb)): z[j, i] = MSE(x_data,y_data, mm[i],bb[j]) fig, ax = plt.subplots() ax.update({&#39;xlabel&#39;:&#39;m&#39;, &#39;ylabel&#39;:&#39;b&#39;}) cs = ax.pcolor(mm, bb, np.log(z), cmap=plt.cm.afmhot) plt.gca().set_aspect(&#39;equal&#39;, adjustable=&#39;box&#39;) plt.show() . We see the minimum near the &quot;exact&quot; values chosen in the begininng. (Note that we&#39;ve plotted the logarithm of the MSE just to make the colors stand out better.) . Next we will choose starting guesses for $m$ and $b$, and use gradient descent to fit the line... . m = 3.5 # initial guess b = 3.5 m_arr = [] b_arr = [] def dMSEdm(x,y,m,b): return (2*(m*x + b - y) *x).mean() def dMSEdb(x,y,m,b): return (2*(m*x + b - y)).mean() alpha = 0.1 maxiter, printevery = 500, 4 for iter in range(maxiter): m_arr.append(m) b_arr.append(b) if (0 == iter % printevery): print(iter,&quot;: b, m = &quot;,b,m,&quot;, MSE = &quot;,MSE(x_data,y_data,m,b)) m = m - alpha * dMSEdm(x_data,y_data,m,b) b = b - alpha * dMSEdb(x_data,y_data,m,b) print(&quot;Final result: m = &quot;,m,&quot;, b = &quot;,b) # background image: plot the color background (remembered from before) fig, ax = plt.subplots() ax.update({&#39;xlabel&#39;:&#39;m&#39;, &#39;ylabel&#39;:&#39;b&#39;}) cs = ax.pcolor(mm, bb, np.log(z), cmap=plt.cm.afmhot) plt.gca().set_aspect(&#39;equal&#39;, adjustable=&#39;box&#39;) # plot the progress of our descent plt.plot(m_arr,b_arr,zorder=1) plt.scatter(m_arr,b_arr,zorder=2,c=range(len(m_arr)),cmap=plt.cm.viridis) handles, labels = ax.get_legend_handles_labels() ax.legend(handles, labels) plt.show() . 0 : b, m = 3.5 3.5 , MSE = 6.86780331186 4 : b, m = 2.07377614457 2.89890882764 , MSE = 0.98222306593 8 : b, m = 1.55966423863 2.66310750082 , MSE = 0.194874325956 12 : b, m = 1.37811928553 2.56128194633 , MSE = 0.0877947061277 16 : b, m = 1.31767685375 2.50899769214 , MSE = 0.0718728682069 20 : b, m = 1.30118421505 2.47541762467 , MSE = 0.0683627241086 24 : b, m = 1.30049838878 2.44926336309 , MSE = 0.0666665839706 28 : b, m = 1.30535957938 2.4263945595 , MSE = 0.0653286635918 32 : b, m = 1.3120331485 2.40527655618 , MSE = 0.0641346050201 36 : b, m = 1.31916510087 2.38532649645 , MSE = 0.0630441987699 40 : b, m = 1.32626977167 2.36630978168 , MSE = 0.0620438837066 44 : b, m = 1.33317800067 2.34811979986 , MSE = 0.0611251920416 48 : b, m = 1.33983578596 2.33069751134 , MSE = 0.0602811821983 52 : b, m = 1.34623082683 2.31400206963 , MSE = 0.059505695069 56 : b, m = 1.35236573256 2.29800006645 , MSE = 0.0587931380437 60 : b, m = 1.35824825911 2.28266157418 , MSE = 0.0581383942813 64 : b, m = 1.36388775858 2.26795866993 , MSE = 0.0575367695918 68 : b, m = 1.3692938954 2.2538648666 , MSE = 0.0569839532221 72 : b, m = 1.374476189 2.2403548761 , MSE = 0.0564759850457 76 : b, m = 1.37944385765 2.22740449497 , MSE = 0.0560092265247 80 : b, m = 1.3842057718 2.21499053585 , MSE = 0.0555803344137 84 : b, m = 1.38877044688 2.20309077677 , MSE = 0.0551862367311 88 : b, m = 1.39314605011 2.19168391801 , MSE = 0.0548241107275 92 : b, m = 1.39734041211 2.18074954278 , MSE = 0.0544913626571 96 : b, m = 1.4013610397 2.17026808021 , MSE = 0.054185609197 100 : b, m = 1.40521512901 2.16022077017 , MSE = 0.0539046603748 104 : b, m = 1.40890957817 2.1505896296 , MSE = 0.0536465038826 108 : b, m = 1.41245099963 2.14135742035 , MSE = 0.0534092906637 112 : b, m = 1.41584573193 2.1325076183 , MSE = 0.0531913216685 116 : b, m = 1.41909985108 2.12402438375 , MSE = 0.0529910356848 120 : b, m = 1.42221918141 2.11589253313 , MSE = 0.0528069981559 124 : b, m = 1.42520930601 2.10809751176 , MSE = 0.0526378909052 128 : b, m = 1.42807557671 2.10062536785 , MSE = 0.052482502695 132 : b, m = 1.43082312365 2.09346272749 , MSE = 0.0523397205507 136 : b, m = 1.4334568645 2.08659677074 , MSE = 0.0522085217891 140 : b, m = 1.43598151321 2.08001520867 , MSE = 0.0520879666937 144 : b, m = 1.43840158849 2.07370626138 , MSE = 0.0519771917836 148 : b, m = 1.44072142187 2.0676586369 , MSE = 0.0518754036286 152 : b, m = 1.44294516546 2.06186151097 , MSE = 0.051781873167 156 : b, m = 1.44507679941 2.0563045077 , MSE = 0.0516959304829 160 : b, m = 1.44712013898 2.05097768097 , MSE = 0.0516169600082 164 : b, m = 1.44907884142 2.04587149665 , MSE = 0.0515443961135 168 : b, m = 1.45095641248 2.04097681551 , MSE = 0.0514777190569 172 : b, m = 1.45275621269 2.03628487687 , MSE = 0.0514164512613 176 : b, m = 1.45448146341 2.03178728296 , MSE = 0.0513601538933 180 : b, m = 1.45613525255 2.0274759838 , MSE = 0.0513084237208 184 : b, m = 1.45772054011 2.0233432629 , MSE = 0.0512608902243 188 : b, m = 1.4592401635 2.01938172337 , MSE = 0.051217212943 192 : b, m = 1.4606968426 2.0155842747 , MSE = 0.0511770790366 196 : b, m = 1.46209318462 2.01194412009 , MSE = 0.0511402010444 200 : b, m = 1.46343168877 2.00845474426 , MSE = 0.0511063148261 204 : b, m = 1.46471475077 2.00510990182 , MSE = 0.0510751776703 208 : b, m = 1.46594466707 2.00190360604 , MSE = 0.0510465665558 212 : b, m = 1.46712363904 1.99883011819 , MSE = 0.0510202765543 216 : b, m = 1.46825377682 1.99588393722 , MSE = 0.0509961193626 220 : b, m = 1.46933710318 1.99305978998 , MSE = 0.0509739219537 224 : b, m = 1.4703755571 1.99035262169 , MSE = 0.0509535253378 228 : b, m = 1.47137099724 1.98775758697 , MSE = 0.0509347834233 232 : b, m = 1.47232520527 1.98527004115 , MSE = 0.0509175619703 236 : b, m = 1.47323988906 1.98288553192 , MSE = 0.0509017376297 240 : b, m = 1.47411668575 1.98059979141 , MSE = 0.0508871970587 244 : b, m = 1.47495716466 1.97840872852 , MSE = 0.0508738361101 248 : b, m = 1.4757628301 1.97630842161 , MSE = 0.0508615590853 252 : b, m = 1.47653512409 1.97429511148 , MSE = 0.0508502780498 256 : b, m = 1.47727542891 1.97236519463 , MSE = 0.0508399122026 260 : b, m = 1.47798506956 1.97051521684 , MSE = 0.050830387298 264 : b, m = 1.47866531621 1.96874186695 , MSE = 0.0508216351133 268 : b, m = 1.47931738637 1.96704197096 , MSE = 0.0508135929607 272 : b, m = 1.47994244714 1.96541248634 , MSE = 0.050806203238 276 : b, m = 1.48054161728 1.96385049656 , MSE = 0.0507994130159 280 : b, m = 1.4811159692 1.96235320595 , MSE = 0.0507931736592 284 : b, m = 1.4816665309 1.96091793458 , MSE = 0.0507874404782 288 : b, m = 1.4821942878 1.95954211357 , MSE = 0.0507821724088 292 : b, m = 1.48270018448 1.95822328041 , MSE = 0.0507773317183 296 : b, m = 1.48318512642 1.95695907462 , MSE = 0.0507728837349 300 : b, m = 1.4836499816 1.95574723348 , MSE = 0.0507687965998 304 : b, m = 1.48409558201 1.954585588 , MSE = 0.0507650410387 308 : b, m = 1.48452272522 1.95347205901 , MSE = 0.0507615901523 312 : b, m = 1.48493217573 1.95240465348 , MSE = 0.0507584192235 316 : b, m = 1.4853246664 1.95138146095 , MSE = 0.0507555055402 320 : b, m = 1.48570089973 1.95040065006 , MSE = 0.0507528282332 324 : b, m = 1.48606154909 1.94946046531 , MSE = 0.0507503681262 328 : b, m = 1.48640726001 1.94855922395 , MSE = 0.0507481075984 332 : b, m = 1.48673865124 1.94769531289 , MSE = 0.0507460304589 336 : b, m = 1.48705631592 1.94686718587 , MSE = 0.0507441218299 340 : b, m = 1.48736082261 1.9460733607 , MSE = 0.0507423680409 344 : b, m = 1.48765271634 1.94531241654 , MSE = 0.0507407565302 348 : b, m = 1.48793251954 1.94458299143 , MSE = 0.0507392757554 352 : b, m = 1.48820073302 1.94388377984 , MSE = 0.0507379151103 356 : b, m = 1.48845783683 1.94321353027 , MSE = 0.0507366648493 360 : b, m = 1.48870429115 1.9425710431 , MSE = 0.0507355160173 364 : b, m = 1.48894053709 1.94195516839 , MSE = 0.0507344603858 368 : b, m = 1.48916699749 1.9413648038 , MSE = 0.0507334903937 372 : b, m = 1.48938407768 1.94079889271 , MSE = 0.0507325990934 376 : b, m = 1.48959216619 1.9402564222 , MSE = 0.050731780101 380 : b, m = 1.48979163547 1.93973642136 , MSE = 0.0507310275504 384 : b, m = 1.48998284254 1.93923795946 , MSE = 0.0507303360514 388 : b, m = 1.49016612963 1.93876014435 , MSE = 0.0507297006512 392 : b, m = 1.49034182478 1.93830212081 , MSE = 0.0507291167986 396 : b, m = 1.49051024246 1.93786306905 , MSE = 0.0507285803118 400 : b, m = 1.49067168412 1.93744220325 , MSE = 0.0507280873482 404 : b, m = 1.49082643871 1.93703877012 , MSE = 0.0507276343768 408 : b, m = 1.49097478321 1.9366520476 , MSE = 0.0507272181534 412 : b, m = 1.49111698313 1.9362813435 , MSE = 0.0507268356966 416 : b, m = 1.491253293 1.93592599432 , MSE = 0.0507264842671 420 : b, m = 1.49138395677 1.93558536407 , MSE = 0.0507261613477 424 : b, m = 1.49150920832 1.93525884305 , MSE = 0.0507258646256 428 : b, m = 1.49162927183 1.93494584685 , MSE = 0.0507255919755 432 : b, m = 1.4917443622 1.93464581526 , MSE = 0.0507253414444 436 : b, m = 1.4918546854 1.93435821128 , MSE = 0.050725111238 440 : b, m = 1.49196043891 1.93408252014 , MSE = 0.0507248997074 444 : b, m = 1.49206181201 1.93381824839 , MSE = 0.0507247053375 448 : b, m = 1.49215898613 1.93356492304 , MSE = 0.0507245267361 452 : b, m = 1.4922521352 1.93332209068 , MSE = 0.0507243626239 456 : b, m = 1.49234142595 1.93308931667 , MSE = 0.0507242118256 460 : b, m = 1.49242701819 1.93286618439 , MSE = 0.0507240732609 464 : b, m = 1.49250906511 1.93265229447 , MSE = 0.0507239459375 468 : b, m = 1.49258771357 1.93244726408 , MSE = 0.0507238289434 472 : b, m = 1.49266310433 1.93225072625 , MSE = 0.0507237214405 476 : b, m = 1.49273537233 1.93206232921 , MSE = 0.050723622659 480 : b, m = 1.49280464692 1.93188173576 , MSE = 0.0507235318913 484 : b, m = 1.49287105209 1.93170862267 , MSE = 0.0507234484872 488 : b, m = 1.49293470669 1.9315426801 , MSE = 0.0507233718493 492 : b, m = 1.49299572466 1.93138361102 , MSE = 0.0507233014288 496 : b, m = 1.4930542152 1.93123113075 , MSE = 0.0507232367213 Final result: m = 1.93108496636 , b = 1.49311028301 . Note that the optimized values $(m,b)$ that we find may not exactly match the &quot;exact&quot; values we used to make the data, because the noise we added to the data can throw this off. In the limit where the noise amplitude goes to zero, our optimized values will exactly match the &quot;exact&quot; values used to generated the data. . Let&#39;s see the results of our line fit... . # plot the points fig, ax = plt.subplots() ax.update({&#39;xlabel&#39;:&#39;x&#39;, &#39;ylabel&#39;:&#39;y&#39;}) ax.plot(x_data,y_data,&#39;o&#39;) ax.set_ylim([0,ax.get_ylim()[1]*1.1]) # and plot the line we fit xlim = ax.get_xlim() x_line = np.linspace(xlim[0],xlim[1],2) y_line = m*x_line + b ax.plot(x_line,y_line) plt.show() . Great! . Least Squares Fitting with Nonlinear Functions . We can generalize the technique describe above to fit polynomials $$ f(x) = c_0 + c_1 x + c_2 x^2 + ...c_k x^k,$$ where $c_0...c_k$ are the parameters we will tune, and $k$ is the order of the polynomial. (Typically people use the letter $a$ for polynomial coefficients, but in the math rendering of Jupter, $ alpha$ and $a$ look too much alike, so we&#39;ll use $c$.) Written more succinctly, $$ f(x) = sum_{j=0}^k c_j x^j.$$ . (Indeed, we could even try non-polynomial basis functions, e.g., $ f(x) = c_0 + c_1 g(x) + c_2 h(x) + ...,$ but let&#39;s stick to polynomials for now.) . The key thing to note is that for each parameter $c_j$, the update $ Delta c_j$ will be . $$ Delta c_j = - alpha { partial (MSE) over partial c_j} = - alpha { partial (MSE) over partial f}{ partial f over partial c_j}$$ $$= - alpha {2 over n} sum_{i=1}^n [f(x_i)-y_i](x_i)^{j} $$ . (Note that we are not taking the derivative with respect to $x_i$, but rather with respect to $c_j$. Thus there is no &quot;power rule&quot; that needs be applied to this derivative. Also there is no sum over j.) . The following is a complete code for doing this, along with some added refinements: . $ alpha$ is now $ alpha_j$, i.e. different learning rates for different directions | we initialise $ alpha_j$ such that larger powers of $x$ start with smaller coefficients | we put the fitting code inside a method (with a bunch of parameters) so we can call it later | . from __future__ import print_function # for backwards-compatibility w/ Python2 import numpy as np, matplotlib.pyplot as plt def f(x,c): y = 0*x # f will work on single floats or arrays for j in range(c.size): y += c[j]*(x**j) return y def polyfit(x_data,y_data, c_start=None, order=None, maxiter=500, printevery = 25, alpha_start=0.9, alpha_start_power=0.3): # function definitions def MSE(x_arr,y_arr,c): f_arr = f(x_arr,c) return ((f_arr - y_arr)**2).mean() def dMSEdcj(x_arr,y_arr,c,j): # deriviative of MSE wrt cj (*not* wrt x!) f_arr = f(x_arr,c) return ( 2* ( f_arr - y_arr) * x_arr**j ).mean() if ((c_start is None) and (order is None)): print(&quot;Error: Either specify initial guesses for coefficients,&quot;, &quot;or specify the order of the polynomial&quot;) raise # halt if c_start is not None: order = c_start.size-1 c = np.copy(c_start) elif order is not None: c = np.random.uniform(size=order+1) # random guess for starting point assert(c.size == order+1) # check against conflicting info k = order print(&quot; Initial guess: c = &quot; ,np.array_str(c, precision=2)) alpha = np.ones(c.size) for j in range(c.size): # start with smaller alphas for higher powers of x alpha[j] = alpha_start*(alpha_start_power)**(j) MSE_old = 1e99 for iter in range(maxiter+1): # do the descent for j in range(c.size): c[j] = c[j] - alpha[j] * dMSEdcj(x_data,y_data,c,j) MSE_cur = MSE(x_data,y_data,c) if (MSE_cur &gt; MSE_old): # adjust if runaway behavior starts alpha[j] *= 0.3 print(&quot; Notice: decreasing alpha[&quot;,j,&quot;] to &quot;,alpha[j]) MSE_old = MSE_cur if (0 == iter % printevery): # progress log print(&#39;{:4d}&#39;.format(iter),&quot;/&quot;,maxiter,&quot;: MSE =&quot;,&#39;{:9.6g}&#39;.format(MSE_cur), &quot;, c = &quot;,np.array_str(c, precision=3),sep=&#39;&#39;) print(&quot;&quot;) return c # Set up input data n = 100 np.random.seed(2) # for reproducability x_data = np.random.uniform(-2.5,3,size=n) # some random points for x c_data = np.array([-4,-3,5,.5,-2,.5]) # params to generate data (5th-degree polynomial) y_data = f(x_data, c_data) y_data += 0.02*np.random.normal(size=n)*y_data # add a (tiny) bit of noise #- Perform Least Squares Fit c = polyfit(x_data, y_data, c_start=c_data*np.random.random(), maxiter=500) #-- Plot the results def plot_data_and_curve(x_data,y_data,axis_labels=(&#39;x&#39;,&#39;y&#39;), ): # plot the points fig, ax = plt.subplots() ax.update({&#39;xlabel&#39;:axis_labels[0], &#39;ylabel&#39;:axis_labels[1]}) ax.plot(x_data,y_data,&#39;o&#39;) # and plot the curve we fit xlim = ax.get_xlim() x_line = np.linspace(xlim[0],xlim[1],100) y_line = f(x_line, c) ax.plot(x_line,y_line) plt.show() plot_data_and_curve(x_data,y_data) . Initial guess: c = [-3.52 -2.64 4.4 0.44 -1.76 0.44] Notice: decreasing alpha[ 3 ] to 0.00729 Notice: decreasing alpha[ 4 ] to 0.002187 Notice: decreasing alpha[ 5 ] to 0.0006561 0/500: MSE = 258.233, c = [-5.438 -1.633 4.24 0.555 -1.904 0.765] Notice: decreasing alpha[ 5 ] to 0.00019683 25/500: MSE = 0.529541, c = [-4.265 -1.545 5.668 -0.392 -2.146 0.612] 50/500: MSE = 0.424417, c = [-4.304 -1.808 5.659 -0.241 -2.137 0.595] 75/500: MSE = 0.335586, c = [-4.256 -2.034 5.552 -0.105 -2.115 0.578] 100/500: MSE = 0.275848, c = [-4.212 -2.218 5.457 0.006 -2.096 0.564] 125/500: MSE = 0.236521, c = [-4.175 -2.367 5.38 0.096 -2.08 0.553] 150/500: MSE = 0.21068, c = [-4.146 -2.488 5.317 0.17 -2.068 0.544] 175/500: MSE = 0.193702, c = [-4.122 -2.586 5.267 0.229 -2.058 0.537] 200/500: MSE = 0.182549, c = [-4.103 -2.665 5.226 0.277 -2.049 0.531] 225/500: MSE = 0.175222, c = [-4.087 -2.73 5.192 0.316 -2.042 0.526] 250/500: MSE = 0.170408, c = [-4.075 -2.782 5.165 0.347 -2.037 0.522] 275/500: MSE = 0.167245, c = [-4.064 -2.824 5.143 0.373 -2.033 0.519] 300/500: MSE = 0.165167, c = [-4.056 -2.859 5.126 0.393 -2.029 0.516] 325/500: MSE = 0.163802, c = [-4.049 -2.886 5.111 0.41 -2.026 0.514] 350/500: MSE = 0.162905, c = [-4.044 -2.909 5.1 0.424 -2.024 0.513] 375/500: MSE = 0.162316, c = [-4.039 -2.927 5.09 0.435 -2.022 0.511] 400/500: MSE = 0.161929, c = [-4.036 -2.942 5.083 0.444 -2.02 0.51 ] 425/500: MSE = 0.161675, c = [-4.033 -2.954 5.076 0.451 -2.019 0.509] 450/500: MSE = 0.161508, c = [-4.031 -2.964 5.071 0.457 -2.018 0.508] 475/500: MSE = 0.161398, c = [-4.029 -2.972 5.067 0.462 -2.017 0.508] 500/500: MSE = 0.161326, c = [-4.027 -2.978 5.064 0.465 -2.017 0.507] . Now, it turns out that polynomials are often terrible things to try to fit arbitrary data with, because they can &#39;blow up&#39; as $|x|$ increases, and this causes instability. But for a variety of physics problems (see below), polynomials can be just what we&#39;re after. Plus, that made a nice demonstration, for now. . (For more general functions, I actually wrote a multi-parameter SymPy gradient-descient that is completely general, but it&#39;s terrifically slow so I won&#39;t be posting it here. If you really want it, contact me.) . Learning Gravity . Ok. Now we&#39;re all we&#39;re going to do next is fit a parabola to the motion of a falling ball -- and that&#39;s supposed to tell us something deep about physics. Sounds silly, right? &#39;Everybody&#39; knows objects moving in a gravitational field follow parabolas (both in space &amp; time); the more math-savvy may complain that we&#39;re simply going to &#39;get out of this&#39; what we &#39;put into it.&#39; . Well, from a philosophical standpoint and from the way that these methods will generalize to other situations, there are significant implications from the methodology we&#39;re about to follow. . The Challenge: Given a set of one-dimensional data of position vs. time $y(t)$, can we find the underlying equation that gives rise to it? Better put, can we fit a model to it, and how well can we fit it, and what kind of model will it be anyway? . (This is the sort of thing that statisticians do, but it&#39;s also something physicists do, and one could argue, this is what everybody does all the time. ) . Let&#39;s get started. I&#39;m just going to specify y(t) at a series of $n+1$ time steps $t_i$ ($t_0$...$t_n$) and we&#39;ll make them evenly spaced, and we&#39;ll leave out any noise at all -- perfect data. :-) . g_exact = 9.8 # a physical parater we&#39;ll find a fit for dt = 0.01 tmax = 1 # number of time steps t_data = np.arange(0,tmax,step=dt) # time values nt = t_data.size print(&quot;dt = &quot;,dt,&quot;, nt = &quot;,nt) y0 = 1.234 # initial position, choose anything v0 = 3.1415 # initial velocity #assign the data y_data = y0 + v0*t_data - 0.5 * g_exact * t_data**2 # y_data *= np.random.uniform(low=.9, high=1.1, size=(y_data.size)) # for later; add noise in plot_data(t_data,y_data, axis_labels=(&#39;t&#39;,&#39;y&#39;)) . dt = 0.01 , nt = 100 . Can we fit this with a polynomial? Sure, let&#39;s do that, using the code from before... . c = polyfit(t_data, y_data, order=2, alpha_start = 10.0, maxiter=1000, printevery=100) print(&quot;Our fit: y(t) = &quot;,c[0],&quot; + &quot;,c[1],&quot;*t + &quot;,c[2],&quot;*t**2&quot;,sep=&#39;&#39;) print(&quot;Compare to exact: y(t) = &quot;,y0, &quot; + &quot;,v0, &quot;*t - &quot;,0.5*g_exact,&quot;*t**2&quot;,sep=&#39;&#39;) print(&quot;Estimate for g = &quot;,-2*c[2]) plot_data_and_curve(t_data,y_data, axis_labels=(&#39;t&#39;,&#39;y&#39;)) . Initial guess: c = [ 0.72 0.71 0.77] 0/1000: MSE = 5.41899, c = [-2.186 7.319 -1.042] Notice: decreasing alpha[ 0 ] to 3.0 Notice: decreasing alpha[ 0 ] to 0.9 100/1000: MSE =0.0314071, c = [ 1.642 0.749 -2.528] 200/1000: MSE =0.00280409, c = [ 1.356 2.427 -4.191] 300/1000: MSE =0.000250355, c = [ 1.27 2.928 -4.688] 400/1000: MSE =2.23522e-05, c = [ 1.245 3.078 -4.837] 500/1000: MSE =1.99565e-06, c = [ 1.237 3.122 -4.881] 600/1000: MSE =1.78176e-07, c = [ 1.235 3.136 -4.894] 700/1000: MSE =1.59079e-08, c = [ 1.234 3.14 -4.898] 800/1000: MSE =1.42029e-09, c = [ 1.234 3.141 -4.899] 900/1000: MSE =1.26806e-10, c = [ 1.234 3.141 -4.9 ] 1000/1000: MSE =1.13215e-11, c = [ 1.234 3.141 -4.9 ] Our fit: y(t) = 1.23400775143 + 3.14145457517*t + -4.89995497009*t**2 Compare to exact: y(t) = 1.234 + 3.1415*t - 4.9*t**2 Estimate for g = 9.79990994018 . What if we try fitting higher-order terms? Are their coefficients negligible? The system may converge, but it will take a lot more iterations... (be prepared to wait!) . c = polyfit(t_data, y_data, order=3, alpha_start = 1.0, maxiter=700000, printevery=10000) print(&quot;Our fit: y(t) = &quot;,c[0],&quot; + &quot;,c[1],&quot;*t + &quot;,c[2],&quot;*t**2 + &quot;,c[3],&quot;*t**3&quot;,sep=&#39;&#39;) print(&quot;Compare to exact: y(t) = &quot;,y0, &quot; + &quot;,v0, &quot;*t - &quot;,0.5*g_exact,&quot;*t**2&quot;,sep=&#39;&#39;) print(&quot;Estimate for g = &quot;,-2*c[2]) . Initial guess: c = [ 0.33 0.23 0.63 0.41] 0/700000: MSE = 0.828106, c = [ 1.189 -0.045 0.563 0.398] Notice: decreasing alpha[ 0 ] to 0.3 10000/700000: MSE =0.000464818, c = [ 1.291 2.454 -3.188 -1.138] 20000/700000: MSE =0.000369748, c = [ 1.285 2.528 -3.373 -1.015] 30000/700000: MSE =0.000294122, c = [ 1.279 2.594 -3.538 -0.906] 40000/700000: MSE =0.000233965, c = [ 1.275 2.654 -3.685 -0.808] 50000/700000: MSE =0.000186111, c = [ 1.27 2.706 -3.817 -0.72 ] 60000/700000: MSE =0.000148045, c = [ 1.266 2.753 -3.934 -0.642] 70000/700000: MSE =0.000117765, c = [ 1.263 2.795 -4.038 -0.573] 80000/700000: MSE =9.36783e-05, c = [ 1.26 2.833 -4.131 -0.511] 90000/700000: MSE =7.4518e-05, c = [ 1.257 2.866 -4.214 -0.456] 100000/700000: MSE =5.92766e-05, c = [ 1.254 2.896 -4.289 -0.407] 110000/700000: MSE =4.71526e-05, c = [ 1.252 2.922 -4.355 -0.363] 120000/700000: MSE =3.75083e-05, c = [ 1.25 2.946 -4.414 -0.323] 130000/700000: MSE =2.98366e-05, c = [ 1.248 2.967 -4.466 -0.288] 140000/700000: MSE =2.37341e-05, c = [ 1.247 2.986 -4.513 -0.257] 150000/700000: MSE =1.88797e-05, c = [ 1.246 3.003 -4.555 -0.229] 160000/700000: MSE =1.50182e-05, c = [ 1.244 3.018 -4.592 -0.205] 170000/700000: MSE =1.19465e-05, c = [ 1.243 3.031 -4.626 -0.183] 180000/700000: MSE =9.50301e-06, c = [ 1.242 3.043 -4.655 -0.163] 190000/700000: MSE =7.55933e-06, c = [ 1.241 3.054 -4.682 -0.145] 200000/700000: MSE =6.0132e-06, c = [ 1.24 3.063 -4.705 -0.129] 210000/700000: MSE =4.7833e-06, c = [ 1.24 3.072 -4.726 -0.115] 220000/700000: MSE =3.80496e-06, c = [ 1.239 3.079 -4.745 -0.103] 230000/700000: MSE =3.02672e-06, c = [ 1.239 3.086 -4.762 -0.092] 240000/700000: MSE =2.40766e-06, c = [ 1.238 3.092 -4.777 -0.082] 250000/700000: MSE =1.91521e-06, c = [ 1.238 3.097 -4.79 -0.073] 260000/700000: MSE =1.52349e-06, c = [ 1.237 3.102 -4.802 -0.065] 270000/700000: MSE =1.21188e-06, c = [ 1.237 3.106 -4.813 -0.058] 280000/700000: MSE =9.64014e-07, c = [ 1.237 3.11 -4.822 -0.052] 290000/700000: MSE =7.66841e-07, c = [ 1.236 3.114 -4.83 -0.046] 300000/700000: MSE =6.09997e-07, c = [ 1.236 3.117 -4.838 -0.041] 310000/700000: MSE =4.85233e-07, c = [ 1.236 3.119 -4.845 -0.037] 320000/700000: MSE =3.85987e-07, c = [ 1.236 3.122 -4.851 -0.033] 330000/700000: MSE =3.0704e-07, c = [ 1.235 3.124 -4.856 -0.029] 340000/700000: MSE =2.4424e-07, c = [ 1.235 3.126 -4.861 -0.026] 350000/700000: MSE =1.94285e-07, c = [ 1.235 3.127 -4.865 -0.023] 360000/700000: MSE =1.54547e-07, c = [ 1.235 3.129 -4.869 -0.021] 370000/700000: MSE =1.22937e-07, c = [ 1.235 3.13 -4.872 -0.019] 380000/700000: MSE =9.77925e-08, c = [ 1.235 3.132 -4.875 -0.017] 390000/700000: MSE =7.77907e-08, c = [ 1.235 3.133 -4.878 -0.015] 400000/700000: MSE =6.188e-08, c = [ 1.235 3.134 -4.88 -0.013] 410000/700000: MSE =4.92235e-08, c = [ 1.235 3.134 -4.882 -0.012] 420000/700000: MSE =3.91556e-08, c = [ 1.235 3.135 -4.884 -0.01 ] 430000/700000: MSE =3.1147e-08, c = [ 1.234 3.136 -4.886 -0.009] 440000/700000: MSE =2.47764e-08, c = [ 1.234 3.136 -4.887 -0.008] 450000/700000: MSE =1.97088e-08, c = [ 1.234 3.137 -4.889 -0.007] 460000/700000: MSE =1.56777e-08, c = [ 1.234 3.138 -4.89 -0.007] 470000/700000: MSE =1.24711e-08, c = [ 1.234 3.138 -4.891 -0.006] 480000/700000: MSE =9.92037e-09, c = [ 1.234 3.138 -4.892 -0.005] 490000/700000: MSE =7.89133e-09, c = [ 1.234e+00 3.139e+00 -4.893e+00 -4.691e-03] 500000/700000: MSE =6.27729e-09, c = [ 1.234e+00 3.139e+00 -4.894e+00 -4.184e-03] 510000/700000: MSE =4.99338e-09, c = [ 1.234e+00 3.139e+00 -4.894e+00 -3.731e-03] 520000/700000: MSE =3.97207e-09, c = [ 1.234e+00 3.139e+00 -4.895e+00 -3.328e-03] 530000/700000: MSE =3.15965e-09, c = [ 1.234e+00 3.140e+00 -4.896e+00 -2.968e-03] 540000/700000: MSE =2.5134e-09, c = [ 1.234e+00 3.140e+00 -4.896e+00 -2.647e-03] 550000/700000: MSE =1.99932e-09, c = [ 1.234e+00 3.140e+00 -4.896e+00 -2.361e-03] 560000/700000: MSE =1.5904e-09, c = [ 1.234e+00 3.140e+00 -4.897e+00 -2.106e-03] 570000/700000: MSE =1.26511e-09, c = [ 1.234e+00 3.140e+00 -4.897e+00 -1.878e-03] 580000/700000: MSE =1.00635e-09, c = [ 1.234e+00 3.140e+00 -4.897e+00 -1.675e-03] 590000/700000: MSE =8.0052e-10, c = [ 1.234e+00 3.141e+00 -4.898e+00 -1.494e-03] 600000/700000: MSE =6.36787e-10, c = [ 1.234e+00 3.141e+00 -4.898e+00 -1.332e-03] 610000/700000: MSE =5.06543e-10, c = [ 1.234e+00 3.141e+00 -4.898e+00 -1.188e-03] 620000/700000: MSE =4.02939e-10, c = [ 1.234e+00 3.141e+00 -4.898e+00 -1.060e-03] 630000/700000: MSE =3.20524e-10, c = [ 1.234e+00 3.141e+00 -4.899e+00 -9.454e-04] 640000/700000: MSE =2.54967e-10, c = [ 1.234e+00 3.141e+00 -4.899e+00 -8.432e-04] 650000/700000: MSE =2.02818e-10, c = [ 1.234e+00 3.141e+00 -4.899e+00 -7.520e-04] 660000/700000: MSE =1.61335e-10, c = [ 1.234e+00 3.141e+00 -4.899e+00 -6.707e-04] 670000/700000: MSE =1.28336e-10, c = [ 1.234e+00 3.141e+00 -4.899e+00 -5.982e-04] 680000/700000: MSE =1.02087e-10, c = [ 1.234e+00 3.141e+00 -4.899e+00 -5.335e-04] 690000/700000: MSE =8.12072e-11, c = [ 1.234e+00 3.141e+00 -4.899e+00 -4.758e-04] 700000/700000: MSE =6.45976e-11, c = [ 1.234e+00 3.141e+00 -4.899e+00 -4.244e-04] Our fit: y(t) = 1.23402130221 + 3.1412436463*t + -4.89936171114*t**2 + -0.000424401050714*t**3 Compare to exact: y(t) = 1.234 + 3.1415*t - 4.9*t**2 Estimate for g = 9.79872342227 . So, in this case, we were able to show not only that the data fits a parabola well, but that the higher order term (for $t^3$) is negigible!! Great science! In practice, however, for non-perfect data, this does not work out. The higher-order term introduces an extreme sensitivity to the noise, which can render the results inconclusive. . Exercise: Go back to where the data is generated, and uncomment the line that says &quot;# for later; add noise in&quot; and re-run the fitting. You will find that the coefficients for the cubic polynomial do not resemble the original values found at all, whereas the coefficients for a quadratic polynomial, while not being the same as before, will still be &quot;close.&quot; . Thus, by hypothesizing a parabolic dependence, we&#39;re able to correctly deduce the parameters of the motion (initial position &amp; velocity, and acceleration), and we get a very low error in doing so. :-) Trying to show that higher-order terms in a polynomial expansion don&#39;t contribute...that worked for &quot;perfect data&quot; but in a practical case it didn&#39;t work out because polynomials are &quot;ill behaved.&quot; Still, we got some useful physics out of it. And that works for many applications. We could stop here. . ...although... . What if our data wasn&#39;t parabolic? Sure, for motion in a uniform gravitational field this is fine, but what if we want to model the sinusoidal motion of a simple harmonic oscillator? In that case, guessing a parabola would only work for very early times (thanks to Taylor&#39;s theorem). Sure, we could fit a model where we&#39;ve explictly put in a sine function in the code -- and I encourage you to write your own code to do this -- but perhaps there&#39;s a way to deduce the motion, by looking at the local behavior and thereby &#39;learning&#39; the differential equation underlying the motion. . Exercise: Copy the polyfit() code elsewhere (e.g. to text file or a new cell in this Jupyter notebook or a new notebook) and rename it sinefit(), and modify it to fit a sine function instead of a polynomial: . $$y(t) = A sin( omega t + phi),$$ . where the fit parameters will be the amplitude $A$, frequency $ omega$ and phase constant $ phi$. Try fitting to data generated for $A=3$, $ omega=2$, $ phi=1.57$ on $0 le t le 10$. As an example, you can check your answer against this. . The discussion goes on, but I&#39;m breaking it off into a &quot;Part Ib&quot; for a separate post. In that post, we&#39;ll switch from fitting the data &quot;globally&quot; to looking &quot;locally,&quot; in preparation for work in &quot;Time Series Prediction.&quot; -SH . . Afterward: Alternatives to &quot;Simple&quot; Gradient Descent . There are lots of schemes that incorporate more sophisticated approaches in order to achieve convergence more reliabily and more quickly than the &quot;simple&quot; gradient descent we&#39;ve been doing. . Such schemes introduce concepts such as &quot;momentum&quot; and go by names such as Adagrad, Adadelta, Adam, RMSProp, etc... For an excellent overview of such methods, I recommend Sebastian Ruder&#39;s blog post which includes some great animations! .",
            "url": "https://drscotthawley.github.io/blog/2017/02/23/Following-Gravity-Colab.html",
            "relUrl": "/2017/02/23/Following-Gravity-Colab.html",
            "date": " • Feb 23, 2017"
        }
        
    
  
    
        ,"post24": {
            "title": "Machine Learning Reference List",
            "content": "This has been my personal reading list, first compiled ca. February 2016 &amp; updated very infrequently (e.g. Oct 2016, Feb 2017, Sept 2017). The field moves so quickly, much of this may have been superseded by now. If you find it useful as well, that’s great. . I’m mostly interested in audio processing, so… . Jump Right Into : Audio Processing via RNNs: . Generation/Synthesis of new sounds based on training set: . Jake Fiala: “Deep Learning and Sound” http://fiala.uk/notes/deep-learning-and-sound-01-intro | GRUV: https://github.com/MattVitelli/GRUV. Btw, found that LSTM worked better than GRU. | John Glover: http://www.johnglover.net/blog/generating-sound-with-rnns.html Glover used LSTM fed by phase vocoder (really just STFT). | Google Magenta for MIDI: https://magenta.tensorflow.org/welcome-to-magenta | Google WaveNet for Audio… https://deepmind.com/blog/wavenet-generative-model-raw-audio/ WaveNet is slow. “Fast Wavenet”: https://github.com/tomlepaine/fast-wavenet | WaveNet in Keras: https://github.com/basveeling/wavenet | . | . | . General Neural Network References: . Books/Guides on Deep/Machine Learning: (all excellent) http://neuralnetworksanddeeplearning.com | http://machinelearningmastery.com | https://www.deeplearningbook.org | Hacker’s Guide to Neural Nets by karpathy | . | Tutorials/Videos: Youtube Playlist on “Deep Learning”, t from Oxford U. by Nando de Freitas https://www.youtube.com/playlist?list=PLE6Wd9FR--EfW8dtjAuPoTuPcqmOV53Fu | Andrew Ng’s online course on ML at Stanford comes highly recommended: http://www.youtube.com/view_play_list?p=A89DCFA6ADACE599 | Stanford Tutorial: http://ufldl.stanford.edu/tutorial/ | . | Concepts in NN/Deep Learning: Backpropagation (i.e. the chain rule): neuralnetworksanddeeplearning.org book, chapter 2 | . | Chris Olah on backprop: http://colah.github.io/posts/2015-08-Backprop/ | . | Karpathy on backprop: http://cs231n.github.io/optimization-2/ | . | . | . | . Recurrent Neural Networks (RNN) (which mostly feature LSTM nowadays): . RNNs in general: Karpathy post: http://karpathy.github.io/2015/05/21/rnn-effectiveness/, Karpathy talk: https://www.youtube.com/watch?v=yCC09vCHzF8 Excellent annotated Char-NN in Keras tutorial: http://ml4a.github.io/guides/recurrent_neural_networks/ | . | Andrew Trask post/tutorial: https://iamtrask.github.io/2015/11/15/anyone-can-code-lstm/ | Denny Britz post: http://www.wildml.com/2015/09/recurrent-neural-networks-tutorial-part-1-introduction-to-rnns/ | Class notes/tutorial (long!): http://minds.jacobs-university.de/sites/default/files/uploads/papers/ESNTutorialRev.pdf | CS class notes (short): https://www.willamette.edu/~gorr/classes/cs449/rnn1.html | Excellent post by Ross Goodwin RNNs: https://medium.com/@rossgoodwin/adventures-in-narrated-reality-6516ff395ba3#.q2xh8dp5t | Great List of references; https://handong1587.github.io/deep_learning/2015/10/09/rnn-and-lstm.html | . | in TensorFlow: https://www.tensorflow.org/versions/r0.8/tutorials/recurrent/index.html | Theano tutorial: http://deeplearning.net/tutorial/rnnslu.html | Batch Normalization for: https://arxiv.org/abs/1510.01378: “applying batch normalization to the hidden-to-hidden transitions of our RNNs doesn’t help the training procedure. We also show that when applied to the input-to-hidden transitions, batch normalization can lead to a faster convergence of the training criterion but doesn’t seem to improve the generalization performance” | . Traditional RNNs suffer from vanishing/exploding gradient. Hence LSTM &amp; others… . Long Short-Term Memory (LSTM): . Tutorial: http://nbviewer.jupyter.org/github/JonathanRaiman/theano_lstm/blob/master/Tutorial.ipynb | Chris Olah post: http://colah.github.io/posts/2015-08-Understanding-LSTMs | Zach Lipton post, “Demystifying LSTM” (with Tutorial theano code): http://blog.terminal.com/demistifying-long-short-term-memory-lstm-recurrent-neural-networks/ | Demo: Lightweight Theano-LSTM: https://github.com/JonathanRaiman/theano_lstm | Massive 33-page review article by Lipton et al: http://arxiv.org/abs/1506.00019 | As of March 2016, Keras forum posts show that “stated” RNNs are still an active dev issue. (As of last year, Keras has LSTM but was resetting the “state”, = inconvenient &amp; slow.)….Update Sept 2016: Seems to be fixed | LSTM tutorial in Tensorflow: https://www.tensorflow.org/versions/r0.10/tutorials/recurrent/index.html | Stateful LSTM in Keras for time-series prediction: https://github.com/fchollet/keras/blob/master/examples/stateful_lstm.py Much-need Docs on stateful LSTM in Keras: http://philipperemy.github.io/keras-stateful-lstm/ | . | Tensorflow sequence prediction: http://mourafiq.com/2016/05/15/predicting-sequences-using-rnn-in-tensorflow.html | LSTM backpropagation tutorial :-) http://arunmallya.github.io/writeups/nn/lstm/index.html#/ | . LSTM Alternatives/advances: . GRU (Gated Recurrent Unit) by Cho et al, “Learning Phrase Representations using RNN Encoder–Decoder for Statistical Machine Translation”, http://arxiv.org/pdf/1406.1078v3.pdf (2014) Chung et al. Good exp of GRU &amp; LSTM, say GRU comparable to LSTM, http://arxiv.org/abs/1412.3555 | But GRUV/MVitelli found that LSTM outperformed GRU for audio accuracy | GRU’s are a bit simpler than LSTM, Britz blog/tutorial: http://www.wildml.com/2015/10/recurrent-neural-network-tutorial-part-4-implementing-a-grulstm-rnn-with-python-and-theano | . | ClockWork-RNN by Koutnik et al, http://arxiv.org/pdf/1402.3511v1.pdf | Highway networks… | Echo State Networks (ESN). (2008) Comparison of MLP, RNN &amp; ESN for sequence modeling: https://www.researchgate.net/publication/224374378_A_comparison_of_MLP_RNN_and_ESN_in_determining_harmonic_contributions_from_nonlinear_loads | Undecimated Fully Convolutional Neural Networks (UFCNN): http://arxiv.org/pdf/1508.00317.pdf | ConvNet for Audio – Spotify analysis &amp; recommendation: http://benanne.github.io/2014/08/05/spotify-cnns.html | . LSTM for Sequence to Sequence Learning: . Main paper: http://papers.nips.cc/paper/5346-sequence-to-sequence-learning-with-neural-networks.pdf | There’s an encoder step and a decoder step | Example: https://bigaidream.gitbooks.io/subsets_ml_cookbook/content/dl/theano/theano_keras_sequence2sequence.html#keras-for-sequence-to-sequence-learning | Keras Seq2Seq extension: https://github.com/farizrahman4u/seq2seq | Multiple blog pages, re. language model: https://indico.io/blog/sequence-modeling-neuralnets-part1/ | Tensor flow tutorial: https://www.tensorflow.org/versions/r0.10/tutorials/seq2seq/index.html WARNING: “It takes about 18GB of disk space and several hours to prepare the training corpus.” :-( | SE post on pitch-shift mapping http://stats.stackexchange.com/questions/220307/rnn-learning-sine-waves-of-different-frequencies | Denoising: http://mlsp.cs.cmu.edu/people/rsingh/docs/waspaa2015.pdf | Denoising Autoencoder: https://www.quora.com/Is-it-possible-to-create-an-adaptive-filter-using-neural-network-so-that-after-training-it-can-filter-noisy-signal-and-give-desired-output, https://www.quora.com/Can-a-denoising-autoencoder-remove-or-filter-noise-in-a-noisy-signal-like-audio-and-recover-the-clean-signal | Dereverberation: | . | . Extended Memory Architectures: . Memory Networks, Weston, First paper: https://arxiv.org/abs/1410.3916. | Tutorial: http://www.thespermwhale.com/jaseweston/icml2016/ | End-to-End version: http://arxiv.org/abs/1503.08895 | Keras version: https://github.com/fchollet/keras/blob/master/examples/babi_memnn.py | . | Stack-Augmented Recurrent Nets, Joulin &amp; Mikolov “Inferring Algorithmic Patterns with Stack-Augmented Recurrent Nets,” https://arxiv.org/pdf/1503.01007.pdf (2015) | Neural Turing Machines (NTM), Graves et al, https://arxiv.org/pdf/1410.5401v2.pdf | Neural Stack Machines: Original paper: “Learning to Transduce with Unbounded Memory” by Grefenstette et al.: https://arxiv.org/abs/1506.02516 | Trask’s tutorial blog on Neural Stack Machines | . | . Convolutional Neural Networks: . Video: “What is wrong with convolutional neural nets?” Geoffrey Hinton, Fields Institute, August 2017”https://www.youtube.com/watch?v=Mqt8fs6ZbHk&amp;feature=youtu.be | Excellent: “History of major convnet architectures” (LeNet, AlexNet, Inception ResNet, VGG,…) https://culurciello.github.io/tech/2016/06/04/nets.html | Excellent: “A guide to convolution arithmetic for deep learning” by Dumoulin and Visin https://arxiv.org/pdf/1603.07285.pdf | Glossary/Summary of conv net terms/concepts: Vector: not a true vector in the sense of vector calculus. Just a one-dimensional array. “N-dimensional vector” = 1-D array with N elements. | Tensor: not a true tensor in the sense of differential geometry. Just a multi-dimensional arry or “matrix”. | Affine Transformation: General math term; here we just mean multiplying by a tensor and (maybe) adding a constant bias (vector). Generalization of “linear transformation.” | Convolution: Pretty much what you’d normally think of “convolution” in the DSP sense. The following analogy helps me too: Evaluating a finite-difference stencil on a discretised scalar field via a banded (e.g. tridiagonal) matrix would be considered a convolution in the CNN sense, because said matrix is sparse and the same weights are used throughout. | Channel Axis: (quoting D&amp;V): “is used to access different views of the data (e.g., the red, green and blue channels of a color image, or the left and right channels of a stereo audio track).” | Feature Map: Generally, the output of running one particular convolution kernel over a data item (e.g over an image). However there are also input feature maps, examples of which are the “channels” referred to earlier (e.g. RGB, Left/Right). | Flattening: turn a tensor into a vector | Pooling: can think of it like a special type of convolution kernel (except it may not just add up the kernel’s inputs). Usually “Max Pooling”, as in: take the maximum value from the the kernel’s inputs. (On the other hand, “Average pooling” really is just a regular top-hat convolution.) In contrast to regular convolution, pooling does not involve zero padding, and pooling often takes place over non-overlapping regions of the input. | (Zero-)Padding: Pretty much like in the DSP sense: add zeros to the front or end of a data stream or image, so that you can run convolution kernel all the way up to &amp; over the boundaries of where they data’s defined. | Transposed Convolution: Analagous to transposing a matrix to get an output with oppositely-ordered shape, e.g. to go from an output feature map of one shape, back to the original shape of the input. There seems to be some confusion, whereby some people treat the transpose as if it’s an inverse, like ATA=IA^T A = IATA=I. ?? | 1x1: Actually 1x1xC, where C is, e.g. the number color channels in a RGB image (3). . | an observation: the bigger shape of the kernel, the smaller the shape of its output feature map | . | Related: Deconvolutional Networks http://www.matthewzeiler.com/pubs/cvpr2010/cvpr2010.pdf | . Reinforcement Learning: . OpenAIGym: https://openai.com/blog/openai-gym-beta/ Tutorial for cart-pole problem: http://kvfrans.com/simple-algoritms-for-solving-cartpole/ | . | For games: Giraffe | Atari DRL: Video: https://www.youtube.com/watch?v=V1eYniJ0Rnk | BetaGo: https://github.com/maxpumperla/betago | . Data Representation: . Scattering Hierarchy (multi-scale representation) by Mallat (2012-2014), Pablo Sprechman’s talk https://youtu.be/OS6rZXKVU1Y?t=20m44s . Related Approaches to Neural Networks: (historical) . Hidden Markov Models (HMM). Dahl used for text classification: George E. Dahl, Ryan P. Adams, and Hugo Larochelle. “Training restricted boltzmann machines on word observations.” arXiv:1202.5695v1 (2012) | Support Vector Machine (SVM). SVMs are globally convex, which is nice (whereas NNs are only locally convex). Very effective for classification tasks. But NNs have beat them out for complex datasets &amp; tasks. Audio app: e.g., Audio Classificiation by Gou &amp; Li (2003) http://www.ee.columbia.edu/~sfchang/course/spr-F05/papers/guo-li-svm-audio00.pdf | Restricted Boltzmann Machine (RBM). Hinton et al. mid-2000s | . Frameworks (too many to choose from!): . Main Ones: Theano - mature codebase, non-CUDA GPU support via libgpuarray | TensorFlow - Google-supported, awesome viz tool TensorBoard | Keras, runs on Theano or TensorFlow as backends. VERY popular | Torch - used by LeCun &amp; Karpathy, scripting in Lua. Not Python. * PyTorch Python bindings for Torch, includes ‘automatic differentiation’ . | Scikit-Learn - General system for many methods; some Keras support. Allows ‘easy’ swapping of different ML methods &amp; models | . | Others, not seeing these used as much: Caffe, supposed to be easy &amp; abstract | Lasagne - Another Theano front end for abstraction &amp; ease of use | Mozi, Another one build on Theano. Looks simple to use | DeepLearning4J: The “J” is for “Java” | scikits.neural - not popular | . | Which package to choose when starting out? I say Keras. Everything’s super-easy and automated compared to others. | . | . More Tutorials (e.g., app-specific): . Lots in http://maachinelearningmastery.com | Andrew Trask’s Blog: Andrew writes excellent tutorials. The first LSTM guide I read was his. | Tutorials on Theano, Keras, Lasagne, RNN: https://github.com/Vict0rSch/deep_learning | Theano: Theano basics: http://nbviewer.jupyter.org/github/craffel/theano-tutorial/blob/master/Theano%20Tutorial.ipynb | Then crash course via code: https://github.com/Newmu/Theano-Tutorials | LSTM in Theano: http://nbviewer.jupyter.org/github/JonathanRaiman/theano_lstm/blob/master/Tutorial.ipynb | . | Tensorflow: TensorFlow graph vis tutorial: https://www.tensorflow.org/versions/r0.8/how_tos/graph_viz/index.html | TensorFlow on AWS (tutorial video): https://www.youtube.com/watch?v=1QhCsO4jmoM | LSTM tutorial in Tensorflow: https://www.tensorflow.org/versions/r0.10/tutorials/recurrent/index.html | . | Torch: First, Lua: “Learn Lua in 15 Minutes”: http://tylerneylon.com/a/learn-lua/ | Deep Learning in Torch: a 60-minute Blitz by Soumith Chintala at CVPR2015: https://github.com/soumith/cvpr2015/blob/master/Deep%20Learning%20with%20Torch.ipynb | LSTM in Torch (by Zaremba) https://github.com/wojzaremba/lstm | Tutorial Videos: https://www.youtube.com/playlist?list=PLLHTzKZzVU9ebuL6DCclzI54MrPNFGqbW | . | . More Demos: . Anything by @karpathy | Lightweight Theano-LSTM: https://github.com/JonathanRaiman/theano_lstm | TensorFlow Playgrounds: http://playground.tensorflow.org | . Audio Applications: . Huang et al, “Deep Recurrent NNs for Source Separation” http://posenhuang.github.io/papers/Joint_Optimization_of_Masks_and_Deep%20Recurrent_Neural_Networks_for_Monaural_Source_Separation_TASLP2015.pdf Qutoe: “in parallel, for improving the efficiency of DRNN training, utterances are chopped into sequences of at most 100 time steps” | . | Ron Weiss (Google) talk: “Training neural network acoustic models on waveforms” https://www.youtube.com/watch?v=sI_8EA0_ha8 | Music comp: http://www.hexahedria.com/2015/08/03/composing-music-with-recurrent-neural-networks/ | Predict time sequence with LSTM &amp; Theano…GRUV | MULTI-RESOLUTION LINEAR PREDICTION BASED FEATURES FOR AUDIO ONSET DETECTION WITH BIDIRECTIONAL LSTM NEURAL NETWORKS Erik Marchi1 , Giacomo Ferroni2 , Florian Eyben1 , Leonardo Gabrielli2 , Stefano Squartini2 , Bjorn Schuller ¨ 3,1 http://mediatum.ub.tum.de/doc/1238131/865625.pdf | John Glover on generating instrument sounds with RNN: http://www.johnglover.net/blog/generating-sound-with-rnns.html | Example of using spectrograms as images (for an image-based classifier): http://stackoverflow.com/questions/37213388/keras-accuracy-does-not-change | . Datasets of (mostly musical) Audio for Machine Learning: . IRMAS: for musical Instrument recognition: http://www.mtg.upf.edu/download/datasets/irmas . | Fraunhofer IDMT datasets: (Scroll down to “Published Datasets” on http://www.idmt.fraunhofer.de/en/business_units/m2d/research.html) IDMT-SMT-Bass An audio database for bass transcription and signal processing | IDMT-SMT-Audio-Effects An audio database for automatic effect detection in recordings of electric guitar and bass | IDMT-SMT-Bass Synthesis A Digital Waveguide Model of the Electric Bass Guitar including Different Playing Techniques | IDMT-SMT-BASS-SINGLE-TRACK | Multi-track studio recordings of live performances in Swing, Blues and Funk styles | IDMT-SMT-Guitar An audio database for guitar transcription and signal processing | IDMT-SMT-Drums An audio database for drum transcription and source separation | Multicodec Invdec Tampering Dataset | . | Massive list of datasets (most are MIDI though): http://www.audiocontentanalysis.org/data-sets/ | Another massive list of datasets (with many repeats from above): http://wiki.schindler.eu.com/doku.php?id=datasets:overview . | Melody annotation dataset: http://medleydb.weebly.com/description.html . | Binaural audio: : Antoine Deleforge: http://perception.inrialpes.fr/~Deleforge/AVASM_Dataset/ | . | . Activations &amp; Optimizers . ELU: Exponential Linear Unit, seems to work better than ReLU in many cases https://arxiv.org/pdf/1511.07289v1.pdf | . In Physics: . “Fast cosmological parameter estimation using neural networks”, T. Auld, M. Bridges, M.P. Hobson and S.F. Gull, MNRAS. 000, 1–6 (2004), https://arxiv.org/pdf/astro-ph/0608174.pdf | “Parameterized Neural Networks for High-Energy Physics”, Baldi, P., Cranmer, K., Faucett, T., Sadowski, P., Whiteson, D. The European Physical Journal C. 76, 235, 1-7, May 2016, 2016, https://arxiv.org/pdf/1601.07913.pdf | . Hardware: . Amazon Web Services (AWS): Stanford disk image (AMI) with everything preinstalled: https://cs231n.github.io/aws-tutorial/ | …or just grab some other “Community AMI” with CUDA etc installed | Another AWS setup: https://github.com/andreasjansson/simple-aws-gpu-setup | TensorFlow on AWS (tutorial video): https://www.youtube.com/watch?v=1QhCsO4jmoM | My AWS Aetup: ami-a96285c4 ( AMI: old cuda but works: ami-63bf8209 do not like: 11777_MML (ami-37a58f5d) or DeepestLearning ) When u create your own AMI it brings your server down. :-( | . | . pip install --upgrade pip pip install -U numpy sudo pip install git+git://github.com/Theano/Theano.git --upgrade --no-deps sudo pip install awscli h5py git clone &lt;https://github.com/fchollet/keras.git&gt; cd keras sudo python setup.py install . FACTOR OF 10 SPEEDUP using the g2.xlarge GPUs vs my Macbook Pro (no GPU)!! . Checkpointing: . run ‘watch’ command to execute AWS transfer to S3 ever seconds ...and spot instance went down without any checkpoint to allow uploading from EC2 to S3 it&#39;s convoluted: install aws cli create an &quot;IAM&quot; user. Grant the user permissions to upload to s3 via &lt;https://forums.aws.amazon.com/thread.jspa?messageID=600007&gt; aws configure ...good to go. . watch -n 550 aws s3 cp /tmp/weights.hdf5 s3://hawleymainbucket . Theano GPU setup guide: https://github.com/andreasjansson/simple-aws-gpu-setup | OpenMP: Don’t forget to enable multiple OpenMP threads! Can get you at least a factor of 2 speedup! In most ‘modern’ Python installations (e.g. anaconda) OpenMP is automatic | . | My proposed PC build: https://pcpartpicker.com/user/drscotthawley/saved/bFZ8dC | | . Self-Organizing Maps: . “Unsupervised Classification of Audio Signals by Self-Organizing Maps and Bayesian Labeling”: http://link.springer.com/chapter/10.1007%2F978-3-642-28942-2_6 | “Visualization of Tonal Content in the Symbolic and Audio Domains“ http://www.ccarh.org/publications/cm/15/cm15-10-toiviainen.pdf | . “Weird Stuff”: . Stochastic path Deep NN for image rec: http://arxiv.org/pdf/1603.09382v1.pdf | .",
            "url": "https://drscotthawley.github.io/blog/2017/02/06/Machine-Learning-Reference-List.html",
            "relUrl": "/2017/02/06/Machine-Learning-Reference-List.html",
            "date": " • Feb 6, 2017"
        }
        
    
  
    
        ,"post25": {
            "title": "How to Port-Forward Jupyter Notebooks",
            "content": "Jupyter notebooks and their related iTorch notebooks seem to be popular for tutorials, e.g the Deep Learning with Torch tutorial I started today, but I hated them and avoided them – not just for the reasons on this list, but mainly because I keep my “machine learning machine” inside my university’s firewall and this has made it a pain to run “notebooks” if you’re off-site. . When I work from home, I do so via a couple ssh hops, and then copy and paste my script files into the terminal window. But these “notebook” things require a web GUI, and X11 forwarding over mutliple ssh sessions is prohibitively slow. . I didn’t want to configure a NAT system, and was considering some kind of homegrown CGI-script system (which has “security breach” written all over it), but thankfully I stumbled upon this post on Coderwall, where the process was spelled out. For my set of systems, I needed an additional layer of port-forwarding. So for me it goes like this… . My machine-learning computer, which we’ll call “internal”, sits inside the firewall. On internal, I run the Jupyter notebook… me@internal$ jupyter notebook --no-browser --port=8889 or for torch, similarly, me@internal:~$ itorch notebook --no-browser --port=8889 This generates a bunch of text, including a URL with a token. It’ll say… . Copy/paste this URL into your browser when you connect for the first time, to login with a token: http://localhost:8889/?token=96c92fc27f102995044da89ae111914c28e51757d57bebfc . | The server we’ll call “doorkeeper” is visible to the outside world, and so we forward its port 8889 to the one over on “internal” where the notebook is running: me@doorkeeper:~$ ssh -N -n -L 127.0.0.1:8889:127.0.0.1:8889 internal . | Then on my laptop, I run a similar port-forward so the browser will connected to the port on doorkeeper: me@laptop:~$ ssh -N -n -L 127.0.0.1:8889:127.0.0.1:8889 doorkeeper . | And then on my laptop, I paste the URL from the jupyter (or itorch) notebook into my web browser… http://localhost:8889/?token=96c92fc27f102995044da89ae111914c28e51757d57bebfc …and it works! The notebook comes right up, but the only lag involves sending text over ssh, as opposed to sending X11 graphics. . | (incidentally, I find ‘localhost’ sometimes doesn’t resolve, which is why I use 127.0.0.1 explicitly) . Wohoo! . . Extra: Remotely Editing Files via rmate &amp; Sublime Text . On laptop, in Sublime Text 3: Tools &gt; Command Pallete &gt; Install package &gt; rsub . On internal (server): sudo apt-get install ruby; sudo gem install rmate . Make two reverse-SHH tunnel hops from laptop to doorkeeper to internal: . ssh -R 52698:127.0.0.1:52698 doorkeeper . | (on doorkeeper) ssh -R 52698:127.0.0.1:52698 internal . | (then on internal) rmate [whatever file you want to edit] . | …and suddenly, your file appears in your Sublime Text window on your laptop! . To automate this, either alias ssh to be “ssh -R 52698:127.0.0.1:52698” or modify your ~/.ssh/config file(s) .",
            "url": "https://drscotthawley.github.io/blog/2017/02/03/How-To-Port-Forward-Jupyter-Notebooks.html",
            "relUrl": "/2017/02/03/How-To-Port-Forward-Jupyter-Notebooks.html",
            "date": " • Feb 3, 2017"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "I dabble in a variety of technologies, usually with the goal of improving the physics education of audio engineering students. Professorly Web Page . . Affiliations . Belmont University . ASPIRE Research Co-op . More Information . My music website . Contact me . How about a message on twitter? @drscotthawley . . This site was built using Fastpages by Hamel Husain .",
          "url": "https://drscotthawley.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://drscotthawley.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

  
  

}